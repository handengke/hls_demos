// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_systolic_array_Pipeline_top_inner_loop1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        b_vec_3_0,
        b_vec_2_0,
        b_vec_1_0,
        b_vec_0_0,
        a_vec_3_0,
        a_vec_2_0,
        a_vec_1_0,
        a_vec_0_0,
        din_a,
        din_b,
        zext_ln107,
        b_vec_3_1_out,
        b_vec_3_1_out_ap_vld,
        b_vec_2_1_out,
        b_vec_2_1_out_ap_vld,
        b_vec_3_3_out,
        b_vec_3_3_out_ap_vld,
        b_vec_3_7_out,
        b_vec_3_7_out_ap_vld,
        a_vec_3_1_out,
        a_vec_3_1_out_ap_vld,
        a_vec_2_1_out,
        a_vec_2_1_out_ap_vld,
        a_vec_3_3_out,
        a_vec_3_3_out_ap_vld,
        a_vec_3_8_out,
        a_vec_3_8_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] b_vec_3_0;
input  [31:0] b_vec_2_0;
input  [31:0] b_vec_1_0;
input  [31:0] b_vec_0_0;
input  [31:0] a_vec_3_0;
input  [31:0] a_vec_2_0;
input  [31:0] a_vec_1_0;
input  [31:0] a_vec_0_0;
input  [63:0] din_a;
input  [63:0] din_b;
input  [3:0] zext_ln107;
output  [31:0] b_vec_3_1_out;
output   b_vec_3_1_out_ap_vld;
output  [31:0] b_vec_2_1_out;
output   b_vec_2_1_out_ap_vld;
output  [31:0] b_vec_3_3_out;
output   b_vec_3_3_out_ap_vld;
output  [31:0] b_vec_3_7_out;
output   b_vec_3_7_out_ap_vld;
output  [31:0] a_vec_3_1_out;
output   a_vec_3_1_out_ap_vld;
output  [31:0] a_vec_2_1_out;
output   a_vec_2_1_out_ap_vld;
output  [31:0] a_vec_3_3_out;
output   a_vec_3_3_out_ap_vld;
output  [31:0] a_vec_3_8_out;
output   a_vec_3_8_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg b_vec_3_1_out_ap_vld;
reg b_vec_2_1_out_ap_vld;
reg b_vec_3_3_out_ap_vld;
reg b_vec_3_7_out_ap_vld;
reg a_vec_3_1_out_ap_vld;
reg a_vec_2_1_out_ap_vld;
reg a_vec_3_3_out_ap_vld;
reg a_vec_3_8_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln109_reg_1080;
reg   [0:0] and_ln116_reg_1096;
reg   [0:0] tmp_2_reg_1100;
reg    ap_predicate_op78_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg   [0:0] icmp_ln109_reg_1080_pp0_iter4_reg;
reg   [0:0] and_ln116_reg_1096_pp0_iter4_reg;
reg   [0:0] tmp_2_reg_1100_pp0_iter4_reg;
reg    ap_predicate_op146_read_state10;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln109_reg_1080_pp0_iter3_reg;
reg   [0:0] and_ln116_reg_1096_pp0_iter3_reg;
reg   [0:0] tmp_2_reg_1100_pp0_iter3_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op86_readreq_state3;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_predicate_op97_read_state9;
reg    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln109_fu_398_p2;
reg   [0:0] icmp_ln109_reg_1080_pp0_iter1_reg;
reg   [0:0] icmp_ln109_reg_1080_pp0_iter2_reg;
wire   [1:0] trunc_ln112_fu_418_p1;
reg   [1:0] trunc_ln112_reg_1084;
reg   [1:0] trunc_ln112_reg_1084_pp0_iter1_reg;
reg   [1:0] trunc_ln112_reg_1084_pp0_iter2_reg;
reg   [1:0] trunc_ln112_reg_1084_pp0_iter3_reg;
reg   [1:0] trunc_ln112_reg_1084_pp0_iter4_reg;
wire   [6:0] add_ln113_fu_458_p2;
reg   [6:0] add_ln113_reg_1091;
wire   [0:0] and_ln116_fu_496_p2;
reg   [0:0] and_ln116_reg_1096_pp0_iter1_reg;
reg   [0:0] and_ln116_reg_1096_pp0_iter2_reg;
wire   [0:0] tmp_2_fu_502_p3;
reg   [0:0] tmp_2_reg_1100_pp0_iter1_reg;
reg   [0:0] tmp_2_reg_1100_pp0_iter2_reg;
reg   [63:0] gmem_addr_reg_1104;
reg   [63:0] gmem_addr_1_reg_1110;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] a_vec_3_10_reg_1116;
wire   [0:0] icmp_ln117_fu_585_p2;
reg   [0:0] icmp_ln117_reg_1124;
wire   [0:0] icmp_ln117_1_fu_590_p2;
reg   [0:0] icmp_ln117_1_reg_1130;
wire   [0:0] icmp_ln117_2_fu_595_p2;
reg   [0:0] icmp_ln117_2_reg_1135;
wire   [0:0] or_ln121_fu_601_p2;
reg   [0:0] or_ln121_reg_1141;
reg   [31:0] gmem_addr_1_read_reg_1147;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_b_vec_3_10_phi_fu_308_p4;
reg   [31:0] ap_phi_reg_pp0_iter5_b_vec_3_10_reg_304;
wire   [31:0] ap_phi_reg_pp0_iter0_b_vec_3_10_reg_304;
reg   [31:0] ap_phi_reg_pp0_iter1_b_vec_3_10_reg_304;
reg   [31:0] ap_phi_reg_pp0_iter2_b_vec_3_10_reg_304;
reg   [31:0] ap_phi_reg_pp0_iter3_b_vec_3_10_reg_304;
reg   [31:0] ap_phi_reg_pp0_iter4_b_vec_3_10_reg_304;
wire  signed [63:0] sext_ln117_fu_536_p1;
wire  signed [63:0] sext_ln118_fu_575_p1;
reg   [2:0] j_fu_122;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
wire   [2:0] add_ln109_fu_404_p2;
reg   [31:0] a_vec_3_2_fu_126;
wire   [31:0] grp_fu_339_p3;
wire   [31:0] a_vec_3_9_fu_796_p3;
reg   [31:0] a_vec_3_3_fu_130;
wire   [31:0] select_ln121_12_fu_703_p3;
wire   [31:0] a_vec_3_8_fu_788_p3;
wire   [31:0] select_ln117_7_fu_863_p3;
reg   [31:0] a_vec_3_4_fu_134;
wire   [31:0] select_ln121_10_fu_687_p3;
wire   [31:0] a_vec_3_6_fu_773_p3;
wire   [31:0] select_ln117_5_fu_847_p3;
reg   [31:0] a_vec_3_1_fu_138;
wire   [31:0] select_ln121_8_fu_671_p3;
wire   [31:0] a_vec_3_fu_758_p3;
wire   [31:0] select_ln117_3_fu_831_p3;
reg   [31:0] b_vec_3_2_fu_142;
wire   [31:0] b_vec_3_9_fu_933_p3;
wire   [31:0] select_ln121_6_fu_655_p3;
reg   [31:0] b_vec_3_3_fu_146;
wire   [31:0] b_vec_3_8_fu_926_p3;
wire   [31:0] select_ln121_5_fu_647_p3;
reg   [31:0] b_vec_3_4_fu_150;
wire   [31:0] b_vec_3_6_fu_912_p3;
wire   [31:0] select_ln121_3_fu_631_p3;
reg   [31:0] b_vec_3_1_fu_154;
wire   [31:0] b_vec_3_fu_898_p3;
wire   [31:0] select_ln121_1_fu_615_p3;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] shl_ln_fu_422_p3;
wire   [4:0] zext_ln107_cast_fu_346_p1;
wire   [4:0] j_cast200_fu_414_p1;
wire  signed [4:0] sub_ln112_fu_434_p2;
wire   [5:0] zext_ln112_fu_430_p1;
wire  signed [5:0] sext_ln112_fu_440_p1;
wire   [6:0] shl_ln1_fu_450_p3;
wire   [6:0] j_cast202_fu_410_p1;
wire   [5:0] add_ln112_fu_444_p2;
wire   [1:0] tmp_fu_464_p4;
wire   [2:0] tmp_1_fu_480_p4;
wire   [0:0] icmp_ln116_fu_474_p2;
wire   [0:0] icmp_ln116_1_fu_490_p2;
wire   [5:0] shl_ln117_fu_510_p2;
wire   [63:0] zext_ln117_fu_516_p1;
wire   [63:0] add_ln117_fu_520_p2;
wire   [61:0] trunc_ln3_fu_526_p4;
wire   [6:0] shl_ln118_fu_551_p2;
wire   [63:0] zext_ln118_fu_556_p1;
wire   [63:0] add_ln118_fu_560_p2;
wire   [61:0] trunc_ln4_fu_565_p4;
wire   [31:0] select_ln121_fu_607_p3;
wire   [31:0] select_ln121_2_fu_623_p3;
wire   [31:0] select_ln121_4_fu_639_p3;
wire   [31:0] select_ln121_7_fu_663_p3;
wire   [31:0] select_ln121_9_fu_679_p3;
wire   [31:0] select_ln121_11_fu_695_p3;
wire   [31:0] select_ln117_fu_751_p3;
wire   [31:0] select_ln117_2_fu_766_p3;
wire   [31:0] a_vec_3_7_fu_781_p3;
wire   [31:0] select_ln117_1_fu_823_p3;
wire   [31:0] select_ln117_4_fu_839_p3;
wire   [31:0] select_ln117_6_fu_855_p3;
wire   [31:0] select_ln118_fu_891_p3;
wire   [31:0] select_ln118_2_fu_905_p3;
wire   [31:0] b_vec_3_7_fu_919_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_375;
reg    ap_condition_373;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_1_fu_138 <= a_vec_3_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd1) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_1_fu_138 <= select_ln117_3_fu_831_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_1_fu_138 <= a_vec_3_fu_758_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_1_fu_138 <= select_ln121_8_fu_671_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_2_fu_126 <= a_vec_0_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_2_fu_126 <= a_vec_3_9_fu_796_p3;
    end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd1) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg)))) begin
        a_vec_3_2_fu_126 <= grp_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_3_fu_130 <= a_vec_1_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd1) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_3_fu_130 <= select_ln117_7_fu_863_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_3_fu_130 <= a_vec_3_8_fu_788_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_3_fu_130 <= select_ln121_12_fu_703_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_4_fu_134 <= a_vec_2_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd1) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_4_fu_134 <= select_ln117_5_fu_847_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_4_fu_134 <= a_vec_3_6_fu_773_p3;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        a_vec_3_4_fu_134 <= select_ln121_10_fu_687_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_373)) begin
        if ((1'b1 == ap_condition_375)) begin
            ap_phi_reg_pp0_iter5_b_vec_3_10_reg_304 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_b_vec_3_10_reg_304 <= ap_phi_reg_pp0_iter4_b_vec_3_10_reg_304;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_1_fu_154 <= b_vec_3_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_1_fu_154 <= select_ln121_1_fu_615_p3;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_1_fu_154 <= b_vec_3_fu_898_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_2_fu_142 <= b_vec_0_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_2_fu_142 <= select_ln121_6_fu_655_p3;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_2_fu_142 <= b_vec_3_9_fu_933_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_3_fu_146 <= b_vec_1_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_3_fu_146 <= select_ln121_5_fu_647_p3;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_3_fu_146 <= b_vec_3_8_fu_926_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_4_fu_150 <= b_vec_2_0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd0 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_4_fu_150 <= select_ln121_3_fu_631_p3;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        b_vec_3_4_fu_150 <= b_vec_3_6_fu_912_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln109_fu_398_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_122 <= add_ln109_fu_404_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_122 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op97_read_state9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_10_reg_1116 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln113_reg_1091 <= add_ln113_fu_458_p2;
        and_ln116_reg_1096 <= and_ln116_fu_496_p2;
        trunc_ln112_reg_1084 <= trunc_ln112_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln116_reg_1096_pp0_iter1_reg <= and_ln116_reg_1096;
        and_ln116_reg_1096_pp0_iter2_reg <= and_ln116_reg_1096_pp0_iter1_reg;
        and_ln116_reg_1096_pp0_iter3_reg <= and_ln116_reg_1096_pp0_iter2_reg;
        and_ln116_reg_1096_pp0_iter4_reg <= and_ln116_reg_1096_pp0_iter3_reg;
        icmp_ln109_reg_1080 <= icmp_ln109_fu_398_p2;
        icmp_ln109_reg_1080_pp0_iter1_reg <= icmp_ln109_reg_1080;
        icmp_ln109_reg_1080_pp0_iter2_reg <= icmp_ln109_reg_1080_pp0_iter1_reg;
        icmp_ln109_reg_1080_pp0_iter3_reg <= icmp_ln109_reg_1080_pp0_iter2_reg;
        icmp_ln109_reg_1080_pp0_iter4_reg <= icmp_ln109_reg_1080_pp0_iter3_reg;
        tmp_2_reg_1100_pp0_iter1_reg <= tmp_2_reg_1100;
        tmp_2_reg_1100_pp0_iter2_reg <= tmp_2_reg_1100_pp0_iter1_reg;
        tmp_2_reg_1100_pp0_iter3_reg <= tmp_2_reg_1100_pp0_iter2_reg;
        tmp_2_reg_1100_pp0_iter4_reg <= tmp_2_reg_1100_pp0_iter3_reg;
        trunc_ln112_reg_1084_pp0_iter1_reg <= trunc_ln112_reg_1084;
        trunc_ln112_reg_1084_pp0_iter2_reg <= trunc_ln112_reg_1084_pp0_iter1_reg;
        trunc_ln112_reg_1084_pp0_iter3_reg <= trunc_ln112_reg_1084_pp0_iter2_reg;
        trunc_ln112_reg_1084_pp0_iter4_reg <= trunc_ln112_reg_1084_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_b_vec_3_10_reg_304 <= ap_phi_reg_pp0_iter0_b_vec_3_10_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter2_b_vec_3_10_reg_304 <= ap_phi_reg_pp0_iter1_b_vec_3_10_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter3_b_vec_3_10_reg_304 <= ap_phi_reg_pp0_iter2_b_vec_3_10_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter4_b_vec_3_10_reg_304 <= ap_phi_reg_pp0_iter3_b_vec_3_10_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op146_read_state10 == 1'b1))) begin
        gmem_addr_1_read_reg_1147 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_2_reg_1100 == 1'd0) & (1'd1 == and_ln116_reg_1096) & (icmp_ln109_reg_1080 == 1'd0))) begin
        gmem_addr_1_reg_1110 <= sext_ln118_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_502_p3 == 1'd0) & (icmp_ln109_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_fu_496_p2))) begin
        gmem_addr_reg_1104 <= sext_ln117_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0))) begin
        icmp_ln117_1_reg_1130 <= icmp_ln117_1_fu_590_p2;
        icmp_ln117_2_reg_1135 <= icmp_ln117_2_fu_595_p2;
        icmp_ln117_reg_1124 <= icmp_ln117_fu_585_p2;
        or_ln121_reg_1141 <= or_ln121_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln116_fu_496_p2))) begin
        tmp_2_reg_1100 <= sub_ln112_fu_434_p2[32'd4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_2_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_3_out_ap_vld = 1'b1;
    end else begin
        a_vec_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_vec_3_8_out_ap_vld = 1'b1;
    end else begin
        a_vec_3_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln109_reg_1080 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg))) begin
        ap_phi_mux_b_vec_3_10_phi_fu_308_p4 = gmem_addr_1_read_reg_1147;
    end else begin
        ap_phi_mux_b_vec_3_10_phi_fu_308_p4 = ap_phi_reg_pp0_iter5_b_vec_3_10_reg_304;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_122;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_2_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_3_out_ap_vld = 1'b1;
    end else begin
        b_vec_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_vec_3_7_out_ap_vld = 1'b1;
    end else begin
        b_vec_3_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_2_reg_1100 == 1'd0) & (1'd1 == and_ln116_reg_1096) & (icmp_ln109_reg_1080 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op78_readreq_state2 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op146_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1100_pp0_iter3_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln116_reg_1096_pp0_iter3_reg)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op86_readreq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_1110;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op78_readreq_state2 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1104;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op86_readreq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op78_readreq_state2 == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op146_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_read_state9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_vec_2_1_out = a_vec_3_4_fu_134;

assign a_vec_3_1_out = a_vec_3_1_fu_138;

assign a_vec_3_3_out = a_vec_3_3_fu_130;

assign a_vec_3_6_fu_773_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_4_fu_134 : select_ln117_2_fu_766_p3);

assign a_vec_3_7_fu_781_p3 = ((icmp_ln117_1_fu_590_p2[0:0] == 1'b1) ? a_vec_3_10_reg_1116 : a_vec_3_3_fu_130);

assign a_vec_3_8_fu_788_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? a_vec_3_3_fu_130 : a_vec_3_7_fu_781_p3);

assign a_vec_3_8_out = a_vec_3_2_fu_126;

assign a_vec_3_9_fu_796_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? a_vec_3_10_reg_1116 : a_vec_3_2_fu_126);

assign a_vec_3_fu_758_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : select_ln117_fu_751_p3);

assign add_ln109_fu_404_p2 = (ap_sig_allocacmp_j_1 + 3'd1);

assign add_ln112_fu_444_p2 = ($signed(zext_ln112_fu_430_p1) + $signed(sext_ln112_fu_440_p1));

assign add_ln113_fu_458_p2 = (shl_ln1_fu_450_p3 + j_cast202_fu_410_p1);

assign add_ln117_fu_520_p2 = (zext_ln117_fu_516_p1 + din_a);

assign add_ln118_fu_560_p2 = (zext_ln118_fu_556_p1 + din_b);

assign and_ln116_fu_496_p2 = (icmp_ln116_fu_474_p2 & icmp_ln116_1_fu_490_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_read_state9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_read_state9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op97_read_state9 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op146_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op146_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_gmem_RVALID == 1'b0) & (ap_predicate_op146_read_state10 == 1'b1));
end

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_ARREADY == 1'b0) & (ap_predicate_op78_readreq_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_ARREADY == 1'b0) & (ap_predicate_op86_readreq_state3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = ((m_axi_gmem_RVALID == 1'b0) & (ap_predicate_op97_read_state9 == 1'b1));
end

always @ (*) begin
    ap_condition_373 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_375 = ((tmp_2_reg_1100_pp0_iter4_reg == 1'd1) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_b_vec_3_10_reg_304 = 'bx;

always @ (*) begin
    ap_predicate_op146_read_state10 = ((tmp_2_reg_1100_pp0_iter4_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter4_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter4_reg));
end

always @ (*) begin
    ap_predicate_op78_readreq_state2 = ((tmp_2_reg_1100 == 1'd0) & (1'd1 == and_ln116_reg_1096) & (icmp_ln109_reg_1080 == 1'd0));
end

always @ (*) begin
    ap_predicate_op86_readreq_state3 = ((tmp_2_reg_1100 == 1'd0) & (1'd1 == and_ln116_reg_1096) & (icmp_ln109_reg_1080 == 1'd0));
end

always @ (*) begin
    ap_predicate_op97_read_state9 = ((tmp_2_reg_1100_pp0_iter3_reg == 1'd0) & (icmp_ln109_reg_1080_pp0_iter3_reg == 1'd0) & (1'd1 == and_ln116_reg_1096_pp0_iter3_reg));
end

assign b_vec_2_1_out = b_vec_3_4_fu_150;

assign b_vec_3_1_out = b_vec_3_1_fu_154;

assign b_vec_3_3_out = b_vec_3_3_fu_146;

assign b_vec_3_6_fu_912_p3 = ((or_ln121_reg_1141[0:0] == 1'b1) ? b_vec_3_4_fu_150 : select_ln118_2_fu_905_p3);

assign b_vec_3_7_fu_919_p3 = ((icmp_ln117_1_reg_1130[0:0] == 1'b1) ? ap_phi_mux_b_vec_3_10_phi_fu_308_p4 : b_vec_3_3_fu_146);

assign b_vec_3_7_out = b_vec_3_2_fu_142;

assign b_vec_3_8_fu_926_p3 = ((icmp_ln117_2_reg_1135[0:0] == 1'b1) ? b_vec_3_3_fu_146 : b_vec_3_7_fu_919_p3);

assign b_vec_3_9_fu_933_p3 = ((icmp_ln117_2_reg_1135[0:0] == 1'b1) ? ap_phi_mux_b_vec_3_10_phi_fu_308_p4 : b_vec_3_2_fu_142);

assign b_vec_3_fu_898_p3 = ((or_ln121_reg_1141[0:0] == 1'b1) ? b_vec_3_1_fu_154 : select_ln118_fu_891_p3);

assign grp_fu_339_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? 32'd0 : a_vec_3_2_fu_126);

assign icmp_ln109_fu_398_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln116_1_fu_490_p2 = (($signed(tmp_1_fu_480_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_474_p2 = ((tmp_fu_464_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln117_1_fu_590_p2 = ((trunc_ln112_reg_1084_pp0_iter4_reg == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln117_2_fu_595_p2 = ((trunc_ln112_reg_1084_pp0_iter4_reg == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_585_p2 = ((trunc_ln112_reg_1084_pp0_iter4_reg == 2'd2) ? 1'b1 : 1'b0);

assign j_cast200_fu_414_p1 = ap_sig_allocacmp_j_1;

assign j_cast202_fu_410_p1 = ap_sig_allocacmp_j_1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln121_fu_601_p2 = (icmp_ln117_2_fu_595_p2 | icmp_ln117_1_fu_590_p2);

assign select_ln117_1_fu_823_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : 32'd0);

assign select_ln117_2_fu_766_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? a_vec_3_10_reg_1116 : a_vec_3_4_fu_134);

assign select_ln117_3_fu_831_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : select_ln117_1_fu_823_p3);

assign select_ln117_4_fu_839_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? 32'd0 : a_vec_3_4_fu_134);

assign select_ln117_5_fu_847_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_4_fu_134 : select_ln117_4_fu_839_p3);

assign select_ln117_6_fu_855_p3 = ((icmp_ln117_1_fu_590_p2[0:0] == 1'b1) ? 32'd0 : a_vec_3_3_fu_130);

assign select_ln117_7_fu_863_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? a_vec_3_3_fu_130 : select_ln117_6_fu_855_p3);

assign select_ln117_fu_751_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : a_vec_3_10_reg_1116);

assign select_ln118_2_fu_905_p3 = ((icmp_ln117_reg_1124[0:0] == 1'b1) ? ap_phi_mux_b_vec_3_10_phi_fu_308_p4 : b_vec_3_4_fu_150);

assign select_ln118_fu_891_p3 = ((icmp_ln117_reg_1124[0:0] == 1'b1) ? b_vec_3_1_fu_154 : ap_phi_mux_b_vec_3_10_phi_fu_308_p4);

assign select_ln121_10_fu_687_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_4_fu_134 : select_ln121_9_fu_679_p3);

assign select_ln121_11_fu_695_p3 = ((icmp_ln117_1_fu_590_p2[0:0] == 1'b1) ? 32'd0 : a_vec_3_3_fu_130);

assign select_ln121_12_fu_703_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? a_vec_3_3_fu_130 : select_ln121_11_fu_695_p3);

assign select_ln121_1_fu_615_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? b_vec_3_1_fu_154 : select_ln121_fu_607_p3);

assign select_ln121_2_fu_623_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? 32'd0 : b_vec_3_4_fu_150);

assign select_ln121_3_fu_631_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? b_vec_3_4_fu_150 : select_ln121_2_fu_623_p3);

assign select_ln121_4_fu_639_p3 = ((icmp_ln117_1_fu_590_p2[0:0] == 1'b1) ? 32'd0 : b_vec_3_3_fu_146);

assign select_ln121_5_fu_647_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? b_vec_3_3_fu_146 : select_ln121_4_fu_639_p3);

assign select_ln121_6_fu_655_p3 = ((icmp_ln117_2_fu_595_p2[0:0] == 1'b1) ? 32'd0 : b_vec_3_2_fu_142);

assign select_ln121_7_fu_663_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : 32'd0);

assign select_ln121_8_fu_671_p3 = ((or_ln121_fu_601_p2[0:0] == 1'b1) ? a_vec_3_1_fu_138 : select_ln121_7_fu_663_p3);

assign select_ln121_9_fu_679_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? 32'd0 : a_vec_3_4_fu_134);

assign select_ln121_fu_607_p3 = ((icmp_ln117_fu_585_p2[0:0] == 1'b1) ? b_vec_3_1_fu_154 : 32'd0);

assign sext_ln112_fu_440_p1 = sub_ln112_fu_434_p2;

assign sext_ln117_fu_536_p1 = $signed(trunc_ln3_fu_526_p4);

assign sext_ln118_fu_575_p1 = $signed(trunc_ln4_fu_565_p4);

assign shl_ln117_fu_510_p2 = add_ln112_fu_444_p2 << 6'd2;

assign shl_ln118_fu_551_p2 = add_ln113_reg_1091 << 7'd2;

assign shl_ln1_fu_450_p3 = {{sub_ln112_fu_434_p2}, {2'd0}};

assign shl_ln_fu_422_p3 = {{trunc_ln112_fu_418_p1}, {2'd0}};

assign sub_ln112_fu_434_p2 = (zext_ln107_cast_fu_346_p1 - j_cast200_fu_414_p1);

assign tmp_1_fu_480_p4 = {{add_ln113_fu_458_p2[6:4]}};

assign tmp_2_fu_502_p3 = sub_ln112_fu_434_p2[32'd4];

assign tmp_fu_464_p4 = {{add_ln112_fu_444_p2[5:4]}};

assign trunc_ln112_fu_418_p1 = ap_sig_allocacmp_j_1[1:0];

assign trunc_ln3_fu_526_p4 = {{add_ln117_fu_520_p2[63:2]}};

assign trunc_ln4_fu_565_p4 = {{add_ln118_fu_560_p2[63:2]}};

assign zext_ln107_cast_fu_346_p1 = zext_ln107;

assign zext_ln112_fu_430_p1 = shl_ln_fu_422_p3;

assign zext_ln117_fu_516_p1 = shl_ln117_fu_510_p2;

assign zext_ln118_fu_556_p1 = shl_ln118_fu_551_p2;

endmodule //systolic_array_systolic_array_Pipeline_top_inner_loop1
