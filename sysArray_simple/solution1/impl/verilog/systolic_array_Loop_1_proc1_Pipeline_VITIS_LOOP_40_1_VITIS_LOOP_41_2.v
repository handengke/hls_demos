// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_Loop_1_proc1_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pe_array_pe_val_address0,
        pe_array_pe_val_ce0,
        pe_array_pe_val_we0,
        pe_array_pe_val_d0,
        pe_array_pe_a_pass_address0,
        pe_array_pe_a_pass_ce0,
        pe_array_pe_a_pass_we0,
        pe_array_pe_a_pass_d0,
        pe_array_pe_a_tmp_address0,
        pe_array_pe_a_tmp_ce0,
        pe_array_pe_a_tmp_we0,
        pe_array_pe_a_tmp_d0,
        pe_array_pe_b_pass_address0,
        pe_array_pe_b_pass_ce0,
        pe_array_pe_b_pass_we0,
        pe_array_pe_b_pass_d0,
        pe_array_pe_b_tmp_address0,
        pe_array_pe_b_tmp_ce0,
        pe_array_pe_b_tmp_we0,
        pe_array_pe_b_tmp_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] pe_array_pe_val_address0;
output   pe_array_pe_val_ce0;
output   pe_array_pe_val_we0;
output  [31:0] pe_array_pe_val_d0;
output  [3:0] pe_array_pe_a_pass_address0;
output   pe_array_pe_a_pass_ce0;
output   pe_array_pe_a_pass_we0;
output  [31:0] pe_array_pe_a_pass_d0;
output  [3:0] pe_array_pe_a_tmp_address0;
output   pe_array_pe_a_tmp_ce0;
output   pe_array_pe_a_tmp_we0;
output  [31:0] pe_array_pe_a_tmp_d0;
output  [3:0] pe_array_pe_b_pass_address0;
output   pe_array_pe_b_pass_ce0;
output   pe_array_pe_b_pass_we0;
output  [31:0] pe_array_pe_b_pass_d0;
output  [3:0] pe_array_pe_b_tmp_address0;
output   pe_array_pe_b_tmp_ce0;
output   pe_array_pe_b_tmp_we0;
output  [31:0] pe_array_pe_b_tmp_d0;

reg ap_idle;
reg pe_array_pe_val_ce0;
reg pe_array_pe_val_we0;
reg pe_array_pe_a_pass_ce0;
reg pe_array_pe_a_pass_we0;
reg pe_array_pe_a_tmp_ce0;
reg pe_array_pe_a_tmp_we0;
reg pe_array_pe_b_pass_ce0;
reg pe_array_pe_b_pass_we0;
reg pe_array_pe_b_tmp_ce0;
reg pe_array_pe_b_tmp_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln40_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln42_1_fu_216_p1;
reg   [2:0] c_fu_48;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_c_load;
wire   [2:0] add_ln41_fu_225_p2;
reg   [2:0] r_fu_52;
reg   [2:0] ap_sig_allocacmp_r_load;
wire   [2:0] select_ln40_1_fu_186_p3;
reg   [4:0] indvar_flatten_fu_56;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln40_1_fu_154_p2;
wire   [0:0] icmp_ln41_fu_172_p2;
wire   [2:0] add_ln40_fu_166_p2;
wire   [1:0] trunc_ln42_fu_194_p1;
wire   [2:0] select_ln40_fu_178_p3;
wire   [3:0] tmp_7_cast_fu_198_p3;
wire   [3:0] zext_ln42_fu_206_p1;
wire   [3:0] add_ln42_fu_210_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln40_fu_148_p2 == 1'd0)) begin
            c_fu_48 <= add_ln41_fu_225_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_48 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln40_fu_148_p2 == 1'd0)) begin
            indvar_flatten_fu_56 <= add_ln40_1_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln40_fu_148_p2 == 1'd0)) begin
            r_fu_52 <= select_ln40_1_fu_186_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_52 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_c_load = 3'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_r_load = 3'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_52;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_a_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_a_pass_we0 = 1'b1;
    end else begin
        pe_array_pe_a_pass_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_a_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_a_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_b_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_b_pass_we0 = 1'b1;
    end else begin
        pe_array_pe_b_pass_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_b_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_b_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_val_ce0 = 1'b1;
    end else begin
        pe_array_pe_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        pe_array_pe_val_we0 = 1'b1;
    end else begin
        pe_array_pe_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_154_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln40_fu_166_p2 = (ap_sig_allocacmp_r_load + 3'd1);

assign add_ln41_fu_225_p2 = (select_ln40_fu_178_p3 + 3'd1);

assign add_ln42_fu_210_p2 = (tmp_7_cast_fu_198_p3 + zext_ln42_fu_206_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln40_fu_148_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_172_p2 = ((ap_sig_allocacmp_c_load == 3'd4) ? 1'b1 : 1'b0);

assign pe_array_pe_a_pass_address0 = zext_ln42_1_fu_216_p1;

assign pe_array_pe_a_pass_d0 = 32'd0;

assign pe_array_pe_a_tmp_address0 = zext_ln42_1_fu_216_p1;

assign pe_array_pe_a_tmp_d0 = 32'd0;

assign pe_array_pe_b_pass_address0 = zext_ln42_1_fu_216_p1;

assign pe_array_pe_b_pass_d0 = 32'd0;

assign pe_array_pe_b_tmp_address0 = zext_ln42_1_fu_216_p1;

assign pe_array_pe_b_tmp_d0 = 32'd0;

assign pe_array_pe_val_address0 = zext_ln42_1_fu_216_p1;

assign pe_array_pe_val_d0 = 32'd0;

assign select_ln40_1_fu_186_p3 = ((icmp_ln41_fu_172_p2[0:0] == 1'b1) ? add_ln40_fu_166_p2 : ap_sig_allocacmp_r_load);

assign select_ln40_fu_178_p3 = ((icmp_ln41_fu_172_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_c_load);

assign tmp_7_cast_fu_198_p3 = {{trunc_ln42_fu_194_p1}, {2'd0}};

assign trunc_ln42_fu_194_p1 = select_ln40_1_fu_186_p3[1:0];

assign zext_ln42_1_fu_216_p1 = add_ln42_fu_210_p2;

assign zext_ln42_fu_206_p1 = select_ln40_fu_178_p3;

endmodule //systolic_array_Loop_1_proc1_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_41_2
