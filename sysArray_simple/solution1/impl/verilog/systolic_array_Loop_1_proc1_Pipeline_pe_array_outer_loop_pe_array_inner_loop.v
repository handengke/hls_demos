// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_Loop_1_proc1_Pipeline_pe_array_outer_loop_pe_array_inner_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_vec_address0,
        a_vec_ce0,
        a_vec_q0,
        pe_array_pe_b_pass_address0,
        pe_array_pe_b_pass_ce0,
        pe_array_pe_b_pass_q0,
        pe_array_pe_b_pass_address1,
        pe_array_pe_b_pass_ce1,
        pe_array_pe_b_pass_q1,
        pe_array_pe_val_address0,
        pe_array_pe_val_ce0,
        pe_array_pe_val_we0,
        pe_array_pe_val_d0,
        pe_array_pe_val_address1,
        pe_array_pe_val_ce1,
        pe_array_pe_val_q1,
        pe_array_pe_a_tmp_address0,
        pe_array_pe_a_tmp_ce0,
        pe_array_pe_a_tmp_we0,
        pe_array_pe_a_tmp_d0,
        pe_array_pe_b_tmp_address0,
        pe_array_pe_b_tmp_ce0,
        pe_array_pe_b_tmp_we0,
        pe_array_pe_b_tmp_d0,
        b_vec_address0,
        b_vec_ce0,
        b_vec_q0,
        pe_array_pe_a_pass_address0,
        pe_array_pe_a_pass_ce0,
        pe_array_pe_a_pass_q0,
        a_vec_load,
        b_vec_load
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_vec_address0;
output   a_vec_ce0;
input  [31:0] a_vec_q0;
output  [3:0] pe_array_pe_b_pass_address0;
output   pe_array_pe_b_pass_ce0;
input  [31:0] pe_array_pe_b_pass_q0;
output  [3:0] pe_array_pe_b_pass_address1;
output   pe_array_pe_b_pass_ce1;
input  [31:0] pe_array_pe_b_pass_q1;
output  [3:0] pe_array_pe_val_address0;
output   pe_array_pe_val_ce0;
output   pe_array_pe_val_we0;
output  [31:0] pe_array_pe_val_d0;
output  [3:0] pe_array_pe_val_address1;
output   pe_array_pe_val_ce1;
input  [31:0] pe_array_pe_val_q1;
output  [3:0] pe_array_pe_a_tmp_address0;
output   pe_array_pe_a_tmp_ce0;
output   pe_array_pe_a_tmp_we0;
output  [31:0] pe_array_pe_a_tmp_d0;
output  [3:0] pe_array_pe_b_tmp_address0;
output   pe_array_pe_b_tmp_ce0;
output   pe_array_pe_b_tmp_we0;
output  [31:0] pe_array_pe_b_tmp_d0;
output  [1:0] b_vec_address0;
output   b_vec_ce0;
input  [31:0] b_vec_q0;
output  [3:0] pe_array_pe_a_pass_address0;
output   pe_array_pe_a_pass_ce0;
input  [31:0] pe_array_pe_a_pass_q0;
input  [31:0] a_vec_load;
input  [31:0] b_vec_load;

reg ap_idle;
reg a_vec_ce0;
reg pe_array_pe_b_pass_ce0;
reg pe_array_pe_b_pass_ce1;
reg pe_array_pe_val_ce0;
reg pe_array_pe_val_we0;
reg pe_array_pe_val_ce1;
reg pe_array_pe_a_tmp_ce0;
reg pe_array_pe_a_tmp_we0;
reg pe_array_pe_b_tmp_ce0;
reg pe_array_pe_b_tmp_we0;
reg b_vec_ce0;
reg pe_array_pe_a_pass_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln51_fu_238_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln74_1_fu_382_p1;
reg   [63:0] zext_ln74_1_reg_600;
reg   [3:0] this_val_reg_606;
wire   [0:0] icmp_ln57_1_fu_414_p2;
reg   [0:0] icmp_ln57_1_reg_617;
wire   [0:0] sel_tmp1_fu_450_p2;
reg   [0:0] sel_tmp1_reg_628;
wire   [0:0] and_ln57_fu_481_p2;
reg   [0:0] and_ln57_reg_638;
wire   [63:0] zext_ln51_fu_349_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln51_1_fu_362_p1;
wire   [63:0] zext_ln71_fu_393_p1;
wire   [63:0] zext_ln53_fu_367_p1;
wire   [63:0] zext_ln62_fu_464_p1;
reg   [2:0] j_1_fu_62;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1_load;
wire   [2:0] add_ln53_fu_487_p2;
reg   [2:0] i_1_fu_66;
reg   [2:0] ap_sig_allocacmp_i;
wire   [2:0] select_ln51_2_fu_285_p3;
reg   [4:0] indvar_flatten9_fu_70;
reg   [4:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [4:0] add_ln51_1_fu_244_p2;
wire  signed [31:0] opa_4_fu_514_p3;
wire  signed [31:0] opb_5_fu_535_p3;
wire   [1:0] trunc_ln51_fu_214_p1;
wire   [1:0] empty_fu_224_p2;
wire   [0:0] icmp_ln53_fu_259_p2;
wire   [2:0] add_ln51_fu_253_p2;
wire   [1:0] trunc_ln51_1_fu_273_p1;
wire   [1:0] trunc_ln74_fu_293_p1;
wire   [0:0] cmp3_i_mid1_fu_305_p2;
wire   [0:0] cmp3_i_fu_218_p2;
wire   [1:0] p_mid1_fu_319_p2;
wire   [1:0] select_ln51_4_fu_333_p3;
wire   [3:0] tmp_s_fu_325_p3;
wire   [3:0] tmp_9_fu_230_p3;
wire   [3:0] select_ln51_5_fu_354_p3;
wire   [2:0] select_ln51_fu_265_p3;
wire   [3:0] tmp_10_cast_fu_297_p3;
wire   [3:0] zext_ln74_fu_372_p1;
wire   [3:0] add_ln74_fu_376_p2;
wire   [3:0] tmp_12_cast_fu_341_p3;
wire   [3:0] add_ln71_fu_387_p2;
wire   [1:0] trunc_ln53_fu_398_p1;
wire   [1:0] select_ln51_1_fu_277_p3;
wire   [1:0] or_ln57_fu_408_p2;
wire   [2:0] add_ln62_fu_420_p2;
wire   [1:0] add_ln70_fu_430_p2;
wire   [0:0] select_ln51_3_fu_311_p3;
wire   [0:0] xor_ln57_fu_444_p2;
wire  signed [3:0] sext_ln63_fu_426_p1;
wire   [3:0] tmp_13_cast_fu_436_p3;
wire   [3:0] opa_3_fu_456_p3;
wire   [0:0] sel_tmp6_demorgan_fu_469_p2;
wire   [0:0] icmp_ln57_fu_402_p2;
wire   [0:0] sel_tmp6_fu_475_p2;
wire   [31:0] opa_1_fu_508_p3;
wire   [31:0] opb_2_fu_522_p3;
wire   [31:0] opb_3_fu_529_p3;
wire   [31:0] mul_ln21_fu_543_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

systolic_array_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U18(
    .din0(opb_5_fu_535_p3),
    .din1(opa_4_fu_514_p3),
    .dout(mul_ln21_fu_543_p2)
);

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_66 <= select_ln51_2_fu_285_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_66 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_70 <= add_ln51_1_fu_244_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_238_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_1_fu_62 <= add_ln53_fu_487_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_238_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln57_reg_638 <= and_ln57_fu_481_p2;
        icmp_ln57_1_reg_617 <= icmp_ln57_1_fu_414_p2;
        sel_tmp1_reg_628 <= sel_tmp1_fu_450_p2;
        this_val_reg_606 <= zext_ln74_1_fu_382_p1;
        zext_ln74_1_reg_600[3 : 0] <= zext_ln74_1_fu_382_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_vec_ce0 = 1'b1;
    end else begin
        a_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_238_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_vec_ce0 = 1'b1;
    end else begin
        b_vec_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_pass_ce1 = 1'b1;
    end else begin
        pe_array_pe_b_pass_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_ce0 = 1'b1;
    end else begin
        pe_array_pe_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_ce1 = 1'b1;
    end else begin
        pe_array_pe_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_we0 = 1'b1;
    end else begin
        pe_array_pe_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_vec_address0 = zext_ln51_fu_349_p1;

assign add_ln51_1_fu_244_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 5'd1);

assign add_ln51_fu_253_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln53_fu_487_p2 = (select_ln51_fu_265_p3 + 3'd1);

assign add_ln62_fu_420_p2 = ($signed(select_ln51_fu_265_p3) + $signed(3'd7));

assign add_ln70_fu_430_p2 = ($signed(trunc_ln53_fu_398_p1) + $signed(2'd3));

assign add_ln71_fu_387_p2 = (tmp_12_cast_fu_341_p3 + zext_ln74_fu_372_p1);

assign add_ln74_fu_376_p2 = (tmp_10_cast_fu_297_p3 + zext_ln74_fu_372_p1);

assign and_ln57_fu_481_p2 = (sel_tmp6_fu_475_p2 & icmp_ln57_fu_402_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_vec_address0 = zext_ln53_fu_367_p1;

assign cmp3_i_fu_218_p2 = ((ap_sig_allocacmp_i == 3'd0) ? 1'b1 : 1'b0);

assign cmp3_i_mid1_fu_305_p2 = ((add_ln51_fu_253_p2 == 3'd0) ? 1'b1 : 1'b0);

assign empty_fu_224_p2 = ($signed(trunc_ln51_fu_214_p1) + $signed(2'd3));

assign icmp_ln51_fu_238_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_259_p2 = ((ap_sig_allocacmp_j_1_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_414_p2 = ((or_ln57_fu_408_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_402_p2 = ((select_ln51_fu_265_p3 == 3'd0) ? 1'b1 : 1'b0);

assign opa_1_fu_508_p3 = ((icmp_ln57_1_reg_617[0:0] == 1'b1) ? a_vec_load : pe_array_pe_a_pass_q0);

assign opa_3_fu_456_p3 = ((sel_tmp1_fu_450_p2[0:0] == 1'b1) ? sext_ln63_fu_426_p1 : tmp_13_cast_fu_436_p3);

assign opa_4_fu_514_p3 = ((and_ln57_reg_638[0:0] == 1'b1) ? a_vec_q0 : opa_1_fu_508_p3);

assign opb_2_fu_522_p3 = ((sel_tmp1_reg_628[0:0] == 1'b1) ? b_vec_q0 : pe_array_pe_b_pass_q0);

assign opb_3_fu_529_p3 = ((icmp_ln57_1_reg_617[0:0] == 1'b1) ? b_vec_load : opb_2_fu_522_p3);

assign opb_5_fu_535_p3 = ((and_ln57_reg_638[0:0] == 1'b1) ? pe_array_pe_b_pass_q1 : opb_3_fu_529_p3);

assign or_ln57_fu_408_p2 = (trunc_ln53_fu_398_p1 | select_ln51_1_fu_277_p3);

assign p_mid1_fu_319_p2 = ($signed(trunc_ln51_1_fu_273_p1) + $signed(2'd3));

assign pe_array_pe_a_pass_address0 = zext_ln62_fu_464_p1;

assign pe_array_pe_a_tmp_address0 = zext_ln74_1_reg_600;

assign pe_array_pe_a_tmp_d0 = opa_4_fu_514_p3;

assign pe_array_pe_b_pass_address0 = zext_ln71_fu_393_p1;

assign pe_array_pe_b_pass_address1 = zext_ln51_1_fu_362_p1;

assign pe_array_pe_b_tmp_address0 = zext_ln74_1_reg_600;

assign pe_array_pe_b_tmp_d0 = opb_5_fu_535_p3;

assign pe_array_pe_val_address0 = this_val_reg_606;

assign pe_array_pe_val_address1 = zext_ln74_1_fu_382_p1;

assign pe_array_pe_val_d0 = (pe_array_pe_val_q1 + mul_ln21_fu_543_p2);

assign sel_tmp1_fu_450_p2 = (xor_ln57_fu_444_p2 & select_ln51_3_fu_311_p3);

assign sel_tmp6_demorgan_fu_469_p2 = (select_ln51_3_fu_311_p3 | icmp_ln57_1_fu_414_p2);

assign sel_tmp6_fu_475_p2 = (sel_tmp6_demorgan_fu_469_p2 ^ 1'd1);

assign select_ln51_1_fu_277_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? trunc_ln51_1_fu_273_p1 : trunc_ln51_fu_214_p1);

assign select_ln51_2_fu_285_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? add_ln51_fu_253_p2 : ap_sig_allocacmp_i);

assign select_ln51_3_fu_311_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? cmp3_i_mid1_fu_305_p2 : cmp3_i_fu_218_p2);

assign select_ln51_4_fu_333_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? p_mid1_fu_319_p2 : empty_fu_224_p2);

assign select_ln51_5_fu_354_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? tmp_s_fu_325_p3 : tmp_9_fu_230_p3);

assign select_ln51_fu_265_p3 = ((icmp_ln53_fu_259_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_1_load);

assign sext_ln63_fu_426_p1 = $signed(add_ln62_fu_420_p2);

assign tmp_10_cast_fu_297_p3 = {{trunc_ln74_fu_293_p1}, {2'd0}};

assign tmp_12_cast_fu_341_p3 = {{select_ln51_4_fu_333_p3}, {2'd0}};

assign tmp_13_cast_fu_436_p3 = {{trunc_ln74_fu_293_p1}, {add_ln70_fu_430_p2}};

assign tmp_9_fu_230_p3 = {{empty_fu_224_p2}, {2'd0}};

assign tmp_s_fu_325_p3 = {{p_mid1_fu_319_p2}, {2'd0}};

assign trunc_ln51_1_fu_273_p1 = add_ln51_fu_253_p2[1:0];

assign trunc_ln51_fu_214_p1 = ap_sig_allocacmp_i[1:0];

assign trunc_ln53_fu_398_p1 = select_ln51_fu_265_p3[1:0];

assign trunc_ln74_fu_293_p1 = select_ln51_2_fu_285_p3[1:0];

assign xor_ln57_fu_444_p2 = (icmp_ln57_1_fu_414_p2 ^ 1'd1);

assign zext_ln51_1_fu_362_p1 = select_ln51_5_fu_354_p3;

assign zext_ln51_fu_349_p1 = select_ln51_2_fu_285_p3;

assign zext_ln53_fu_367_p1 = select_ln51_fu_265_p3;

assign zext_ln62_fu_464_p1 = opa_3_fu_456_p3;

assign zext_ln71_fu_393_p1 = add_ln71_fu_387_p2;

assign zext_ln74_1_fu_382_p1 = add_ln74_fu_376_p2;

assign zext_ln74_fu_372_p1 = select_ln51_fu_265_p3;

always @ (posedge ap_clk) begin
    zext_ln74_1_reg_600[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //systolic_array_Loop_1_proc1_Pipeline_pe_array_outer_loop_pe_array_inner_loop
