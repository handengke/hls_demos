// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_systolic_array_Pipeline_VITIS_LOOP_41_1_VITIS_LOOP_42_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln14_2_reload,
        select_ln14_5_reload,
        select_ln14_8_reload,
        select_ln14_11_reload,
        select_ln14_14_reload,
        select_ln14_17_reload,
        select_ln14_20_reload,
        select_ln14_23_reload,
        select_ln14_25_reload,
        select_ln14_27_reload,
        select_ln14_29_reload,
        select_ln14_31_reload,
        select_ln14_32_reload,
        select_ln14_33_reload,
        select_ln14_34_reload,
        select_ln14_35_reload,
        pe_array_pe_b_pass_2_3_1_reload,
        pe_array_pe_b_pass_2_2_1_reload,
        pe_array_pe_b_pass_2_1_1_reload,
        pe_array_pe_b_pass_2_0_1_reload,
        pe_array_pe_b_pass_1_3_1_reload,
        pe_array_pe_b_pass_1_2_1_reload,
        pe_array_pe_b_pass_1_1_1_reload,
        pe_array_pe_b_pass_1_0_1_reload,
        pe_array_pe_b_pass_0_3_1_reload,
        pe_array_pe_b_pass_0_2_1_reload,
        pe_array_pe_b_pass_0_1_1_reload,
        pe_array_pe_b_pass_0_0_1_reload,
        pe_array_pe_a_pass_3_2_1_reload,
        pe_array_pe_a_pass_3_1_1_reload,
        pe_array_pe_a_pass_3_0_1_reload,
        pe_array_pe_a_pass_2_2_1_reload,
        pe_array_pe_a_pass_2_1_1_reload,
        pe_array_pe_a_pass_2_0_1_reload,
        pe_array_pe_a_pass_1_2_1_reload,
        pe_array_pe_a_pass_1_1_1_reload,
        pe_array_pe_a_pass_1_0_1_reload,
        pe_array_pe_a_pass_0_2_1_reload,
        pe_array_pe_a_pass_0_1_1_reload,
        pe_array_pe_a_pass_0_0_1_reload,
        pe_array_pe_val_3_3_3_out,
        pe_array_pe_val_3_3_3_out_ap_vld,
        pe_array_pe_val_3_2_3_out,
        pe_array_pe_val_3_2_3_out_ap_vld,
        pe_array_pe_val_3_1_3_out,
        pe_array_pe_val_3_1_3_out_ap_vld,
        pe_array_pe_val_3_0_3_out,
        pe_array_pe_val_3_0_3_out_ap_vld,
        pe_array_pe_val_2_3_3_out,
        pe_array_pe_val_2_3_3_out_ap_vld,
        pe_array_pe_val_2_2_3_out,
        pe_array_pe_val_2_2_3_out_ap_vld,
        pe_array_pe_val_2_1_3_out,
        pe_array_pe_val_2_1_3_out_ap_vld,
        pe_array_pe_val_2_0_3_out,
        pe_array_pe_val_2_0_3_out_ap_vld,
        pe_array_pe_val_1_3_3_out,
        pe_array_pe_val_1_3_3_out_ap_vld,
        pe_array_pe_val_1_2_3_out,
        pe_array_pe_val_1_2_3_out_ap_vld,
        pe_array_pe_val_1_1_3_out,
        pe_array_pe_val_1_1_3_out_ap_vld,
        pe_array_pe_val_1_0_3_out,
        pe_array_pe_val_1_0_3_out_ap_vld,
        pe_array_pe_val_0_3_3_out,
        pe_array_pe_val_0_3_3_out_ap_vld,
        pe_array_pe_val_0_2_3_out,
        pe_array_pe_val_0_2_3_out_ap_vld,
        pe_array_pe_val_0_1_3_out,
        pe_array_pe_val_0_1_3_out_ap_vld,
        pe_array_pe_val_0_0_3_out,
        pe_array_pe_val_0_0_3_out_ap_vld,
        pe_array_pe_b_pass_2_3_3_out,
        pe_array_pe_b_pass_2_3_3_out_ap_vld,
        pe_array_pe_b_pass_2_2_3_out,
        pe_array_pe_b_pass_2_2_3_out_ap_vld,
        pe_array_pe_b_pass_2_1_3_out,
        pe_array_pe_b_pass_2_1_3_out_ap_vld,
        pe_array_pe_b_pass_2_0_3_out,
        pe_array_pe_b_pass_2_0_3_out_ap_vld,
        pe_array_pe_b_pass_1_3_3_out,
        pe_array_pe_b_pass_1_3_3_out_ap_vld,
        pe_array_pe_b_pass_1_2_3_out,
        pe_array_pe_b_pass_1_2_3_out_ap_vld,
        pe_array_pe_b_pass_1_1_3_out,
        pe_array_pe_b_pass_1_1_3_out_ap_vld,
        pe_array_pe_b_pass_1_0_3_out,
        pe_array_pe_b_pass_1_0_3_out_ap_vld,
        pe_array_pe_b_pass_0_3_3_out,
        pe_array_pe_b_pass_0_3_3_out_ap_vld,
        pe_array_pe_b_pass_0_2_3_out,
        pe_array_pe_b_pass_0_2_3_out_ap_vld,
        pe_array_pe_b_pass_0_1_3_out,
        pe_array_pe_b_pass_0_1_3_out_ap_vld,
        pe_array_pe_b_pass_0_0_3_out,
        pe_array_pe_b_pass_0_0_3_out_ap_vld,
        pe_array_pe_a_pass_3_2_3_out,
        pe_array_pe_a_pass_3_2_3_out_ap_vld,
        pe_array_pe_a_pass_3_1_3_out,
        pe_array_pe_a_pass_3_1_3_out_ap_vld,
        pe_array_pe_a_pass_3_0_3_out,
        pe_array_pe_a_pass_3_0_3_out_ap_vld,
        pe_array_pe_a_pass_2_2_3_out,
        pe_array_pe_a_pass_2_2_3_out_ap_vld,
        pe_array_pe_a_pass_2_1_3_out,
        pe_array_pe_a_pass_2_1_3_out_ap_vld,
        pe_array_pe_a_pass_2_0_3_out,
        pe_array_pe_a_pass_2_0_3_out_ap_vld,
        pe_array_pe_a_pass_1_2_3_out,
        pe_array_pe_a_pass_1_2_3_out_ap_vld,
        pe_array_pe_a_pass_1_1_3_out,
        pe_array_pe_a_pass_1_1_3_out_ap_vld,
        pe_array_pe_a_pass_1_0_3_out,
        pe_array_pe_a_pass_1_0_3_out_ap_vld,
        pe_array_pe_a_pass_0_2_3_out,
        pe_array_pe_a_pass_0_2_3_out_ap_vld,
        pe_array_pe_a_pass_0_1_3_out,
        pe_array_pe_a_pass_0_1_3_out_ap_vld,
        pe_array_pe_a_pass_0_0_3_out,
        pe_array_pe_a_pass_0_0_3_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] select_ln14_2_reload;
input  [31:0] select_ln14_5_reload;
input  [31:0] select_ln14_8_reload;
input  [31:0] select_ln14_11_reload;
input  [31:0] select_ln14_14_reload;
input  [31:0] select_ln14_17_reload;
input  [31:0] select_ln14_20_reload;
input  [31:0] select_ln14_23_reload;
input  [31:0] select_ln14_25_reload;
input  [31:0] select_ln14_27_reload;
input  [31:0] select_ln14_29_reload;
input  [31:0] select_ln14_31_reload;
input  [31:0] select_ln14_32_reload;
input  [31:0] select_ln14_33_reload;
input  [31:0] select_ln14_34_reload;
input  [31:0] select_ln14_35_reload;
input  [31:0] pe_array_pe_b_pass_2_3_1_reload;
input  [31:0] pe_array_pe_b_pass_2_2_1_reload;
input  [31:0] pe_array_pe_b_pass_2_1_1_reload;
input  [31:0] pe_array_pe_b_pass_2_0_1_reload;
input  [31:0] pe_array_pe_b_pass_1_3_1_reload;
input  [31:0] pe_array_pe_b_pass_1_2_1_reload;
input  [31:0] pe_array_pe_b_pass_1_1_1_reload;
input  [31:0] pe_array_pe_b_pass_1_0_1_reload;
input  [31:0] pe_array_pe_b_pass_0_3_1_reload;
input  [31:0] pe_array_pe_b_pass_0_2_1_reload;
input  [31:0] pe_array_pe_b_pass_0_1_1_reload;
input  [31:0] pe_array_pe_b_pass_0_0_1_reload;
input  [31:0] pe_array_pe_a_pass_3_2_1_reload;
input  [31:0] pe_array_pe_a_pass_3_1_1_reload;
input  [31:0] pe_array_pe_a_pass_3_0_1_reload;
input  [31:0] pe_array_pe_a_pass_2_2_1_reload;
input  [31:0] pe_array_pe_a_pass_2_1_1_reload;
input  [31:0] pe_array_pe_a_pass_2_0_1_reload;
input  [31:0] pe_array_pe_a_pass_1_2_1_reload;
input  [31:0] pe_array_pe_a_pass_1_1_1_reload;
input  [31:0] pe_array_pe_a_pass_1_0_1_reload;
input  [31:0] pe_array_pe_a_pass_0_2_1_reload;
input  [31:0] pe_array_pe_a_pass_0_1_1_reload;
input  [31:0] pe_array_pe_a_pass_0_0_1_reload;
output  [31:0] pe_array_pe_val_3_3_3_out;
output   pe_array_pe_val_3_3_3_out_ap_vld;
output  [31:0] pe_array_pe_val_3_2_3_out;
output   pe_array_pe_val_3_2_3_out_ap_vld;
output  [31:0] pe_array_pe_val_3_1_3_out;
output   pe_array_pe_val_3_1_3_out_ap_vld;
output  [31:0] pe_array_pe_val_3_0_3_out;
output   pe_array_pe_val_3_0_3_out_ap_vld;
output  [31:0] pe_array_pe_val_2_3_3_out;
output   pe_array_pe_val_2_3_3_out_ap_vld;
output  [31:0] pe_array_pe_val_2_2_3_out;
output   pe_array_pe_val_2_2_3_out_ap_vld;
output  [31:0] pe_array_pe_val_2_1_3_out;
output   pe_array_pe_val_2_1_3_out_ap_vld;
output  [31:0] pe_array_pe_val_2_0_3_out;
output   pe_array_pe_val_2_0_3_out_ap_vld;
output  [31:0] pe_array_pe_val_1_3_3_out;
output   pe_array_pe_val_1_3_3_out_ap_vld;
output  [31:0] pe_array_pe_val_1_2_3_out;
output   pe_array_pe_val_1_2_3_out_ap_vld;
output  [31:0] pe_array_pe_val_1_1_3_out;
output   pe_array_pe_val_1_1_3_out_ap_vld;
output  [31:0] pe_array_pe_val_1_0_3_out;
output   pe_array_pe_val_1_0_3_out_ap_vld;
output  [31:0] pe_array_pe_val_0_3_3_out;
output   pe_array_pe_val_0_3_3_out_ap_vld;
output  [31:0] pe_array_pe_val_0_2_3_out;
output   pe_array_pe_val_0_2_3_out_ap_vld;
output  [31:0] pe_array_pe_val_0_1_3_out;
output   pe_array_pe_val_0_1_3_out_ap_vld;
output  [31:0] pe_array_pe_val_0_0_3_out;
output   pe_array_pe_val_0_0_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_2_3_3_out;
output   pe_array_pe_b_pass_2_3_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_2_2_3_out;
output   pe_array_pe_b_pass_2_2_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_2_1_3_out;
output   pe_array_pe_b_pass_2_1_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_2_0_3_out;
output   pe_array_pe_b_pass_2_0_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_1_3_3_out;
output   pe_array_pe_b_pass_1_3_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_1_2_3_out;
output   pe_array_pe_b_pass_1_2_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_1_1_3_out;
output   pe_array_pe_b_pass_1_1_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_1_0_3_out;
output   pe_array_pe_b_pass_1_0_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_0_3_3_out;
output   pe_array_pe_b_pass_0_3_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_0_2_3_out;
output   pe_array_pe_b_pass_0_2_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_0_1_3_out;
output   pe_array_pe_b_pass_0_1_3_out_ap_vld;
output  [31:0] pe_array_pe_b_pass_0_0_3_out;
output   pe_array_pe_b_pass_0_0_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_3_2_3_out;
output   pe_array_pe_a_pass_3_2_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_3_1_3_out;
output   pe_array_pe_a_pass_3_1_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_3_0_3_out;
output   pe_array_pe_a_pass_3_0_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_2_2_3_out;
output   pe_array_pe_a_pass_2_2_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_2_1_3_out;
output   pe_array_pe_a_pass_2_1_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_2_0_3_out;
output   pe_array_pe_a_pass_2_0_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_1_2_3_out;
output   pe_array_pe_a_pass_1_2_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_1_1_3_out;
output   pe_array_pe_a_pass_1_1_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_1_0_3_out;
output   pe_array_pe_a_pass_1_0_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_0_2_3_out;
output   pe_array_pe_a_pass_0_2_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_0_1_3_out;
output   pe_array_pe_a_pass_0_1_3_out_ap_vld;
output  [31:0] pe_array_pe_a_pass_0_0_3_out;
output   pe_array_pe_a_pass_0_0_3_out_ap_vld;

reg ap_idle;
reg pe_array_pe_val_3_3_3_out_ap_vld;
reg pe_array_pe_val_3_2_3_out_ap_vld;
reg pe_array_pe_val_3_1_3_out_ap_vld;
reg pe_array_pe_val_3_0_3_out_ap_vld;
reg pe_array_pe_val_2_3_3_out_ap_vld;
reg pe_array_pe_val_2_2_3_out_ap_vld;
reg pe_array_pe_val_2_1_3_out_ap_vld;
reg pe_array_pe_val_2_0_3_out_ap_vld;
reg pe_array_pe_val_1_3_3_out_ap_vld;
reg pe_array_pe_val_1_2_3_out_ap_vld;
reg pe_array_pe_val_1_1_3_out_ap_vld;
reg pe_array_pe_val_1_0_3_out_ap_vld;
reg pe_array_pe_val_0_3_3_out_ap_vld;
reg pe_array_pe_val_0_2_3_out_ap_vld;
reg pe_array_pe_val_0_1_3_out_ap_vld;
reg pe_array_pe_val_0_0_3_out_ap_vld;
reg pe_array_pe_b_pass_2_3_3_out_ap_vld;
reg pe_array_pe_b_pass_2_2_3_out_ap_vld;
reg pe_array_pe_b_pass_2_1_3_out_ap_vld;
reg pe_array_pe_b_pass_2_0_3_out_ap_vld;
reg pe_array_pe_b_pass_1_3_3_out_ap_vld;
reg pe_array_pe_b_pass_1_2_3_out_ap_vld;
reg pe_array_pe_b_pass_1_1_3_out_ap_vld;
reg pe_array_pe_b_pass_1_0_3_out_ap_vld;
reg pe_array_pe_b_pass_0_3_3_out_ap_vld;
reg pe_array_pe_b_pass_0_2_3_out_ap_vld;
reg pe_array_pe_b_pass_0_1_3_out_ap_vld;
reg pe_array_pe_b_pass_0_0_3_out_ap_vld;
reg pe_array_pe_a_pass_3_2_3_out_ap_vld;
reg pe_array_pe_a_pass_3_1_3_out_ap_vld;
reg pe_array_pe_a_pass_3_0_3_out_ap_vld;
reg pe_array_pe_a_pass_2_2_3_out_ap_vld;
reg pe_array_pe_a_pass_2_1_3_out_ap_vld;
reg pe_array_pe_a_pass_2_0_3_out_ap_vld;
reg pe_array_pe_a_pass_1_2_3_out_ap_vld;
reg pe_array_pe_a_pass_1_1_3_out_ap_vld;
reg pe_array_pe_a_pass_1_0_3_out_ap_vld;
reg pe_array_pe_a_pass_0_2_3_out_ap_vld;
reg pe_array_pe_a_pass_0_1_3_out_ap_vld;
reg pe_array_pe_a_pass_0_0_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln41_fu_1112_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] c_fu_202;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_c_load;
wire   [2:0] add_ln42_fu_1366_p2;
reg   [2:0] r_fu_206;
reg   [2:0] ap_sig_allocacmp_r_load;
wire   [2:0] select_ln41_1_fu_1150_p3;
reg   [4:0] indvar_flatten_fu_210;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln41_fu_1118_p2;
reg   [31:0] pe_array_pe_a_pass_0_0_3_fu_214;
wire   [1:0] trunc_ln41_fu_1158_p1;
wire   [1:0] trunc_ln43_fu_1162_p1;
reg   [31:0] pe_array_pe_a_pass_0_1_3_fu_218;
reg   [31:0] pe_array_pe_a_pass_0_2_3_fu_222;
reg   [31:0] pe_array_pe_a_pass_1_0_3_fu_226;
reg   [31:0] pe_array_pe_a_pass_1_1_3_fu_230;
reg   [31:0] pe_array_pe_a_pass_1_2_3_fu_234;
reg   [31:0] pe_array_pe_a_pass_2_0_3_fu_238;
reg   [31:0] pe_array_pe_a_pass_2_1_3_fu_242;
reg   [31:0] pe_array_pe_a_pass_2_2_3_fu_246;
reg   [31:0] pe_array_pe_a_pass_3_0_3_fu_250;
reg   [31:0] pe_array_pe_a_pass_3_1_3_fu_254;
reg   [31:0] pe_array_pe_a_pass_3_2_3_fu_258;
reg   [31:0] pe_array_pe_val_0_0_3_fu_262;
reg   [31:0] pe_array_pe_val_0_1_3_fu_266;
reg   [31:0] pe_array_pe_val_0_2_3_fu_270;
reg   [31:0] pe_array_pe_val_0_3_3_fu_274;
reg   [31:0] pe_array_pe_val_1_0_3_fu_278;
reg   [31:0] pe_array_pe_val_1_1_3_fu_282;
reg   [31:0] pe_array_pe_val_1_2_3_fu_286;
reg   [31:0] pe_array_pe_val_1_3_3_fu_290;
reg   [31:0] pe_array_pe_val_2_0_3_fu_294;
reg   [31:0] pe_array_pe_val_2_1_3_fu_298;
reg   [31:0] pe_array_pe_val_2_2_3_fu_302;
reg   [31:0] pe_array_pe_val_2_3_3_fu_306;
reg   [31:0] pe_array_pe_val_3_0_3_fu_310;
reg   [31:0] pe_array_pe_val_3_1_3_fu_314;
reg   [31:0] pe_array_pe_val_3_2_3_fu_318;
reg   [31:0] pe_array_pe_val_3_3_3_fu_322;
reg   [31:0] pe_array_pe_b_pass_0_0_3_fu_326;
reg   [31:0] pe_array_pe_b_pass_0_1_3_fu_330;
reg   [31:0] pe_array_pe_b_pass_0_2_3_fu_334;
reg   [31:0] pe_array_pe_b_pass_0_3_3_fu_338;
reg   [31:0] pe_array_pe_b_pass_1_0_3_fu_342;
reg   [31:0] pe_array_pe_b_pass_1_1_3_fu_346;
reg   [31:0] pe_array_pe_b_pass_1_2_3_fu_350;
reg   [31:0] pe_array_pe_b_pass_1_3_3_fu_354;
reg   [31:0] pe_array_pe_b_pass_2_0_3_fu_358;
reg   [31:0] pe_array_pe_b_pass_2_1_3_fu_362;
reg   [31:0] pe_array_pe_b_pass_2_2_3_fu_366;
reg   [31:0] pe_array_pe_b_pass_2_3_3_fu_370;
wire   [0:0] icmp_ln42_fu_1130_p2;
wire   [2:0] add_ln41_1_fu_1144_p2;
wire   [2:0] select_ln41_fu_1136_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_182;
reg    ap_condition_191;
reg    ap_condition_199;
reg    ap_condition_207;
reg    ap_condition_213;
reg    ap_condition_219;
reg    ap_condition_227;
reg    ap_condition_233;
reg    ap_condition_239;
reg    ap_condition_248;
reg    ap_condition_254;
reg    ap_condition_260;
reg    ap_condition_279;
reg    ap_condition_297;
reg    ap_condition_315;
reg    ap_condition_333;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln41_fu_1112_p2 == 1'd0)) begin
            c_fu_202 <= add_ln42_fu_1366_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_202 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln41_fu_1112_p2 == 1'd0)) begin
            indvar_flatten_fu_210 <= add_ln41_fu_1118_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_210 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_182)) begin
            pe_array_pe_a_pass_0_0_3_fu_214 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_0_0_3_fu_214 <= pe_array_pe_a_pass_0_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_191)) begin
            pe_array_pe_a_pass_0_1_3_fu_218 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_0_1_3_fu_218 <= pe_array_pe_a_pass_0_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_199)) begin
            pe_array_pe_a_pass_0_2_3_fu_222 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_0_2_3_fu_222 <= pe_array_pe_a_pass_0_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_207)) begin
            pe_array_pe_a_pass_1_0_3_fu_226 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_1_0_3_fu_226 <= pe_array_pe_a_pass_1_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_213)) begin
            pe_array_pe_a_pass_1_1_3_fu_230 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_1_1_3_fu_230 <= pe_array_pe_a_pass_1_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_219)) begin
            pe_array_pe_a_pass_1_2_3_fu_234 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_1_2_3_fu_234 <= pe_array_pe_a_pass_1_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_227)) begin
            pe_array_pe_a_pass_2_0_3_fu_238 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_2_0_3_fu_238 <= pe_array_pe_a_pass_2_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_233)) begin
            pe_array_pe_a_pass_2_1_3_fu_242 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_2_1_3_fu_242 <= pe_array_pe_a_pass_2_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_239)) begin
            pe_array_pe_a_pass_2_2_3_fu_246 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_2_2_3_fu_246 <= pe_array_pe_a_pass_2_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_248)) begin
            pe_array_pe_a_pass_3_0_3_fu_250 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_3_0_3_fu_250 <= pe_array_pe_a_pass_3_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_254)) begin
            pe_array_pe_a_pass_3_1_3_fu_254 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_3_1_3_fu_254 <= pe_array_pe_a_pass_3_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_260)) begin
            pe_array_pe_a_pass_3_2_3_fu_258 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_a_pass_3_2_3_fu_258 <= pe_array_pe_a_pass_3_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_182)) begin
            pe_array_pe_b_pass_0_0_3_fu_326 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_0_0_3_fu_326 <= pe_array_pe_b_pass_0_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_191)) begin
            pe_array_pe_b_pass_0_1_3_fu_330 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_0_1_3_fu_330 <= pe_array_pe_b_pass_0_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_199)) begin
            pe_array_pe_b_pass_0_2_3_fu_334 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_0_2_3_fu_334 <= pe_array_pe_b_pass_0_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_279)) begin
            pe_array_pe_b_pass_0_3_3_fu_338 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_0_3_3_fu_338 <= pe_array_pe_b_pass_0_3_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_207)) begin
            pe_array_pe_b_pass_1_0_3_fu_342 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_1_0_3_fu_342 <= pe_array_pe_b_pass_1_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_213)) begin
            pe_array_pe_b_pass_1_1_3_fu_346 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_1_1_3_fu_346 <= pe_array_pe_b_pass_1_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_219)) begin
            pe_array_pe_b_pass_1_2_3_fu_350 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_1_2_3_fu_350 <= pe_array_pe_b_pass_1_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_297)) begin
            pe_array_pe_b_pass_1_3_3_fu_354 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_1_3_3_fu_354 <= pe_array_pe_b_pass_1_3_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_227)) begin
            pe_array_pe_b_pass_2_0_3_fu_358 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_2_0_3_fu_358 <= pe_array_pe_b_pass_2_0_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_233)) begin
            pe_array_pe_b_pass_2_1_3_fu_362 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_2_1_3_fu_362 <= pe_array_pe_b_pass_2_1_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_239)) begin
            pe_array_pe_b_pass_2_2_3_fu_366 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_2_2_3_fu_366 <= pe_array_pe_b_pass_2_2_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_315)) begin
            pe_array_pe_b_pass_2_3_3_fu_370 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_b_pass_2_3_3_fu_370 <= pe_array_pe_b_pass_2_3_1_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_182)) begin
            pe_array_pe_val_0_0_3_fu_262 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_0_0_3_fu_262 <= select_ln14_35_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_191)) begin
            pe_array_pe_val_0_1_3_fu_266 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_0_1_3_fu_266 <= select_ln14_34_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_199)) begin
            pe_array_pe_val_0_2_3_fu_270 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_0_2_3_fu_270 <= select_ln14_33_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_279)) begin
            pe_array_pe_val_0_3_3_fu_274 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_0_3_3_fu_274 <= select_ln14_32_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_207)) begin
            pe_array_pe_val_1_0_3_fu_278 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_1_0_3_fu_278 <= select_ln14_31_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_213)) begin
            pe_array_pe_val_1_1_3_fu_282 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_1_1_3_fu_282 <= select_ln14_29_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_219)) begin
            pe_array_pe_val_1_2_3_fu_286 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_1_2_3_fu_286 <= select_ln14_27_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_297)) begin
            pe_array_pe_val_1_3_3_fu_290 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_1_3_3_fu_290 <= select_ln14_25_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_227)) begin
            pe_array_pe_val_2_0_3_fu_294 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_2_0_3_fu_294 <= select_ln14_23_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_233)) begin
            pe_array_pe_val_2_1_3_fu_298 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_2_1_3_fu_298 <= select_ln14_20_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_239)) begin
            pe_array_pe_val_2_2_3_fu_302 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_2_2_3_fu_302 <= select_ln14_17_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_315)) begin
            pe_array_pe_val_2_3_3_fu_306 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_2_3_3_fu_306 <= select_ln14_14_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_248)) begin
            pe_array_pe_val_3_0_3_fu_310 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_3_0_3_fu_310 <= select_ln14_11_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_254)) begin
            pe_array_pe_val_3_1_3_fu_314 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_3_1_3_fu_314 <= select_ln14_8_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_260)) begin
            pe_array_pe_val_3_2_3_fu_318 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_3_2_3_fu_318 <= select_ln14_5_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((1'b1 == ap_condition_333)) begin
            pe_array_pe_val_3_3_3_fu_322 <= 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            pe_array_pe_val_3_3_3_fu_322 <= select_ln14_2_reload;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln41_fu_1112_p2 == 1'd0)) begin
            r_fu_206 <= select_ln41_1_fu_1150_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_206 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 3'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_202;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_210;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_load = 3'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_206;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_0_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_0_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_0_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_0_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_0_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_0_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_1_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_1_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_1_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_1_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_1_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_1_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_2_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_2_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_2_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_2_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_2_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_2_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_3_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_3_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_3_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_3_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_a_pass_3_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_a_pass_3_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_0_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_0_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_0_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_0_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_0_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_0_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_0_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_0_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_1_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_1_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_1_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_1_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_1_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_1_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_1_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_1_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_2_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_2_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_2_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_2_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_2_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_2_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_b_pass_2_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_b_pass_2_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_0_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_0_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_0_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_0_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_0_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_0_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_0_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_0_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_1_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_1_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_1_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_1_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_1_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_1_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_1_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_1_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_2_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_2_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_2_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_2_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_2_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_2_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_2_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_2_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_3_0_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_3_0_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_3_1_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_3_1_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_3_2_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_3_2_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln41_fu_1112_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        pe_array_pe_val_3_3_3_out_ap_vld = 1'b1;
    end else begin
        pe_array_pe_val_3_3_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_1_fu_1144_p2 = (ap_sig_allocacmp_r_load + 3'd1);

assign add_ln41_fu_1118_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln42_fu_1366_p2 = (select_ln41_fu_1136_p3 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_182 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd0) & (trunc_ln41_fu_1158_p1 == 2'd0));
end

always @ (*) begin
    ap_condition_191 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd1) & (trunc_ln41_fu_1158_p1 == 2'd0));
end

always @ (*) begin
    ap_condition_199 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd2) & (trunc_ln41_fu_1158_p1 == 2'd0));
end

always @ (*) begin
    ap_condition_207 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd0) & (trunc_ln41_fu_1158_p1 == 2'd1));
end

always @ (*) begin
    ap_condition_213 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd1) & (trunc_ln41_fu_1158_p1 == 2'd1));
end

always @ (*) begin
    ap_condition_219 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd2) & (trunc_ln41_fu_1158_p1 == 2'd1));
end

always @ (*) begin
    ap_condition_227 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd0) & (trunc_ln41_fu_1158_p1 == 2'd2));
end

always @ (*) begin
    ap_condition_233 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd1) & (trunc_ln41_fu_1158_p1 == 2'd2));
end

always @ (*) begin
    ap_condition_239 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd2) & (trunc_ln41_fu_1158_p1 == 2'd2));
end

always @ (*) begin
    ap_condition_248 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd0) & (trunc_ln41_fu_1158_p1 == 2'd3));
end

always @ (*) begin
    ap_condition_254 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd1) & (trunc_ln41_fu_1158_p1 == 2'd3));
end

always @ (*) begin
    ap_condition_260 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd2) & (trunc_ln41_fu_1158_p1 == 2'd3));
end

always @ (*) begin
    ap_condition_279 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd3) & (trunc_ln41_fu_1158_p1 == 2'd0));
end

always @ (*) begin
    ap_condition_297 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd3) & (trunc_ln41_fu_1158_p1 == 2'd1));
end

always @ (*) begin
    ap_condition_315 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd3) & (trunc_ln41_fu_1158_p1 == 2'd2));
end

always @ (*) begin
    ap_condition_333 = ((icmp_ln41_fu_1112_p2 == 1'd0) & (trunc_ln43_fu_1162_p1 == 2'd3) & (trunc_ln41_fu_1158_p1 == 2'd3));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln41_fu_1112_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_1130_p2 = ((ap_sig_allocacmp_c_load == 3'd4) ? 1'b1 : 1'b0);

assign pe_array_pe_a_pass_0_0_3_out = pe_array_pe_a_pass_0_0_3_fu_214;

assign pe_array_pe_a_pass_0_1_3_out = pe_array_pe_a_pass_0_1_3_fu_218;

assign pe_array_pe_a_pass_0_2_3_out = pe_array_pe_a_pass_0_2_3_fu_222;

assign pe_array_pe_a_pass_1_0_3_out = pe_array_pe_a_pass_1_0_3_fu_226;

assign pe_array_pe_a_pass_1_1_3_out = pe_array_pe_a_pass_1_1_3_fu_230;

assign pe_array_pe_a_pass_1_2_3_out = pe_array_pe_a_pass_1_2_3_fu_234;

assign pe_array_pe_a_pass_2_0_3_out = pe_array_pe_a_pass_2_0_3_fu_238;

assign pe_array_pe_a_pass_2_1_3_out = pe_array_pe_a_pass_2_1_3_fu_242;

assign pe_array_pe_a_pass_2_2_3_out = pe_array_pe_a_pass_2_2_3_fu_246;

assign pe_array_pe_a_pass_3_0_3_out = pe_array_pe_a_pass_3_0_3_fu_250;

assign pe_array_pe_a_pass_3_1_3_out = pe_array_pe_a_pass_3_1_3_fu_254;

assign pe_array_pe_a_pass_3_2_3_out = pe_array_pe_a_pass_3_2_3_fu_258;

assign pe_array_pe_b_pass_0_0_3_out = pe_array_pe_b_pass_0_0_3_fu_326;

assign pe_array_pe_b_pass_0_1_3_out = pe_array_pe_b_pass_0_1_3_fu_330;

assign pe_array_pe_b_pass_0_2_3_out = pe_array_pe_b_pass_0_2_3_fu_334;

assign pe_array_pe_b_pass_0_3_3_out = pe_array_pe_b_pass_0_3_3_fu_338;

assign pe_array_pe_b_pass_1_0_3_out = pe_array_pe_b_pass_1_0_3_fu_342;

assign pe_array_pe_b_pass_1_1_3_out = pe_array_pe_b_pass_1_1_3_fu_346;

assign pe_array_pe_b_pass_1_2_3_out = pe_array_pe_b_pass_1_2_3_fu_350;

assign pe_array_pe_b_pass_1_3_3_out = pe_array_pe_b_pass_1_3_3_fu_354;

assign pe_array_pe_b_pass_2_0_3_out = pe_array_pe_b_pass_2_0_3_fu_358;

assign pe_array_pe_b_pass_2_1_3_out = pe_array_pe_b_pass_2_1_3_fu_362;

assign pe_array_pe_b_pass_2_2_3_out = pe_array_pe_b_pass_2_2_3_fu_366;

assign pe_array_pe_b_pass_2_3_3_out = pe_array_pe_b_pass_2_3_3_fu_370;

assign pe_array_pe_val_0_0_3_out = pe_array_pe_val_0_0_3_fu_262;

assign pe_array_pe_val_0_1_3_out = pe_array_pe_val_0_1_3_fu_266;

assign pe_array_pe_val_0_2_3_out = pe_array_pe_val_0_2_3_fu_270;

assign pe_array_pe_val_0_3_3_out = pe_array_pe_val_0_3_3_fu_274;

assign pe_array_pe_val_1_0_3_out = pe_array_pe_val_1_0_3_fu_278;

assign pe_array_pe_val_1_1_3_out = pe_array_pe_val_1_1_3_fu_282;

assign pe_array_pe_val_1_2_3_out = pe_array_pe_val_1_2_3_fu_286;

assign pe_array_pe_val_1_3_3_out = pe_array_pe_val_1_3_3_fu_290;

assign pe_array_pe_val_2_0_3_out = pe_array_pe_val_2_0_3_fu_294;

assign pe_array_pe_val_2_1_3_out = pe_array_pe_val_2_1_3_fu_298;

assign pe_array_pe_val_2_2_3_out = pe_array_pe_val_2_2_3_fu_302;

assign pe_array_pe_val_2_3_3_out = pe_array_pe_val_2_3_3_fu_306;

assign pe_array_pe_val_3_0_3_out = pe_array_pe_val_3_0_3_fu_310;

assign pe_array_pe_val_3_1_3_out = pe_array_pe_val_3_1_3_fu_314;

assign pe_array_pe_val_3_2_3_out = pe_array_pe_val_3_2_3_fu_318;

assign pe_array_pe_val_3_3_3_out = pe_array_pe_val_3_3_3_fu_322;

assign select_ln41_1_fu_1150_p3 = ((icmp_ln42_fu_1130_p2[0:0] == 1'b1) ? add_ln41_1_fu_1144_p2 : ap_sig_allocacmp_r_load);

assign select_ln41_fu_1136_p3 = ((icmp_ln42_fu_1130_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_c_load);

assign trunc_ln41_fu_1158_p1 = select_ln41_1_fu_1150_p3[1:0];

assign trunc_ln43_fu_1162_p1 = select_ln41_fu_1136_p3[1:0];

endmodule //systolic_array_systolic_array_Pipeline_VITIS_LOOP_41_1_VITIS_LOOP_42_2
