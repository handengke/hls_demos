// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_systolic_array_Pipeline_pe_array_inner_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        pe_array_pe_b_pass_address0,
        pe_array_pe_b_pass_ce0,
        pe_array_pe_b_pass_q0,
        zext_ln70,
        pe_array_pe_a_tmp_address0,
        pe_array_pe_a_tmp_ce0,
        pe_array_pe_a_tmp_we0,
        pe_array_pe_a_tmp_d0,
        pe_array_pe_b_tmp_address0,
        pe_array_pe_b_tmp_ce0,
        pe_array_pe_b_tmp_we0,
        pe_array_pe_b_tmp_d0,
        pe_array_pe_val_address0,
        pe_array_pe_val_ce0,
        pe_array_pe_val_we0,
        pe_array_pe_val_d0,
        pe_array_pe_val_address1,
        pe_array_pe_val_ce1,
        pe_array_pe_val_q1,
        trunc_ln2,
        b_vec_3_7_reload,
        b_vec_3_3_reload,
        b_vec_2_1_reload,
        b_vec_3_1_reload,
        cmp3_i,
        pe_array_pe_a_pass_address0,
        pe_array_pe_a_pass_ce0,
        pe_array_pe_a_pass_q0,
        a_vec_3_8_reload,
        opa,
        opb
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] empty;
output  [3:0] pe_array_pe_b_pass_address0;
output   pe_array_pe_b_pass_ce0;
input  [31:0] pe_array_pe_b_pass_q0;
input  [3:0] zext_ln70;
output  [3:0] pe_array_pe_a_tmp_address0;
output   pe_array_pe_a_tmp_ce0;
output   pe_array_pe_a_tmp_we0;
output  [31:0] pe_array_pe_a_tmp_d0;
output  [3:0] pe_array_pe_b_tmp_address0;
output   pe_array_pe_b_tmp_ce0;
output   pe_array_pe_b_tmp_we0;
output  [31:0] pe_array_pe_b_tmp_d0;
output  [3:0] pe_array_pe_val_address0;
output   pe_array_pe_val_ce0;
output   pe_array_pe_val_we0;
output  [31:0] pe_array_pe_val_d0;
output  [3:0] pe_array_pe_val_address1;
output   pe_array_pe_val_ce1;
input  [31:0] pe_array_pe_val_q1;
input  [1:0] trunc_ln2;
input  [31:0] b_vec_3_7_reload;
input  [31:0] b_vec_3_3_reload;
input  [31:0] b_vec_2_1_reload;
input  [31:0] b_vec_3_1_reload;
input  [0:0] cmp3_i;
output  [3:0] pe_array_pe_a_pass_address0;
output   pe_array_pe_a_pass_ce0;
input  [31:0] pe_array_pe_a_pass_q0;
input  [31:0] a_vec_3_8_reload;
input  [31:0] opa;
input  [31:0] opb;

reg ap_idle;
reg pe_array_pe_b_pass_ce0;
reg pe_array_pe_a_tmp_ce0;
reg pe_array_pe_a_tmp_we0;
reg pe_array_pe_b_tmp_ce0;
reg pe_array_pe_b_tmp_we0;
reg pe_array_pe_val_ce0;
reg pe_array_pe_val_we0;
reg pe_array_pe_val_ce1;
reg pe_array_pe_a_pass_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln53_fu_219_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln74_fu_252_p1;
reg   [63:0] zext_ln74_reg_437;
reg   [3:0] this_val_reg_443;
wire   [0:0] icmp_ln57_1_fu_273_p2;
reg   [0:0] icmp_ln57_1_reg_449;
wire   [31:0] opb_1_fu_295_p6;
reg   [31:0] opb_1_reg_455;
wire   [0:0] sel_tmp125_fu_315_p2;
reg   [0:0] sel_tmp125_reg_460;
wire   [0:0] and_ln57_fu_346_p2;
reg   [0:0] and_ln57_reg_470;
wire   [63:0] zext_ln71_1_fu_241_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln62_fu_329_p1;
reg   [2:0] j_fu_72;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_2;
wire   [2:0] add_ln53_fu_225_p2;
wire  signed [31:0] opa_5_fu_363_p3;
wire  signed [31:0] opb_6_fu_382_p3;
wire   [3:0] zext_ln71_fu_231_p1;
wire   [3:0] add_ln71_fu_235_p2;
wire   [3:0] add_ln74_fu_246_p2;
wire   [1:0] trunc_ln57_fu_263_p1;
wire   [1:0] or_ln57_fu_267_p2;
wire   [2:0] add_ln62_fu_279_p2;
wire  signed [3:0] sext_ln70_fu_285_p1;
wire   [0:0] xor_ln57_fu_309_p2;
wire   [3:0] add_ln70_fu_289_p2;
wire   [3:0] opa_3_fu_321_p3;
wire   [0:0] sel_tmp130_demorgan_fu_334_p2;
wire   [0:0] icmp_ln57_fu_257_p2;
wire   [0:0] sel_tmp130_fu_340_p2;
wire   [31:0] opa_2_fu_357_p3;
wire   [31:0] opb_3_fu_370_p3;
wire   [31:0] opb_4_fu_376_p3;
wire   [31:0] mul_ln21_fu_389_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U31(
    .din0(b_vec_3_7_reload),
    .din1(b_vec_3_3_reload),
    .din2(b_vec_2_1_reload),
    .din3(b_vec_3_1_reload),
    .din4(trunc_ln57_fu_263_p1),
    .dout(opb_1_fu_295_p6)
);

systolic_array_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U32(
    .din0(opb_6_fu_382_p3),
    .din1(opa_5_fu_363_p3),
    .dout(mul_ln21_fu_389_p2)
);

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln53_fu_219_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_72 <= add_ln53_fu_225_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_219_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln57_reg_470 <= and_ln57_fu_346_p2;
        icmp_ln57_1_reg_449 <= icmp_ln57_1_fu_273_p2;
        opb_1_reg_455 <= opb_1_fu_295_p6;
        sel_tmp125_reg_460 <= sel_tmp125_fu_315_p2;
        this_val_reg_443 <= zext_ln74_fu_252_p1;
        zext_ln74_reg_437[3 : 0] <= zext_ln74_fu_252_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln53_fu_219_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_a_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_a_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_pass_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_tmp_ce0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_b_tmp_we0 = 1'b1;
    end else begin
        pe_array_pe_b_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_ce0 = 1'b1;
    end else begin
        pe_array_pe_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_ce1 = 1'b1;
    end else begin
        pe_array_pe_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pe_array_pe_val_we0 = 1'b1;
    end else begin
        pe_array_pe_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln53_fu_225_p2 = (ap_sig_allocacmp_j_2 + 3'd1);

assign add_ln62_fu_279_p2 = ($signed(ap_sig_allocacmp_j_2) + $signed(3'd7));

assign add_ln70_fu_289_p2 = ($signed(zext_ln70) + $signed(sext_ln70_fu_285_p1));

assign add_ln71_fu_235_p2 = (empty + zext_ln71_fu_231_p1);

assign add_ln74_fu_246_p2 = (zext_ln70 + zext_ln71_fu_231_p1);

assign and_ln57_fu_346_p2 = (sel_tmp130_fu_340_p2 & icmp_ln57_fu_257_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln53_fu_219_p2 = ((ap_sig_allocacmp_j_2 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_273_p2 = ((or_ln57_fu_267_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_257_p2 = ((ap_sig_allocacmp_j_2 == 3'd0) ? 1'b1 : 1'b0);

assign opa_2_fu_357_p3 = ((icmp_ln57_1_reg_449[0:0] == 1'b1) ? a_vec_3_8_reload : pe_array_pe_a_pass_q0);

assign opa_3_fu_321_p3 = ((sel_tmp125_fu_315_p2[0:0] == 1'b1) ? sext_ln70_fu_285_p1 : add_ln70_fu_289_p2);

assign opa_5_fu_363_p3 = ((and_ln57_reg_470[0:0] == 1'b1) ? opa : opa_2_fu_357_p3);

assign opb_3_fu_370_p3 = ((sel_tmp125_reg_460[0:0] == 1'b1) ? opb_1_reg_455 : pe_array_pe_b_pass_q0);

assign opb_4_fu_376_p3 = ((icmp_ln57_1_reg_449[0:0] == 1'b1) ? b_vec_3_7_reload : opb_3_fu_370_p3);

assign opb_6_fu_382_p3 = ((and_ln57_reg_470[0:0] == 1'b1) ? opb : opb_4_fu_376_p3);

assign or_ln57_fu_267_p2 = (trunc_ln57_fu_263_p1 | trunc_ln2);

assign pe_array_pe_a_pass_address0 = zext_ln62_fu_329_p1;

assign pe_array_pe_a_tmp_address0 = zext_ln74_reg_437;

assign pe_array_pe_a_tmp_d0 = opa_5_fu_363_p3;

assign pe_array_pe_b_pass_address0 = zext_ln71_1_fu_241_p1;

assign pe_array_pe_b_tmp_address0 = zext_ln74_reg_437;

assign pe_array_pe_b_tmp_d0 = opb_6_fu_382_p3;

assign pe_array_pe_val_address0 = this_val_reg_443;

assign pe_array_pe_val_address1 = zext_ln74_fu_252_p1;

assign pe_array_pe_val_d0 = (pe_array_pe_val_q1 + mul_ln21_fu_389_p2);

assign sel_tmp125_fu_315_p2 = (xor_ln57_fu_309_p2 & cmp3_i);

assign sel_tmp130_demorgan_fu_334_p2 = (icmp_ln57_1_fu_273_p2 | cmp3_i);

assign sel_tmp130_fu_340_p2 = (sel_tmp130_demorgan_fu_334_p2 ^ 1'd1);

assign sext_ln70_fu_285_p1 = $signed(add_ln62_fu_279_p2);

assign trunc_ln57_fu_263_p1 = ap_sig_allocacmp_j_2[1:0];

assign xor_ln57_fu_309_p2 = (icmp_ln57_1_fu_273_p2 ^ 1'd1);

assign zext_ln62_fu_329_p1 = opa_3_fu_321_p3;

assign zext_ln71_1_fu_241_p1 = add_ln71_fu_235_p2;

assign zext_ln71_fu_231_p1 = ap_sig_allocacmp_j_2;

assign zext_ln74_fu_252_p1 = add_ln74_fu_246_p2;

always @ (posedge ap_clk) begin
    zext_ln74_reg_437[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //systolic_array_systolic_array_Pipeline_pe_array_inner_loop
