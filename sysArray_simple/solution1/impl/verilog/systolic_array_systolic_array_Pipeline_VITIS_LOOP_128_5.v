// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_systolic_array_Pipeline_VITIS_LOOP_128_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_vec_3_0,
        b_vec_2_0,
        b_vec_1_0,
        b_vec_0_0,
        a_vec_3_0,
        a_vec_2_0,
        a_vec_1_0,
        a_vec_0_0,
        M2_0_1_reload,
        M2_1_1_reload,
        M2_2_1_reload,
        M2_3_1_reload,
        M2_4_1_reload,
        M2_5_1_reload,
        M2_6_1_reload,
        M2_7_1_reload,
        M2_8_1_reload,
        M2_9_1_reload,
        M2_10_1_reload,
        M2_11_1_reload,
        M2_12_1_reload,
        M2_13_1_reload,
        M2_14_1_reload,
        M2_15_1_reload,
        M1_0_1_reload,
        M1_1_1_reload,
        M1_2_1_reload,
        M1_3_1_reload,
        M1_4_1_reload,
        M1_5_1_reload,
        M1_6_1_reload,
        M1_7_1_reload,
        M1_8_1_reload,
        M1_9_1_reload,
        M1_10_1_reload,
        M1_11_1_reload,
        M1_12_1_reload,
        M1_13_1_reload,
        M1_14_1_reload,
        M1_15_1_reload,
        zext_ln125,
        b_vec_3_1_out,
        b_vec_3_1_out_ap_vld,
        b_vec_2_1_out,
        b_vec_2_1_out_ap_vld,
        b_vec_1_1_out,
        b_vec_1_1_out_ap_vld,
        b_vec_0_1_out,
        b_vec_0_1_out_ap_vld,
        a_vec_3_1_out,
        a_vec_3_1_out_ap_vld,
        a_vec_2_1_out,
        a_vec_2_1_out_ap_vld,
        a_vec_1_1_out,
        a_vec_1_1_out_ap_vld,
        a_vec_0_1_out,
        a_vec_0_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] b_vec_3_0;
input  [31:0] b_vec_2_0;
input  [31:0] b_vec_1_0;
input  [31:0] b_vec_0_0;
input  [31:0] a_vec_3_0;
input  [31:0] a_vec_2_0;
input  [31:0] a_vec_1_0;
input  [31:0] a_vec_0_0;
input  [31:0] M2_0_1_reload;
input  [31:0] M2_1_1_reload;
input  [31:0] M2_2_1_reload;
input  [31:0] M2_3_1_reload;
input  [31:0] M2_4_1_reload;
input  [31:0] M2_5_1_reload;
input  [31:0] M2_6_1_reload;
input  [31:0] M2_7_1_reload;
input  [31:0] M2_8_1_reload;
input  [31:0] M2_9_1_reload;
input  [31:0] M2_10_1_reload;
input  [31:0] M2_11_1_reload;
input  [31:0] M2_12_1_reload;
input  [31:0] M2_13_1_reload;
input  [31:0] M2_14_1_reload;
input  [31:0] M2_15_1_reload;
input  [31:0] M1_0_1_reload;
input  [31:0] M1_1_1_reload;
input  [31:0] M1_2_1_reload;
input  [31:0] M1_3_1_reload;
input  [31:0] M1_4_1_reload;
input  [31:0] M1_5_1_reload;
input  [31:0] M1_6_1_reload;
input  [31:0] M1_7_1_reload;
input  [31:0] M1_8_1_reload;
input  [31:0] M1_9_1_reload;
input  [31:0] M1_10_1_reload;
input  [31:0] M1_11_1_reload;
input  [31:0] M1_12_1_reload;
input  [31:0] M1_13_1_reload;
input  [31:0] M1_14_1_reload;
input  [31:0] M1_15_1_reload;
input  [3:0] zext_ln125;
output  [31:0] b_vec_3_1_out;
output   b_vec_3_1_out_ap_vld;
output  [31:0] b_vec_2_1_out;
output   b_vec_2_1_out_ap_vld;
output  [31:0] b_vec_1_1_out;
output   b_vec_1_1_out_ap_vld;
output  [31:0] b_vec_0_1_out;
output   b_vec_0_1_out_ap_vld;
output  [31:0] a_vec_3_1_out;
output   a_vec_3_1_out_ap_vld;
output  [31:0] a_vec_2_1_out;
output   a_vec_2_1_out_ap_vld;
output  [31:0] a_vec_1_1_out;
output   a_vec_1_1_out_ap_vld;
output  [31:0] a_vec_0_1_out;
output   a_vec_0_1_out_ap_vld;

reg ap_idle;
reg b_vec_3_1_out_ap_vld;
reg b_vec_2_1_out_ap_vld;
reg b_vec_1_1_out_ap_vld;
reg b_vec_0_1_out_ap_vld;
reg a_vec_3_1_out_ap_vld;
reg a_vec_2_1_out_ap_vld;
reg a_vec_1_1_out_ap_vld;
reg a_vec_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln128_fu_619_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln128_reg_1109;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln132_fu_639_p1;
reg   [1:0] trunc_ln132_reg_1113;
wire   [0:0] and_ln136_fu_721_p2;
reg   [0:0] and_ln136_reg_1125;
wire   [0:0] tmp_2_fu_727_p3;
reg   [0:0] tmp_2_reg_1129;
wire   [31:0] a_vec_1_7_fu_741_p18;
reg   [31:0] a_vec_1_7_reg_1133;
wire   [31:0] tmp_4_fu_791_p18;
wire   [31:0] ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492;
reg   [31:0] ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
reg   [2:0] j_fu_154;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_1;
wire    ap_block_pp0_stage0;
wire   [2:0] add_ln128_fu_625_p2;
reg   [31:0] a_vec_1_fu_158;
wire   [31:0] grp_fu_515_p6;
reg   [31:0] a_vec_1_1_fu_162;
wire   [31:0] grp_fu_528_p6;
reg   [31:0] a_vec_1_2_fu_166;
wire   [31:0] grp_fu_541_p6;
reg   [31:0] a_vec_1_4_fu_170;
wire   [31:0] grp_fu_554_p6;
reg   [31:0] b_vec_1_fu_174;
wire   [31:0] b_vec_0_3_fu_846_p6;
reg   [31:0] b_vec_1_1_fu_178;
wire   [31:0] b_vec_1_3_fu_859_p6;
reg   [31:0] b_vec_1_2_fu_182;
wire   [31:0] b_vec_2_3_fu_872_p6;
reg   [31:0] b_vec_1_4_fu_186;
wire   [31:0] b_vec_3_3_fu_885_p6;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] shl_ln_fu_643_p3;
wire   [4:0] zext_ln125_cast_fu_567_p1;
wire   [4:0] zext_ln128_1_fu_635_p1;
wire  signed [4:0] sub_ln132_fu_655_p2;
wire   [5:0] zext_ln132_fu_651_p1;
wire  signed [5:0] sext_ln132_fu_661_p1;
wire   [6:0] shl_ln1_fu_675_p3;
wire   [6:0] zext_ln128_fu_631_p1;
wire   [5:0] add_ln132_fu_669_p2;
wire   [1:0] tmp_fu_689_p4;
wire   [6:0] add_ln133_fu_683_p2;
wire   [2:0] tmp_1_fu_705_p4;
wire   [0:0] icmp_ln136_fu_699_p2;
wire   [0:0] icmp_ln136_1_fu_715_p2;
wire   [3:0] trunc_ln132_1_fu_665_p1;
wire   [3:0] a_vec_1_7_fu_741_p17;
wire   [1:0] trunc_ln138_fu_779_p1;
wire   [3:0] tmp_4_fu_791_p17;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_124;
reg    ap_condition_139;
reg    ap_condition_133;
reg    ap_condition_523;
reg    ap_condition_526;
reg    ap_condition_529;
reg    ap_condition_532;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U406(
    .din0(32'd0),
    .din1(a_vec_1_fu_158),
    .din2(a_vec_1_fu_158),
    .din3(a_vec_1_fu_158),
    .din4(trunc_ln132_reg_1113),
    .dout(grp_fu_515_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U407(
    .din0(a_vec_1_1_fu_162),
    .din1(32'd0),
    .din2(a_vec_1_1_fu_162),
    .din3(a_vec_1_1_fu_162),
    .din4(trunc_ln132_reg_1113),
    .dout(grp_fu_528_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U408(
    .din0(a_vec_1_2_fu_166),
    .din1(a_vec_1_2_fu_166),
    .din2(32'd0),
    .din3(a_vec_1_2_fu_166),
    .din4(trunc_ln132_reg_1113),
    .dout(grp_fu_541_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U409(
    .din0(a_vec_1_4_fu_170),
    .din1(a_vec_1_4_fu_170),
    .din2(a_vec_1_4_fu_170),
    .din3(32'd0),
    .din4(trunc_ln132_reg_1113),
    .dout(grp_fu_554_p6)
);

systolic_array_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U410(
    .din0(M1_0_1_reload),
    .din1(M1_1_1_reload),
    .din2(M1_2_1_reload),
    .din3(M1_3_1_reload),
    .din4(M1_4_1_reload),
    .din5(M1_5_1_reload),
    .din6(M1_6_1_reload),
    .din7(M1_7_1_reload),
    .din8(M1_8_1_reload),
    .din9(M1_9_1_reload),
    .din10(M1_10_1_reload),
    .din11(M1_11_1_reload),
    .din12(M1_12_1_reload),
    .din13(M1_13_1_reload),
    .din14(M1_14_1_reload),
    .din15(M1_15_1_reload),
    .din16(a_vec_1_7_fu_741_p17),
    .dout(a_vec_1_7_fu_741_p18)
);

systolic_array_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_164_32_1_1_U411(
    .din0(M2_0_1_reload),
    .din1(M2_1_1_reload),
    .din2(M2_2_1_reload),
    .din3(M2_3_1_reload),
    .din4(M2_4_1_reload),
    .din5(M2_5_1_reload),
    .din6(M2_6_1_reload),
    .din7(M2_7_1_reload),
    .din8(M2_8_1_reload),
    .din9(M2_9_1_reload),
    .din10(M2_10_1_reload),
    .din11(M2_11_1_reload),
    .din12(M2_12_1_reload),
    .din13(M2_13_1_reload),
    .din14(M2_14_1_reload),
    .din15(M2_15_1_reload),
    .din16(tmp_4_fu_791_p17),
    .dout(tmp_4_fu_791_p18)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U412(
    .din0(32'd0),
    .din1(b_vec_1_fu_174),
    .din2(b_vec_1_fu_174),
    .din3(b_vec_1_fu_174),
    .din4(trunc_ln132_reg_1113),
    .dout(b_vec_0_3_fu_846_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U413(
    .din0(b_vec_1_1_fu_178),
    .din1(32'd0),
    .din2(b_vec_1_1_fu_178),
    .din3(b_vec_1_1_fu_178),
    .din4(trunc_ln132_reg_1113),
    .dout(b_vec_1_3_fu_859_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U414(
    .din0(b_vec_1_2_fu_182),
    .din1(b_vec_1_2_fu_182),
    .din2(32'd0),
    .din3(b_vec_1_2_fu_182),
    .din4(trunc_ln132_reg_1113),
    .dout(b_vec_2_3_fu_872_p6)
);

systolic_array_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U415(
    .din0(b_vec_1_4_fu_186),
    .din1(b_vec_1_4_fu_186),
    .din2(b_vec_1_4_fu_186),
    .din3(32'd0),
    .din4(trunc_ln132_reg_1113),
    .dout(b_vec_3_3_fu_885_p6)
);

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        a_vec_1_1_fu_162 <= a_vec_1_0;
    end else if (((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd0) & (trunc_ln132_reg_1113 == 2'd1))) begin
        a_vec_1_1_fu_162 <= a_vec_1_7_reg_1133;
    end else if ((((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd1) & (icmp_ln128_reg_1109 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln136_reg_1125)))) begin
        a_vec_1_1_fu_162 <= grp_fu_528_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        a_vec_1_2_fu_166 <= a_vec_2_0;
    end else if (((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd0) & (trunc_ln132_reg_1113 == 2'd2))) begin
        a_vec_1_2_fu_166 <= a_vec_1_7_reg_1133;
    end else if ((((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd1) & (icmp_ln128_reg_1109 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln136_reg_1125)))) begin
        a_vec_1_2_fu_166 <= grp_fu_541_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        a_vec_1_4_fu_170 <= a_vec_3_0;
    end else if (((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd0) & (trunc_ln132_reg_1113 == 2'd3))) begin
        a_vec_1_4_fu_170 <= a_vec_1_7_reg_1133;
    end else if ((((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd1) & (icmp_ln128_reg_1109 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln136_reg_1125)))) begin
        a_vec_1_4_fu_170 <= grp_fu_554_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        a_vec_1_fu_158 <= a_vec_0_0;
    end else if (((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd0) & (trunc_ln132_reg_1113 == 2'd0))) begin
        a_vec_1_fu_158 <= a_vec_1_7_reg_1133;
    end else if ((((1'd1 == and_ln136_reg_1125) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_1129 == 1'd1) & (icmp_ln128_reg_1109 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == and_ln136_reg_1125)))) begin
        a_vec_1_fu_158 <= grp_fu_515_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_133)) begin
        if ((1'b1 == ap_condition_139)) begin
            ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= 32'd0;
        end else if ((1'b1 == ap_condition_124)) begin
            ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= tmp_4_fu_791_p18;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            b_vec_1_1_fu_178 <= b_vec_1_0;
        end else if ((1'b1 == ap_condition_523)) begin
            b_vec_1_1_fu_178 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd0 == and_ln136_reg_1125))) begin
            b_vec_1_1_fu_178 <= b_vec_1_3_fu_859_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            b_vec_1_2_fu_182 <= b_vec_2_0;
        end else if ((1'b1 == ap_condition_526)) begin
            b_vec_1_2_fu_182 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd0 == and_ln136_reg_1125))) begin
            b_vec_1_2_fu_182 <= b_vec_2_3_fu_872_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            b_vec_1_4_fu_186 <= b_vec_3_0;
        end else if ((1'b1 == ap_condition_529)) begin
            b_vec_1_4_fu_186 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd0 == and_ln136_reg_1125))) begin
            b_vec_1_4_fu_186 <= b_vec_3_3_fu_885_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            b_vec_1_fu_174 <= b_vec_0_0;
        end else if ((1'b1 == ap_condition_532)) begin
            b_vec_1_fu_174 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'd0 == and_ln136_reg_1125))) begin
            b_vec_1_fu_174 <= b_vec_0_3_fu_846_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln128_fu_619_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_154 <= add_ln128_fu_625_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_154 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln136_fu_721_p2) & (icmp_ln128_fu_619_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_fu_727_p3 == 1'd0))) begin
        a_vec_1_7_reg_1133 <= a_vec_1_7_fu_741_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_619_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln136_reg_1125 <= and_ln136_fu_721_p2;
        trunc_ln132_reg_1113 <= trunc_ln132_fu_639_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln128_reg_1109 <= icmp_ln128_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln136_fu_721_p2) & (icmp_ln128_fu_619_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_1129 <= sub_ln132_fu_655_p2[32'd4];
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_vec_0_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_vec_1_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_vec_2_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_vec_3_1_out_ap_vld = 1'b1;
    end else begin
        a_vec_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_154;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_vec_0_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_vec_1_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_vec_2_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_619_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_vec_3_1_out_ap_vld = 1'b1;
    end else begin
        b_vec_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_vec_0_1_out = a_vec_1_fu_158;

assign a_vec_1_1_out = a_vec_1_1_fu_162;

assign a_vec_1_7_fu_741_p17 = (shl_ln_fu_643_p3 + trunc_ln132_1_fu_665_p1);

assign a_vec_2_1_out = a_vec_1_2_fu_166;

assign a_vec_3_1_out = a_vec_1_4_fu_170;

assign add_ln128_fu_625_p2 = (ap_sig_allocacmp_j_1 + 3'd1);

assign add_ln132_fu_669_p2 = ($signed(zext_ln132_fu_651_p1) + $signed(sext_ln132_fu_661_p1));

assign add_ln133_fu_683_p2 = (shl_ln1_fu_675_p3 + zext_ln128_fu_631_p1);

assign and_ln136_fu_721_p2 = (icmp_ln136_fu_699_p2 & icmp_ln136_1_fu_715_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_124 = ((1'd1 == and_ln136_fu_721_p2) & (icmp_ln128_fu_619_p2 == 1'd0) & (tmp_2_fu_727_p3 == 1'd0));
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_139 = ((1'd1 == and_ln136_fu_721_p2) & (icmp_ln128_fu_619_p2 == 1'd0) & (tmp_2_fu_727_p3 == 1'd1));
end

always @ (*) begin
    ap_condition_523 = ((1'd1 == and_ln136_reg_1125) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln132_reg_1113 == 2'd1));
end

always @ (*) begin
    ap_condition_526 = ((1'd1 == and_ln136_reg_1125) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln132_reg_1113 == 2'd2));
end

always @ (*) begin
    ap_condition_529 = ((1'd1 == and_ln136_reg_1125) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln132_reg_1113 == 2'd3));
end

always @ (*) begin
    ap_condition_532 = ((1'd1 == and_ln136_reg_1125) & (ap_enable_reg_pp0_iter1 == 1'b1) & (trunc_ln132_reg_1113 == 2'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492 = 'bx;

assign b_vec_0_1_out = b_vec_1_fu_174;

assign b_vec_1_1_out = b_vec_1_1_fu_178;

assign b_vec_2_1_out = b_vec_1_2_fu_182;

assign b_vec_3_1_out = b_vec_1_4_fu_186;

assign icmp_ln128_fu_619_p2 = ((ap_sig_allocacmp_j_1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln136_1_fu_715_p2 = (($signed(tmp_1_fu_705_p4) < $signed(3'd1)) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_699_p2 = ((tmp_fu_689_p4 != 2'd1) ? 1'b1 : 1'b0);

assign sext_ln132_fu_661_p1 = sub_ln132_fu_655_p2;

assign shl_ln1_fu_675_p3 = {{sub_ln132_fu_655_p2}, {2'd0}};

assign shl_ln_fu_643_p3 = {{trunc_ln132_fu_639_p1}, {2'd0}};

assign sub_ln132_fu_655_p2 = (zext_ln125_cast_fu_567_p1 - zext_ln128_1_fu_635_p1);

assign tmp_1_fu_705_p4 = {{add_ln133_fu_683_p2[6:4]}};

assign tmp_2_fu_727_p3 = sub_ln132_fu_655_p2[32'd4];

assign tmp_4_fu_791_p17 = {{trunc_ln138_fu_779_p1}, {trunc_ln132_fu_639_p1}};

assign tmp_fu_689_p4 = {{add_ln132_fu_669_p2[5:4]}};

assign trunc_ln132_1_fu_665_p1 = sub_ln132_fu_655_p2[3:0];

assign trunc_ln132_fu_639_p1 = ap_sig_allocacmp_j_1[1:0];

assign trunc_ln138_fu_779_p1 = sub_ln132_fu_655_p2[1:0];

assign zext_ln125_cast_fu_567_p1 = zext_ln125;

assign zext_ln128_1_fu_635_p1 = ap_sig_allocacmp_j_1;

assign zext_ln128_fu_631_p1 = ap_sig_allocacmp_j_1;

assign zext_ln132_fu_651_p1 = shl_ln_fu_643_p3;

endmodule //systolic_array_systolic_array_Pipeline_VITIS_LOOP_128_5
