// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module systolic_array_systolic_array_Pipeline_VITIS_LOOP_102_1_VITIS_LOOP_103_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln102_1,
        sext_ln102,
        M2_15_1_out,
        M2_15_1_out_ap_vld,
        M2_14_1_out,
        M2_14_1_out_ap_vld,
        M2_13_1_out,
        M2_13_1_out_ap_vld,
        M2_12_1_out,
        M2_12_1_out_ap_vld,
        M2_11_1_out,
        M2_11_1_out_ap_vld,
        M2_10_1_out,
        M2_10_1_out_ap_vld,
        M2_9_1_out,
        M2_9_1_out_ap_vld,
        M2_8_1_out,
        M2_8_1_out_ap_vld,
        M2_7_1_out,
        M2_7_1_out_ap_vld,
        M2_6_1_out,
        M2_6_1_out_ap_vld,
        M2_5_1_out,
        M2_5_1_out_ap_vld,
        M2_4_1_out,
        M2_4_1_out_ap_vld,
        M2_3_1_out,
        M2_3_1_out_ap_vld,
        M2_2_1_out,
        M2_2_1_out_ap_vld,
        M2_1_1_out,
        M2_1_1_out_ap_vld,
        M2_0_1_out,
        M2_0_1_out_ap_vld,
        M1_15_1_out,
        M1_15_1_out_ap_vld,
        M1_14_1_out,
        M1_14_1_out_ap_vld,
        M1_13_1_out,
        M1_13_1_out_ap_vld,
        M1_12_1_out,
        M1_12_1_out_ap_vld,
        M1_11_1_out,
        M1_11_1_out_ap_vld,
        M1_10_1_out,
        M1_10_1_out_ap_vld,
        M1_9_1_out,
        M1_9_1_out_ap_vld,
        M1_8_1_out,
        M1_8_1_out_ap_vld,
        M1_7_1_out,
        M1_7_1_out_ap_vld,
        M1_6_1_out,
        M1_6_1_out_ap_vld,
        M1_5_1_out,
        M1_5_1_out_ap_vld,
        M1_4_1_out,
        M1_4_1_out_ap_vld,
        M1_3_1_out,
        M1_3_1_out_ap_vld,
        M1_2_1_out,
        M1_2_1_out_ap_vld,
        M1_1_1_out,
        M1_1_1_out_ap_vld,
        M1_0_1_out,
        M1_0_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln102_1;
input  [61:0] sext_ln102;
output  [31:0] M2_15_1_out;
output   M2_15_1_out_ap_vld;
output  [31:0] M2_14_1_out;
output   M2_14_1_out_ap_vld;
output  [31:0] M2_13_1_out;
output   M2_13_1_out_ap_vld;
output  [31:0] M2_12_1_out;
output   M2_12_1_out_ap_vld;
output  [31:0] M2_11_1_out;
output   M2_11_1_out_ap_vld;
output  [31:0] M2_10_1_out;
output   M2_10_1_out_ap_vld;
output  [31:0] M2_9_1_out;
output   M2_9_1_out_ap_vld;
output  [31:0] M2_8_1_out;
output   M2_8_1_out_ap_vld;
output  [31:0] M2_7_1_out;
output   M2_7_1_out_ap_vld;
output  [31:0] M2_6_1_out;
output   M2_6_1_out_ap_vld;
output  [31:0] M2_5_1_out;
output   M2_5_1_out_ap_vld;
output  [31:0] M2_4_1_out;
output   M2_4_1_out_ap_vld;
output  [31:0] M2_3_1_out;
output   M2_3_1_out_ap_vld;
output  [31:0] M2_2_1_out;
output   M2_2_1_out_ap_vld;
output  [31:0] M2_1_1_out;
output   M2_1_1_out_ap_vld;
output  [31:0] M2_0_1_out;
output   M2_0_1_out_ap_vld;
output  [31:0] M1_15_1_out;
output   M1_15_1_out_ap_vld;
output  [31:0] M1_14_1_out;
output   M1_14_1_out_ap_vld;
output  [31:0] M1_13_1_out;
output   M1_13_1_out_ap_vld;
output  [31:0] M1_12_1_out;
output   M1_12_1_out_ap_vld;
output  [31:0] M1_11_1_out;
output   M1_11_1_out_ap_vld;
output  [31:0] M1_10_1_out;
output   M1_10_1_out_ap_vld;
output  [31:0] M1_9_1_out;
output   M1_9_1_out_ap_vld;
output  [31:0] M1_8_1_out;
output   M1_8_1_out_ap_vld;
output  [31:0] M1_7_1_out;
output   M1_7_1_out_ap_vld;
output  [31:0] M1_6_1_out;
output   M1_6_1_out_ap_vld;
output  [31:0] M1_5_1_out;
output   M1_5_1_out_ap_vld;
output  [31:0] M1_4_1_out;
output   M1_4_1_out_ap_vld;
output  [31:0] M1_3_1_out;
output   M1_3_1_out_ap_vld;
output  [31:0] M1_2_1_out;
output   M1_2_1_out_ap_vld;
output  [31:0] M1_1_1_out;
output   M1_1_1_out_ap_vld;
output  [31:0] M1_0_1_out;
output   M1_0_1_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg M2_15_1_out_ap_vld;
reg M2_14_1_out_ap_vld;
reg M2_13_1_out_ap_vld;
reg M2_12_1_out_ap_vld;
reg M2_11_1_out_ap_vld;
reg M2_10_1_out_ap_vld;
reg M2_9_1_out_ap_vld;
reg M2_8_1_out_ap_vld;
reg M2_7_1_out_ap_vld;
reg M2_6_1_out_ap_vld;
reg M2_5_1_out_ap_vld;
reg M2_4_1_out_ap_vld;
reg M2_3_1_out_ap_vld;
reg M2_2_1_out_ap_vld;
reg M2_1_1_out_ap_vld;
reg M2_0_1_out_ap_vld;
reg M1_15_1_out_ap_vld;
reg M1_14_1_out_ap_vld;
reg M1_13_1_out_ap_vld;
reg M1_12_1_out_ap_vld;
reg M1_11_1_out_ap_vld;
reg M1_10_1_out_ap_vld;
reg M1_9_1_out_ap_vld;
reg M1_8_1_out_ap_vld;
reg M1_7_1_out_ap_vld;
reg M1_6_1_out_ap_vld;
reg M1_5_1_out_ap_vld;
reg M1_4_1_out_ap_vld;
reg M1_3_1_out_ap_vld;
reg M1_2_1_out_ap_vld;
reg M1_1_1_out_ap_vld;
reg M1_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln102_reg_1222;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire  signed [62:0] sext_ln102_1_cast_fu_562_p1;
reg  signed [62:0] sext_ln102_1_cast_reg_1217;
wire   [0:0] icmp_ln102_fu_584_p2;
reg   [0:0] icmp_ln102_reg_1222_pp0_iter1_reg;
reg   [0:0] icmp_ln102_reg_1222_pp0_iter2_reg;
reg   [0:0] icmp_ln102_reg_1222_pp0_iter3_reg;
wire   [4:0] add_ln102_fu_590_p2;
reg   [4:0] add_ln102_reg_1226;
wire   [2:0] select_ln102_fu_608_p3;
reg   [2:0] select_ln102_reg_1231;
wire   [2:0] select_ln102_1_fu_622_p3;
reg   [2:0] select_ln102_1_reg_1236;
wire   [62:0] zext_ln105_fu_656_p1;
reg   [62:0] zext_ln105_reg_1241;
reg   [63:0] gmem_addr_reg_1246;
wire   [3:0] add_ln105_1_fu_676_p3;
reg   [3:0] add_ln105_1_reg_1252;
reg   [3:0] add_ln105_1_reg_1252_pp0_iter1_reg;
reg   [3:0] add_ln105_1_reg_1252_pp0_iter2_reg;
reg   [3:0] add_ln105_1_reg_1252_pp0_iter3_reg;
reg   [3:0] add_ln105_1_reg_1252_pp0_iter4_reg;
reg   [63:0] gmem_addr_1_reg_1256;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] sext_ln105_fu_666_p1;
wire  signed [63:0] sext_ln106_fu_688_p1;
reg   [2:0] j_fu_158;
wire   [2:0] add_ln103_fu_698_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_162;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [4:0] indvar_flatten7_fu_166;
reg   [4:0] ap_sig_allocacmp_indvar_flatten7_load;
reg   [31:0] M1_1_fu_170;
reg   [31:0] M1_1_1_fu_174;
reg   [31:0] M1_1_2_fu_178;
reg   [31:0] M1_1_3_fu_182;
reg   [31:0] M1_1_4_fu_186;
reg   [31:0] M1_1_5_fu_190;
reg   [31:0] M1_1_6_fu_194;
reg   [31:0] M1_1_7_fu_198;
reg   [31:0] M1_1_8_fu_202;
reg   [31:0] M1_1_9_fu_206;
reg   [31:0] M1_1_10_fu_210;
reg   [31:0] M1_1_11_fu_214;
reg   [31:0] M1_1_12_fu_218;
reg   [31:0] M1_1_13_fu_222;
reg   [31:0] M1_1_14_fu_226;
reg   [31:0] M1_1_15_fu_230;
reg   [31:0] M2_1_fu_234;
reg   [31:0] M2_1_1_fu_238;
reg   [31:0] M2_1_2_fu_242;
reg   [31:0] M2_1_3_fu_246;
reg   [31:0] M2_1_4_fu_250;
reg   [31:0] M2_1_5_fu_254;
reg   [31:0] M2_1_6_fu_258;
reg   [31:0] M2_1_7_fu_262;
reg   [31:0] M2_1_8_fu_266;
reg   [31:0] M2_1_9_fu_270;
reg   [31:0] M2_1_10_fu_274;
reg   [31:0] M2_1_11_fu_278;
reg   [31:0] M2_1_12_fu_282;
reg   [31:0] M2_1_13_fu_286;
reg   [31:0] M2_1_14_fu_290;
reg   [31:0] M2_1_15_fu_294;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln103_fu_602_p2;
wire   [2:0] add_ln102_1_fu_616_p2;
wire   [1:0] trunc_ln102_fu_630_p1;
wire   [3:0] j_cast_fu_642_p1;
wire   [3:0] shl_ln104_mid2_fu_634_p3;
wire   [3:0] add_ln104_fu_650_p2;
wire  signed [62:0] sext_ln102_cast_fu_558_p1;
wire   [62:0] add_ln105_fu_660_p2;
wire   [1:0] trunc_ln104_fu_646_p1;
wire   [62:0] add_ln106_fu_684_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_162 <= 3'd0;
    end else if (((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_fu_162 <= select_ln102_1_reg_1236;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten7_fu_166 <= 5'd0;
    end else if (((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten7_fu_166 <= add_ln102_reg_1226;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_158 <= 3'd0;
    end else if (((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_fu_158 <= add_ln103_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd10 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_10_fu_210 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd11 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_11_fu_214 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd12 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_12_fu_218 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd13 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_13_fu_222 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd14 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_14_fu_226 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd15 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_15_fu_230 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd1 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_1_fu_174 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd2 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_2_fu_178 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd3 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_3_fu_182 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd4 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_4_fu_186 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd5 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_5_fu_190 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd6 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_6_fu_194 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd7 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_7_fu_198 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd8 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_8_fu_202 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd9 == add_ln105_1_reg_1252_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_9_fu_206 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (4'd0 == add_ln105_1_reg_1252_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M1_1_fu_170 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd10 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_10_fu_274 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd11 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_11_fu_278 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd12 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_12_fu_282 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd13 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_13_fu_286 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd14 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_14_fu_290 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd15 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_15_fu_294 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd1 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_1_fu_238 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd2 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_2_fu_242 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd3 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_3_fu_246 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd4 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_4_fu_250 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd5 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_5_fu_254 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd6 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_6_fu_258 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd7 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_7_fu_262 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd8 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_8_fu_266 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((4'd9 == add_ln105_1_reg_1252_pp0_iter4_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_9_fu_270 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (4'd0 == add_ln105_1_reg_1252_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_fu_234 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln102_reg_1226 <= add_ln102_fu_590_p2;
        add_ln105_1_reg_1252_pp0_iter1_reg <= add_ln105_1_reg_1252;
        add_ln105_1_reg_1252_pp0_iter2_reg <= add_ln105_1_reg_1252_pp0_iter1_reg;
        add_ln105_1_reg_1252_pp0_iter3_reg <= add_ln105_1_reg_1252_pp0_iter2_reg;
        add_ln105_1_reg_1252_pp0_iter4_reg <= add_ln105_1_reg_1252_pp0_iter3_reg;
        icmp_ln102_reg_1222 <= icmp_ln102_fu_584_p2;
        icmp_ln102_reg_1222_pp0_iter1_reg <= icmp_ln102_reg_1222;
        icmp_ln102_reg_1222_pp0_iter2_reg <= icmp_ln102_reg_1222_pp0_iter1_reg;
        icmp_ln102_reg_1222_pp0_iter3_reg <= icmp_ln102_reg_1222_pp0_iter2_reg;
        sext_ln102_1_cast_reg_1217 <= sext_ln102_1_cast_fu_562_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_584_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln105_1_reg_1252 <= add_ln105_1_fu_676_p3;
        gmem_addr_reg_1246 <= sext_ln105_fu_666_p1;
        select_ln102_1_reg_1236 <= select_ln102_1_fu_622_p3;
        select_ln102_reg_1231 <= select_ln102_fu_608_p3;
        zext_ln105_reg_1241[3 : 0] <= zext_ln105_fu_656_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_1_reg_1256 <= sext_ln106_fu_688_p1;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_0_1_out_ap_vld = 1'b1;
    end else begin
        M1_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_10_1_out_ap_vld = 1'b1;
    end else begin
        M1_10_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_11_1_out_ap_vld = 1'b1;
    end else begin
        M1_11_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_12_1_out_ap_vld = 1'b1;
    end else begin
        M1_12_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_13_1_out_ap_vld = 1'b1;
    end else begin
        M1_13_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_14_1_out_ap_vld = 1'b1;
    end else begin
        M1_14_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_15_1_out_ap_vld = 1'b1;
    end else begin
        M1_15_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_1_1_out_ap_vld = 1'b1;
    end else begin
        M1_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_2_1_out_ap_vld = 1'b1;
    end else begin
        M1_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_3_1_out_ap_vld = 1'b1;
    end else begin
        M1_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_4_1_out_ap_vld = 1'b1;
    end else begin
        M1_4_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_5_1_out_ap_vld = 1'b1;
    end else begin
        M1_5_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_6_1_out_ap_vld = 1'b1;
    end else begin
        M1_6_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_7_1_out_ap_vld = 1'b1;
    end else begin
        M1_7_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_8_1_out_ap_vld = 1'b1;
    end else begin
        M1_8_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M1_9_1_out_ap_vld = 1'b1;
    end else begin
        M1_9_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_0_1_out_ap_vld = 1'b1;
    end else begin
        M2_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_10_1_out_ap_vld = 1'b1;
    end else begin
        M2_10_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_11_1_out_ap_vld = 1'b1;
    end else begin
        M2_11_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_12_1_out_ap_vld = 1'b1;
    end else begin
        M2_12_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_13_1_out_ap_vld = 1'b1;
    end else begin
        M2_13_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_14_1_out_ap_vld = 1'b1;
    end else begin
        M2_14_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_15_1_out_ap_vld = 1'b1;
    end else begin
        M2_15_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_1_1_out_ap_vld = 1'b1;
    end else begin
        M2_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_2_1_out_ap_vld = 1'b1;
    end else begin
        M2_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_3_1_out_ap_vld = 1'b1;
    end else begin
        M2_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_4_1_out_ap_vld = 1'b1;
    end else begin
        M2_4_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_5_1_out_ap_vld = 1'b1;
    end else begin
        M2_5_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_6_1_out_ap_vld = 1'b1;
    end else begin
        M2_6_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_7_1_out_ap_vld = 1'b1;
    end else begin
        M2_7_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_8_1_out_ap_vld = 1'b1;
    end else begin
        M2_8_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        M2_9_1_out_ap_vld = 1'b1;
    end else begin
        M2_9_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_1222 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_162;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten7_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten7_load = indvar_flatten7_fu_166;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_158;
    end
end

always @ (*) begin
    if ((((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_1256;
    end else if (((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1246;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln102_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M1_0_1_out = M1_1_fu_170;

assign M1_10_1_out = M1_1_10_fu_210;

assign M1_11_1_out = M1_1_11_fu_214;

assign M1_12_1_out = M1_1_12_fu_218;

assign M1_13_1_out = M1_1_13_fu_222;

assign M1_14_1_out = M1_1_14_fu_226;

assign M1_15_1_out = M1_1_15_fu_230;

assign M1_1_1_out = M1_1_1_fu_174;

assign M1_2_1_out = M1_1_2_fu_178;

assign M1_3_1_out = M1_1_3_fu_182;

assign M1_4_1_out = M1_1_4_fu_186;

assign M1_5_1_out = M1_1_5_fu_190;

assign M1_6_1_out = M1_1_6_fu_194;

assign M1_7_1_out = M1_1_7_fu_198;

assign M1_8_1_out = M1_1_8_fu_202;

assign M1_9_1_out = M1_1_9_fu_206;

assign M2_0_1_out = M2_1_fu_234;

assign M2_10_1_out = M2_1_10_fu_274;

assign M2_11_1_out = M2_1_11_fu_278;

assign M2_12_1_out = M2_1_12_fu_282;

assign M2_13_1_out = M2_1_13_fu_286;

assign M2_14_1_out = M2_1_14_fu_290;

assign M2_15_1_out = M2_1_15_fu_294;

assign M2_1_1_out = M2_1_1_fu_238;

assign M2_2_1_out = M2_1_2_fu_242;

assign M2_3_1_out = M2_1_3_fu_246;

assign M2_4_1_out = M2_1_4_fu_250;

assign M2_5_1_out = M2_1_5_fu_254;

assign M2_6_1_out = M2_1_6_fu_258;

assign M2_7_1_out = M2_1_7_fu_262;

assign M2_8_1_out = M2_1_8_fu_266;

assign M2_9_1_out = M2_1_9_fu_270;

assign add_ln102_1_fu_616_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln102_fu_590_p2 = (ap_sig_allocacmp_indvar_flatten7_load + 5'd1);

assign add_ln103_fu_698_p2 = (select_ln102_reg_1231 + 3'd1);

assign add_ln104_fu_650_p2 = (j_cast_fu_642_p1 + shl_ln104_mid2_fu_634_p3);

assign add_ln105_1_fu_676_p3 = {{trunc_ln102_fu_630_p1}, {trunc_ln104_fu_646_p1}};

assign add_ln105_fu_660_p2 = ($signed(zext_ln105_fu_656_p1) + $signed(sext_ln102_cast_fu_558_p1));

assign add_ln106_fu_684_p2 = ($signed(zext_ln105_reg_1241) + $signed(sext_ln102_1_cast_reg_1217));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((icmp_ln102_reg_1222 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln102_fu_584_p2 = ((ap_sig_allocacmp_indvar_flatten7_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_602_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign j_cast_fu_642_p1 = select_ln102_fu_608_p3;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign select_ln102_1_fu_622_p3 = ((icmp_ln103_fu_602_p2[0:0] == 1'b1) ? add_ln102_1_fu_616_p2 : ap_sig_allocacmp_i_load);

assign select_ln102_fu_608_p3 = ((icmp_ln103_fu_602_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign sext_ln102_1_cast_fu_562_p1 = $signed(sext_ln102_1);

assign sext_ln102_cast_fu_558_p1 = $signed(sext_ln102);

assign sext_ln105_fu_666_p1 = $signed(add_ln105_fu_660_p2);

assign sext_ln106_fu_688_p1 = $signed(add_ln106_fu_684_p2);

assign shl_ln104_mid2_fu_634_p3 = {{trunc_ln102_fu_630_p1}, {2'd0}};

assign trunc_ln102_fu_630_p1 = select_ln102_1_fu_622_p3[1:0];

assign trunc_ln104_fu_646_p1 = select_ln102_fu_608_p3[1:0];

assign zext_ln105_fu_656_p1 = add_ln104_fu_650_p2;

always @ (posedge ap_clk) begin
    zext_ln105_reg_1241[62:4] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //systolic_array_systolic_array_Pipeline_VITIS_LOOP_102_1_VITIS_LOOP_103_2
