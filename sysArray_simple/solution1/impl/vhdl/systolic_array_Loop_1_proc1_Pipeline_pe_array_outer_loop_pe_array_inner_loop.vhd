-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array_Loop_1_proc1_Pipeline_pe_array_outer_loop_pe_array_inner_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_vec_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_vec_ce0 : OUT STD_LOGIC;
    a_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_b_pass_ce0 : OUT STD_LOGIC;
    pe_array_pe_b_pass_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_b_pass_ce1 : OUT STD_LOGIC;
    pe_array_pe_b_pass_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_val_ce0 : OUT STD_LOGIC;
    pe_array_pe_val_we0 : OUT STD_LOGIC;
    pe_array_pe_val_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_val_ce1 : OUT STD_LOGIC;
    pe_array_pe_val_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_tmp_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_a_tmp_ce0 : OUT STD_LOGIC;
    pe_array_pe_a_tmp_we0 : OUT STD_LOGIC;
    pe_array_pe_a_tmp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_tmp_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_b_tmp_ce0 : OUT STD_LOGIC;
    pe_array_pe_b_tmp_we0 : OUT STD_LOGIC;
    pe_array_pe_b_tmp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_vec_ce0 : OUT STD_LOGIC;
    b_vec_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pe_array_pe_a_pass_ce0 : OUT STD_LOGIC;
    pe_array_pe_a_pass_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_vec_load : IN STD_LOGIC_VECTOR (31 downto 0);
    b_vec_load : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of systolic_array_Loop_1_proc1_Pipeline_pe_array_outer_loop_pe_array_inner_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln51_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln74_1_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_1_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal this_val_reg_606 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_1_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln57_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln57_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln51_1_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln62_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_62 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_fu_487_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_fu_66 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_2_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten9_fu_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten9_load : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_1_fu_244_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal opa_4_fu_514_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal opb_5_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_fu_214_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln53_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_fu_253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln51_1_fu_273_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln74_fu_293_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp3_i_mid1_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp3_i_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_4_fu_333_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_230_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_5_fu_354_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln51_fu_265_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_cast_fu_297_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln74_fu_372_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln74_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_cast_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_fu_387_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln53_fu_398_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_fu_277_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln57_fu_408_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln62_fu_420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_fu_430_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_3_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln57_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln63_fu_426_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_436_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal opa_3_fu_456_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp6_demorgan_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal opa_1_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal opb_2_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal opb_3_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component systolic_array_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U18 : component systolic_array_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => opb_5_fu_535_p3,
        din1 => opa_4_fu_514_p3,
        dout => mul_ln21_fu_543_p2);

    flow_control_loop_pipe_sequential_init_U : component systolic_array_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_66 <= select_ln51_2_fu_285_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_66 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten9_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten9_fu_70 <= add_ln51_1_fu_244_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten9_fu_70 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_1_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_1_fu_62 <= add_ln53_fu_487_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_1_fu_62 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_238_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln57_reg_638 <= and_ln57_fu_481_p2;
                icmp_ln57_1_reg_617 <= icmp_ln57_1_fu_414_p2;
                sel_tmp1_reg_628 <= sel_tmp1_fu_450_p2;
                this_val_reg_606 <= zext_ln74_1_fu_382_p1(4 - 1 downto 0);
                    zext_ln74_1_reg_600(3 downto 0) <= zext_ln74_1_fu_382_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln74_1_reg_600(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_vec_address0 <= zext_ln51_fu_349_p1(2 - 1 downto 0);

    a_vec_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_vec_ce0 <= ap_const_logic_1;
        else 
            a_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln51_1_fu_244_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten9_load) + unsigned(ap_const_lv5_1));
    add_ln51_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    add_ln53_fu_487_p2 <= std_logic_vector(unsigned(select_ln51_fu_265_p3) + unsigned(ap_const_lv3_1));
    add_ln62_fu_420_p2 <= std_logic_vector(unsigned(select_ln51_fu_265_p3) + unsigned(ap_const_lv3_7));
    add_ln70_fu_430_p2 <= std_logic_vector(unsigned(trunc_ln53_fu_398_p1) + unsigned(ap_const_lv2_3));
    add_ln71_fu_387_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_341_p3) + unsigned(zext_ln74_fu_372_p1));
    add_ln74_fu_376_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_297_p3) + unsigned(zext_ln74_fu_372_p1));
    and_ln57_fu_481_p2 <= (sel_tmp6_fu_475_p2 and icmp_ln57_fu_402_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln51_fu_238_p2)
    begin
        if (((icmp_ln51_fu_238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten9_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten9_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten9_load <= indvar_flatten9_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_1_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_1_load <= j_1_fu_62;
        end if; 
    end process;

    b_vec_address0 <= zext_ln53_fu_367_p1(2 - 1 downto 0);

    b_vec_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_vec_ce0 <= ap_const_logic_1;
        else 
            b_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp3_i_fu_218_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_0) else "0";
    cmp3_i_mid1_fu_305_p2 <= "1" when (add_ln51_fu_253_p2 = ap_const_lv3_0) else "0";
    empty_fu_224_p2 <= std_logic_vector(unsigned(trunc_ln51_fu_214_p1) + unsigned(ap_const_lv2_3));
    icmp_ln51_fu_238_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten9_load = ap_const_lv5_10) else "0";
    icmp_ln53_fu_259_p2 <= "1" when (ap_sig_allocacmp_j_1_load = ap_const_lv3_4) else "0";
    icmp_ln57_1_fu_414_p2 <= "1" when (or_ln57_fu_408_p2 = ap_const_lv2_0) else "0";
    icmp_ln57_fu_402_p2 <= "1" when (select_ln51_fu_265_p3 = ap_const_lv3_0) else "0";
    opa_1_fu_508_p3 <= 
        a_vec_load when (icmp_ln57_1_reg_617(0) = '1') else 
        pe_array_pe_a_pass_q0;
    opa_3_fu_456_p3 <= 
        sext_ln63_fu_426_p1 when (sel_tmp1_fu_450_p2(0) = '1') else 
        tmp_13_cast_fu_436_p3;
    opa_4_fu_514_p3 <= 
        a_vec_q0 when (and_ln57_reg_638(0) = '1') else 
        opa_1_fu_508_p3;
    opb_2_fu_522_p3 <= 
        b_vec_q0 when (sel_tmp1_reg_628(0) = '1') else 
        pe_array_pe_b_pass_q0;
    opb_3_fu_529_p3 <= 
        b_vec_load when (icmp_ln57_1_reg_617(0) = '1') else 
        opb_2_fu_522_p3;
    opb_5_fu_535_p3 <= 
        pe_array_pe_b_pass_q1 when (and_ln57_reg_638(0) = '1') else 
        opb_3_fu_529_p3;
    or_ln57_fu_408_p2 <= (trunc_ln53_fu_398_p1 or select_ln51_1_fu_277_p3);
    p_mid1_fu_319_p2 <= std_logic_vector(unsigned(trunc_ln51_1_fu_273_p1) + unsigned(ap_const_lv2_3));
    pe_array_pe_a_pass_address0 <= zext_ln62_fu_464_p1(4 - 1 downto 0);

    pe_array_pe_a_pass_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_a_pass_ce0 <= ap_const_logic_1;
        else 
            pe_array_pe_a_pass_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_a_tmp_address0 <= zext_ln74_1_reg_600(4 - 1 downto 0);

    pe_array_pe_a_tmp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_a_tmp_ce0 <= ap_const_logic_1;
        else 
            pe_array_pe_a_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_a_tmp_d0 <= opa_4_fu_514_p3;

    pe_array_pe_a_tmp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_a_tmp_we0 <= ap_const_logic_1;
        else 
            pe_array_pe_a_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_b_pass_address0 <= zext_ln71_fu_393_p1(4 - 1 downto 0);
    pe_array_pe_b_pass_address1 <= zext_ln51_1_fu_362_p1(4 - 1 downto 0);

    pe_array_pe_b_pass_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_b_pass_ce0 <= ap_const_logic_1;
        else 
            pe_array_pe_b_pass_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pe_array_pe_b_pass_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_b_pass_ce1 <= ap_const_logic_1;
        else 
            pe_array_pe_b_pass_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_b_tmp_address0 <= zext_ln74_1_reg_600(4 - 1 downto 0);

    pe_array_pe_b_tmp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_b_tmp_ce0 <= ap_const_logic_1;
        else 
            pe_array_pe_b_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_b_tmp_d0 <= opb_5_fu_535_p3;

    pe_array_pe_b_tmp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_b_tmp_we0 <= ap_const_logic_1;
        else 
            pe_array_pe_b_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_val_address0 <= this_val_reg_606;
    pe_array_pe_val_address1 <= zext_ln74_1_fu_382_p1(4 - 1 downto 0);

    pe_array_pe_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_val_ce0 <= ap_const_logic_1;
        else 
            pe_array_pe_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pe_array_pe_val_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_val_ce1 <= ap_const_logic_1;
        else 
            pe_array_pe_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pe_array_pe_val_d0 <= std_logic_vector(unsigned(pe_array_pe_val_q1) + unsigned(mul_ln21_fu_543_p2));

    pe_array_pe_val_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pe_array_pe_val_we0 <= ap_const_logic_1;
        else 
            pe_array_pe_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_450_p2 <= (xor_ln57_fu_444_p2 and select_ln51_3_fu_311_p3);
    sel_tmp6_demorgan_fu_469_p2 <= (select_ln51_3_fu_311_p3 or icmp_ln57_1_fu_414_p2);
    sel_tmp6_fu_475_p2 <= (sel_tmp6_demorgan_fu_469_p2 xor ap_const_lv1_1);
    select_ln51_1_fu_277_p3 <= 
        trunc_ln51_1_fu_273_p1 when (icmp_ln53_fu_259_p2(0) = '1') else 
        trunc_ln51_fu_214_p1;
    select_ln51_2_fu_285_p3 <= 
        add_ln51_fu_253_p2 when (icmp_ln53_fu_259_p2(0) = '1') else 
        ap_sig_allocacmp_i;
    select_ln51_3_fu_311_p3 <= 
        cmp3_i_mid1_fu_305_p2 when (icmp_ln53_fu_259_p2(0) = '1') else 
        cmp3_i_fu_218_p2;
    select_ln51_4_fu_333_p3 <= 
        p_mid1_fu_319_p2 when (icmp_ln53_fu_259_p2(0) = '1') else 
        empty_fu_224_p2;
    select_ln51_5_fu_354_p3 <= 
        tmp_s_fu_325_p3 when (icmp_ln53_fu_259_p2(0) = '1') else 
        tmp_9_fu_230_p3;
    select_ln51_fu_265_p3 <= 
        ap_const_lv3_0 when (icmp_ln53_fu_259_p2(0) = '1') else 
        ap_sig_allocacmp_j_1_load;
        sext_ln63_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln62_fu_420_p2),4));

    tmp_10_cast_fu_297_p3 <= (trunc_ln74_fu_293_p1 & ap_const_lv2_0);
    tmp_12_cast_fu_341_p3 <= (select_ln51_4_fu_333_p3 & ap_const_lv2_0);
    tmp_13_cast_fu_436_p3 <= (trunc_ln74_fu_293_p1 & add_ln70_fu_430_p2);
    tmp_9_fu_230_p3 <= (empty_fu_224_p2 & ap_const_lv2_0);
    tmp_s_fu_325_p3 <= (p_mid1_fu_319_p2 & ap_const_lv2_0);
    trunc_ln51_1_fu_273_p1 <= add_ln51_fu_253_p2(2 - 1 downto 0);
    trunc_ln51_fu_214_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    trunc_ln53_fu_398_p1 <= select_ln51_fu_265_p3(2 - 1 downto 0);
    trunc_ln74_fu_293_p1 <= select_ln51_2_fu_285_p3(2 - 1 downto 0);
    xor_ln57_fu_444_p2 <= (icmp_ln57_1_fu_414_p2 xor ap_const_lv1_1);
    zext_ln51_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_5_fu_354_p3),64));
    zext_ln51_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_2_fu_285_p3),64));
    zext_ln53_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_265_p3),64));
    zext_ln62_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(opa_3_fu_456_p3),64));
    zext_ln71_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_fu_387_p2),64));
    zext_ln74_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_376_p2),64));
    zext_ln74_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_265_p3),4));
end behav;
