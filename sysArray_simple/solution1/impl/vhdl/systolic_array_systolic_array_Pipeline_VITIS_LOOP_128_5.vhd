-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array_systolic_array_Pipeline_VITIS_LOOP_128_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_vec_3_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_vec_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_vec_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_vec_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_vec_3_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_vec_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_vec_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_vec_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_3_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_4_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_5_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_6_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_7_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_8_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_9_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_10_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_11_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_12_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_13_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_14_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_15_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_3_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_4_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_5_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_6_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_7_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_8_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_9_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_10_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_11_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_12_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_13_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_14_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_15_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln125 : IN STD_LOGIC_VECTOR (3 downto 0);
    b_vec_3_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_3_1_out_ap_vld : OUT STD_LOGIC;
    b_vec_2_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_2_1_out_ap_vld : OUT STD_LOGIC;
    b_vec_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_1_1_out_ap_vld : OUT STD_LOGIC;
    b_vec_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_0_1_out_ap_vld : OUT STD_LOGIC;
    a_vec_3_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_vec_3_1_out_ap_vld : OUT STD_LOGIC;
    a_vec_2_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_vec_2_1_out_ap_vld : OUT STD_LOGIC;
    a_vec_1_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_vec_1_1_out_ap_vld : OUT STD_LOGIC;
    a_vec_0_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_vec_0_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of systolic_array_systolic_array_Pipeline_VITIS_LOOP_128_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln128_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln128_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln132_fu_639_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln132_reg_1113 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln136_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln136_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_vec_1_7_fu_741_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_vec_1_7_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_791_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln128_fu_625_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_vec_1_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_515_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_vec_1_1_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_528_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_vec_1_2_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_541_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_vec_1_4_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_554_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_0_3_fu_846_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_1_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_3_fu_859_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_2_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_2_3_fu_872_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_4_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_3_3_fu_885_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_643_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln125_cast_fu_567_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln128_1_fu_635_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln132_fu_655_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln132_fu_651_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln132_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_fu_675_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln128_fu_631_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln132_fu_669_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_689_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_683_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_705_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln136_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln132_1_fu_665_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_vec_1_7_fu_741_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln138_fu_779_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_791_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_124 : BOOLEAN;
    signal ap_condition_139 : BOOLEAN;
    signal ap_condition_133 : BOOLEAN;
    signal ap_condition_523 : BOOLEAN;
    signal ap_condition_526 : BOOLEAN;
    signal ap_condition_529 : BOOLEAN;
    signal ap_condition_532 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component systolic_array_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U406 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => a_vec_1_fu_158,
        din2 => a_vec_1_fu_158,
        din3 => a_vec_1_fu_158,
        din4 => trunc_ln132_reg_1113,
        dout => grp_fu_515_p6);

    mux_42_32_1_1_U407 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => a_vec_1_1_fu_162,
        din1 => ap_const_lv32_0,
        din2 => a_vec_1_1_fu_162,
        din3 => a_vec_1_1_fu_162,
        din4 => trunc_ln132_reg_1113,
        dout => grp_fu_528_p6);

    mux_42_32_1_1_U408 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => a_vec_1_2_fu_166,
        din1 => a_vec_1_2_fu_166,
        din2 => ap_const_lv32_0,
        din3 => a_vec_1_2_fu_166,
        din4 => trunc_ln132_reg_1113,
        dout => grp_fu_541_p6);

    mux_42_32_1_1_U409 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => a_vec_1_4_fu_170,
        din1 => a_vec_1_4_fu_170,
        din2 => a_vec_1_4_fu_170,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln132_reg_1113,
        dout => grp_fu_554_p6);

    mux_164_32_1_1_U410 : component systolic_array_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => M1_0_1_reload,
        din1 => M1_1_1_reload,
        din2 => M1_2_1_reload,
        din3 => M1_3_1_reload,
        din4 => M1_4_1_reload,
        din5 => M1_5_1_reload,
        din6 => M1_6_1_reload,
        din7 => M1_7_1_reload,
        din8 => M1_8_1_reload,
        din9 => M1_9_1_reload,
        din10 => M1_10_1_reload,
        din11 => M1_11_1_reload,
        din12 => M1_12_1_reload,
        din13 => M1_13_1_reload,
        din14 => M1_14_1_reload,
        din15 => M1_15_1_reload,
        din16 => a_vec_1_7_fu_741_p17,
        dout => a_vec_1_7_fu_741_p18);

    mux_164_32_1_1_U411 : component systolic_array_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => M2_0_1_reload,
        din1 => M2_1_1_reload,
        din2 => M2_2_1_reload,
        din3 => M2_3_1_reload,
        din4 => M2_4_1_reload,
        din5 => M2_5_1_reload,
        din6 => M2_6_1_reload,
        din7 => M2_7_1_reload,
        din8 => M2_8_1_reload,
        din9 => M2_9_1_reload,
        din10 => M2_10_1_reload,
        din11 => M2_11_1_reload,
        din12 => M2_12_1_reload,
        din13 => M2_13_1_reload,
        din14 => M2_14_1_reload,
        din15 => M2_15_1_reload,
        din16 => tmp_4_fu_791_p17,
        dout => tmp_4_fu_791_p18);

    mux_42_32_1_1_U412 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => b_vec_1_fu_174,
        din2 => b_vec_1_fu_174,
        din3 => b_vec_1_fu_174,
        din4 => trunc_ln132_reg_1113,
        dout => b_vec_0_3_fu_846_p6);

    mux_42_32_1_1_U413 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => b_vec_1_1_fu_178,
        din1 => ap_const_lv32_0,
        din2 => b_vec_1_1_fu_178,
        din3 => b_vec_1_1_fu_178,
        din4 => trunc_ln132_reg_1113,
        dout => b_vec_1_3_fu_859_p6);

    mux_42_32_1_1_U414 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => b_vec_1_2_fu_182,
        din1 => b_vec_1_2_fu_182,
        din2 => ap_const_lv32_0,
        din3 => b_vec_1_2_fu_182,
        din4 => trunc_ln132_reg_1113,
        dout => b_vec_2_3_fu_872_p6);

    mux_42_32_1_1_U415 : component systolic_array_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => b_vec_1_4_fu_186,
        din1 => b_vec_1_4_fu_186,
        din2 => b_vec_1_4_fu_186,
        din3 => ap_const_lv32_0,
        din4 => trunc_ln132_reg_1113,
        dout => b_vec_3_3_fu_885_p6);

    flow_control_loop_pipe_sequential_init_U : component systolic_array_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    a_vec_1_1_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_vec_1_1_fu_162 <= a_vec_1_0;
            elsif (((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_0) and (trunc_ln132_reg_1113 = ap_const_lv2_1))) then 
                a_vec_1_1_fu_162 <= a_vec_1_7_reg_1133;
            elsif ((((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_1) and (icmp_ln128_reg_1109 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln136_reg_1125)))) then 
                a_vec_1_1_fu_162 <= grp_fu_528_p6;
            end if; 
        end if;
    end process;

    a_vec_1_2_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_vec_1_2_fu_166 <= a_vec_2_0;
            elsif (((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_0) and (trunc_ln132_reg_1113 = ap_const_lv2_2))) then 
                a_vec_1_2_fu_166 <= a_vec_1_7_reg_1133;
            elsif ((((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_1) and (icmp_ln128_reg_1109 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln136_reg_1125)))) then 
                a_vec_1_2_fu_166 <= grp_fu_541_p6;
            end if; 
        end if;
    end process;

    a_vec_1_4_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_vec_1_4_fu_170 <= a_vec_3_0;
            elsif (((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_0) and (trunc_ln132_reg_1113 = ap_const_lv2_3))) then 
                a_vec_1_4_fu_170 <= a_vec_1_7_reg_1133;
            elsif ((((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_1) and (icmp_ln128_reg_1109 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln136_reg_1125)))) then 
                a_vec_1_4_fu_170 <= grp_fu_554_p6;
            end if; 
        end if;
    end process;

    a_vec_1_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                a_vec_1_fu_158 <= a_vec_0_0;
            elsif (((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_0) and (trunc_ln132_reg_1113 = ap_const_lv2_0))) then 
                a_vec_1_fu_158 <= a_vec_1_7_reg_1133;
            elsif ((((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_1129 = ap_const_lv1_1) and (icmp_ln128_reg_1109 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln136_reg_1125)))) then 
                a_vec_1_fu_158 <= grp_fu_515_p6;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if ((ap_const_boolean_1 = ap_condition_139)) then 
                    ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_124)) then 
                    ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= tmp_4_fu_791_p18;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492 <= ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492;
                end if;
            end if; 
        end if;
    end process;

    b_vec_1_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_vec_1_1_fu_178 <= b_vec_1_0;
                elsif ((ap_const_boolean_1 = ap_condition_523)) then 
                    b_vec_1_1_fu_178 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln136_reg_1125))) then 
                    b_vec_1_1_fu_178 <= b_vec_1_3_fu_859_p6;
                end if;
            end if; 
        end if;
    end process;

    b_vec_1_2_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_vec_1_2_fu_182 <= b_vec_2_0;
                elsif ((ap_const_boolean_1 = ap_condition_526)) then 
                    b_vec_1_2_fu_182 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln136_reg_1125))) then 
                    b_vec_1_2_fu_182 <= b_vec_2_3_fu_872_p6;
                end if;
            end if; 
        end if;
    end process;

    b_vec_1_4_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_vec_1_4_fu_186 <= b_vec_3_0;
                elsif ((ap_const_boolean_1 = ap_condition_529)) then 
                    b_vec_1_4_fu_186 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln136_reg_1125))) then 
                    b_vec_1_4_fu_186 <= b_vec_3_3_fu_885_p6;
                end if;
            end if; 
        end if;
    end process;

    b_vec_1_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_vec_1_fu_174 <= b_vec_0_0;
                elsif ((ap_const_boolean_1 = ap_condition_532)) then 
                    b_vec_1_fu_174 <= ap_phi_reg_pp0_iter1_b_vec_1_6_reg_492;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln136_reg_1125))) then 
                    b_vec_1_fu_174 <= b_vec_0_3_fu_846_p6;
                end if;
            end if; 
        end if;
    end process;

    j_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_154 <= add_ln128_fu_625_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_154 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln136_fu_721_p2) and (icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_fu_727_p3 = ap_const_lv1_0))) then
                a_vec_1_7_reg_1133 <= a_vec_1_7_fu_741_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln136_reg_1125 <= and_ln136_fu_721_p2;
                trunc_ln132_reg_1113 <= trunc_ln132_fu_639_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln128_reg_1109 <= icmp_ln128_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln136_fu_721_p2) and (icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_1129 <= sub_ln132_fu_655_p2(4 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_vec_0_1_out <= a_vec_1_fu_158;

    a_vec_0_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_vec_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            a_vec_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_vec_1_1_out <= a_vec_1_1_fu_162;

    a_vec_1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_vec_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            a_vec_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_vec_1_7_fu_741_p17 <= std_logic_vector(unsigned(shl_ln_fu_643_p3) + unsigned(trunc_ln132_1_fu_665_p1));
    a_vec_2_1_out <= a_vec_1_2_fu_166;

    a_vec_2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_vec_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            a_vec_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_vec_3_1_out <= a_vec_1_4_fu_170;

    a_vec_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_vec_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            a_vec_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln128_fu_625_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv3_1));
    add_ln132_fu_669_p2 <= std_logic_vector(unsigned(zext_ln132_fu_651_p1) + unsigned(sext_ln132_fu_661_p1));
    add_ln133_fu_683_p2 <= std_logic_vector(unsigned(shl_ln1_fu_675_p3) + unsigned(zext_ln128_fu_631_p1));
    and_ln136_fu_721_p2 <= (icmp_ln136_fu_699_p2 and icmp_ln136_1_fu_715_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_124_assign_proc : process(icmp_ln128_fu_619_p2, and_ln136_fu_721_p2, tmp_2_fu_727_p3)
    begin
                ap_condition_124 <= ((ap_const_lv1_1 = and_ln136_fu_721_p2) and (icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (tmp_2_fu_727_p3 = ap_const_lv1_0));
    end process;


    ap_condition_133_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_133 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_139_assign_proc : process(icmp_ln128_fu_619_p2, and_ln136_fu_721_p2, tmp_2_fu_727_p3)
    begin
                ap_condition_139 <= ((ap_const_lv1_1 = and_ln136_fu_721_p2) and (icmp_ln128_fu_619_p2 = ap_const_lv1_0) and (tmp_2_fu_727_p3 = ap_const_lv1_1));
    end process;


    ap_condition_523_assign_proc : process(ap_enable_reg_pp0_iter1, trunc_ln132_reg_1113, and_ln136_reg_1125)
    begin
                ap_condition_523 <= ((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln132_reg_1113 = ap_const_lv2_1));
    end process;


    ap_condition_526_assign_proc : process(ap_enable_reg_pp0_iter1, trunc_ln132_reg_1113, and_ln136_reg_1125)
    begin
                ap_condition_526 <= ((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln132_reg_1113 = ap_const_lv2_2));
    end process;


    ap_condition_529_assign_proc : process(ap_enable_reg_pp0_iter1, trunc_ln132_reg_1113, and_ln136_reg_1125)
    begin
                ap_condition_529 <= ((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln132_reg_1113 = ap_const_lv2_3));
    end process;


    ap_condition_532_assign_proc : process(ap_enable_reg_pp0_iter1, trunc_ln132_reg_1113, and_ln136_reg_1125)
    begin
                ap_condition_532 <= ((ap_const_lv1_1 = and_ln136_reg_1125) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln132_reg_1113 = ap_const_lv2_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln128_fu_619_p2)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_b_vec_1_6_reg_492 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, j_fu_154, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_154;
        end if; 
    end process;

    b_vec_0_1_out <= b_vec_1_fu_174;

    b_vec_0_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_vec_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            b_vec_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_vec_1_1_out <= b_vec_1_1_fu_178;

    b_vec_1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_vec_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            b_vec_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_vec_2_1_out <= b_vec_1_2_fu_182;

    b_vec_2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_vec_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            b_vec_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_vec_3_1_out <= b_vec_1_4_fu_186;

    b_vec_3_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln128_fu_619_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln128_fu_619_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_vec_3_1_out_ap_vld <= ap_const_logic_1;
        else 
            b_vec_3_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln128_fu_619_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv3_4) else "0";
    icmp_ln136_1_fu_715_p2 <= "1" when (signed(tmp_1_fu_705_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln136_fu_699_p2 <= "0" when (tmp_fu_689_p4 = ap_const_lv2_1) else "1";
        sext_ln132_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln132_fu_655_p2),6));

    shl_ln1_fu_675_p3 <= (sub_ln132_fu_655_p2 & ap_const_lv2_0);
    shl_ln_fu_643_p3 <= (trunc_ln132_fu_639_p1 & ap_const_lv2_0);
    sub_ln132_fu_655_p2 <= std_logic_vector(unsigned(zext_ln125_cast_fu_567_p1) - unsigned(zext_ln128_1_fu_635_p1));
    tmp_1_fu_705_p4 <= add_ln133_fu_683_p2(6 downto 4);
    tmp_2_fu_727_p3 <= sub_ln132_fu_655_p2(4 downto 4);
    tmp_4_fu_791_p17 <= (trunc_ln138_fu_779_p1 & trunc_ln132_fu_639_p1);
    tmp_fu_689_p4 <= add_ln132_fu_669_p2(5 downto 4);
    trunc_ln132_1_fu_665_p1 <= sub_ln132_fu_655_p2(4 - 1 downto 0);
    trunc_ln132_fu_639_p1 <= ap_sig_allocacmp_j_1(2 - 1 downto 0);
    trunc_ln138_fu_779_p1 <= sub_ln132_fu_655_p2(2 - 1 downto 0);
    zext_ln125_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln125),5));
    zext_ln128_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),5));
    zext_ln128_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),7));
    zext_ln132_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_643_p3),6));
end behav;
