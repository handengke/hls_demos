-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array_Loop_1_proc1_Pipeline_top_inner_loop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    b_vec_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_vec_ce0 : OUT STD_LOGIC;
    b_vec_we0 : OUT STD_LOGIC;
    b_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_vec_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_vec_ce1 : OUT STD_LOGIC;
    b_vec_we1 : OUT STD_LOGIC;
    b_vec_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    din_a : IN STD_LOGIC_VECTOR (63 downto 0);
    din_b : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln106 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_vec_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_vec_ce0 : OUT STD_LOGIC;
    a_vec_we0 : OUT STD_LOGIC;
    a_vec_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of systolic_array_Loop_1_proc1_Pipeline_top_inner_loop1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal icmp_ln108_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op63_readreq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal icmp_ln108_reg_405_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_419_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_428_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op85_read_state10 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln108_reg_405_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_419_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op71_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op82_read_state9 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln108_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_405_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_405_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast6_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast6_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast6_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast6_reg_409_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast6_reg_409_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast6_reg_409_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln112_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln112_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln115_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln115_reg_419_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal a_vec_addr_reg_423 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_vec_addr_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal a_vec_addr_reg_423_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal a_vec_addr_reg_423_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal a_vec_addr_reg_423_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_432 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_438 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmem_addr_read_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_read_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_cond15_phi_fu_180_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln116_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln117_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_90 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln108_fu_206_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln111_fu_226_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_230_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln106_cast_fu_188_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast1_fu_212_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln111_fu_242_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln111_fu_248_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln111_fu_238_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_fu_258_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast3_fu_216_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln111_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_272_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_288_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln115_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln116_fu_318_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln116_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln116_fu_328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_334_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln117_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln117_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln117_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_373_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component systolic_array_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component systolic_array_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    j_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_90 <= add_ln108_fu_206_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_90 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_vec_addr_reg_423 <= j_cast6_fu_220_p1(2 - 1 downto 0);
                add_ln112_reg_414 <= add_ln112_fu_266_p2;
                and_ln115_reg_419 <= and_ln115_fu_304_p2;
                    j_cast6_reg_409(2 downto 0) <= j_cast6_fu_220_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_vec_addr_reg_423_pp0_iter1_reg <= a_vec_addr_reg_423;
                a_vec_addr_reg_423_pp0_iter2_reg <= a_vec_addr_reg_423_pp0_iter1_reg;
                a_vec_addr_reg_423_pp0_iter3_reg <= a_vec_addr_reg_423_pp0_iter2_reg;
                a_vec_addr_reg_423_pp0_iter4_reg <= a_vec_addr_reg_423_pp0_iter3_reg;
                and_ln115_reg_419_pp0_iter1_reg <= and_ln115_reg_419;
                and_ln115_reg_419_pp0_iter2_reg <= and_ln115_reg_419_pp0_iter1_reg;
                and_ln115_reg_419_pp0_iter3_reg <= and_ln115_reg_419_pp0_iter2_reg;
                and_ln115_reg_419_pp0_iter4_reg <= and_ln115_reg_419_pp0_iter3_reg;
                icmp_ln108_reg_405 <= icmp_ln108_fu_200_p2;
                icmp_ln108_reg_405_pp0_iter1_reg <= icmp_ln108_reg_405;
                icmp_ln108_reg_405_pp0_iter2_reg <= icmp_ln108_reg_405_pp0_iter1_reg;
                icmp_ln108_reg_405_pp0_iter3_reg <= icmp_ln108_reg_405_pp0_iter2_reg;
                icmp_ln108_reg_405_pp0_iter4_reg <= icmp_ln108_reg_405_pp0_iter3_reg;
                    j_cast6_reg_409_pp0_iter1_reg(2 downto 0) <= j_cast6_reg_409(2 downto 0);
                    j_cast6_reg_409_pp0_iter2_reg(2 downto 0) <= j_cast6_reg_409_pp0_iter1_reg(2 downto 0);
                    j_cast6_reg_409_pp0_iter3_reg(2 downto 0) <= j_cast6_reg_409_pp0_iter2_reg(2 downto 0);
                    j_cast6_reg_409_pp0_iter4_reg(2 downto 0) <= j_cast6_reg_409_pp0_iter3_reg(2 downto 0);
                tmp_2_reg_428_pp0_iter1_reg <= tmp_2_reg_428;
                tmp_2_reg_428_pp0_iter2_reg <= tmp_2_reg_428_pp0_iter1_reg;
                tmp_2_reg_428_pp0_iter3_reg <= tmp_2_reg_428_pp0_iter2_reg;
                tmp_2_reg_428_pp0_iter4_reg <= tmp_2_reg_428_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op85_read_state10 = ap_const_boolean_1))) then
                gmem_addr_1_read_reg_449 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_2_reg_428 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419) and (icmp_ln108_reg_405 = ap_const_lv1_0))) then
                gmem_addr_1_reg_438 <= sext_ln117_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op82_read_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_444 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_310_p3 = ap_const_lv1_0) and (icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln115_fu_304_p2))) then
                gmem_addr_reg_432 <= sext_ln116_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln115_fu_304_p2))) then
                tmp_2_reg_428 <= sub_ln111_fu_242_p2(4 downto 4);
            end if;
        end if;
    end process;
    j_cast6_reg_409(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_cast6_reg_409_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_cast6_reg_409_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_cast6_reg_409_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_cast6_reg_409_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter4_stage0, ap_idle_pp0_0to3, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    a_vec_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln108_fu_200_p2, j_cast6_fu_220_p1, and_ln115_fu_304_p2, a_vec_addr_reg_423_pp0_iter4_reg, tmp_2_fu_310_p3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            a_vec_address0 <= a_vec_addr_reg_423_pp0_iter4_reg;
        elsif ((((tmp_2_fu_310_p3 = ap_const_lv1_1) and (icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln115_fu_304_p2)) or ((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_0 = and_ln115_fu_304_p2)))) then 
            a_vec_address0 <= j_cast6_fu_220_p1(2 - 1 downto 0);
        else 
            a_vec_address0 <= "XX";
        end if; 
    end process;


    a_vec_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, icmp_ln108_fu_200_p2, and_ln115_fu_304_p2, tmp_2_fu_310_p3, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_2_fu_310_p3 = ap_const_lv1_1) and (icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln115_fu_304_p2)) or ((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln115_fu_304_p2)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            a_vec_ce0 <= ap_const_logic_1;
        else 
            a_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_vec_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln108_fu_200_p2, and_ln115_fu_304_p2, tmp_2_fu_310_p3, gmem_addr_read_reg_444)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            a_vec_d0 <= gmem_addr_read_reg_444;
        elsif ((((tmp_2_fu_310_p3 = ap_const_lv1_1) and (icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln115_fu_304_p2)) or ((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_0 = and_ln115_fu_304_p2)))) then 
            a_vec_d0 <= ap_const_lv32_0;
        else 
            a_vec_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_vec_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln108_reg_405_pp0_iter4_reg, and_ln115_reg_419_pp0_iter4_reg, tmp_2_reg_428_pp0_iter4_reg, ap_block_pp0_stage0_11001, icmp_ln108_fu_200_p2, and_ln115_fu_304_p2, tmp_2_fu_310_p3, ap_block_pp0_stage1_11001)
    begin
        if ((((tmp_2_fu_310_p3 = ap_const_lv1_1) and (icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln115_fu_304_p2)) or ((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln115_fu_304_p2)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_2_reg_428_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln108_reg_405_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter4_reg)))) then 
            a_vec_we0 <= ap_const_logic_1;
        else 
            a_vec_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln108_fu_206_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv3_1));
    add_ln111_fu_252_p2 <= std_logic_vector(signed(sext_ln111_fu_248_p1) + signed(zext_ln111_fu_238_p1));
    add_ln112_fu_266_p2 <= std_logic_vector(unsigned(shl_ln1_fu_258_p3) + unsigned(j_cast3_fu_216_p1));
    add_ln116_fu_328_p2 <= std_logic_vector(unsigned(zext_ln116_fu_324_p1) + unsigned(din_a));
    add_ln117_fu_368_p2 <= std_logic_vector(unsigned(zext_ln117_fu_364_p1) + unsigned(din_b));
    and_ln115_fu_304_p2 <= (icmp_ln115_fu_282_p2 and icmp_ln115_1_fu_298_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem_RVALID, ap_block_state3_io, ap_predicate_op82_read_state9)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op82_read_state9 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem_RVALID, ap_block_state3_io, ap_predicate_op82_read_state9)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op82_read_state9 = ap_const_boolean_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, m_axi_gmem_RVALID, ap_block_state2_io, ap_predicate_op85_read_state10)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op85_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, m_axi_gmem_RVALID, ap_block_state2_io, ap_predicate_op85_read_state10)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op85_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op85_read_state10)
    begin
                ap_block_state10_pp0_stage1_iter4 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_predicate_op85_read_state10 = ap_const_boolean_1));
    end process;

        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem_ARREADY, ap_predicate_op63_readreq_state2)
    begin
                ap_block_state2_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_predicate_op63_readreq_state2 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_gmem_ARREADY, ap_predicate_op71_readreq_state3)
    begin
                ap_block_state3_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (ap_predicate_op71_readreq_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter4_assign_proc : process(m_axi_gmem_RVALID, ap_predicate_op82_read_state9)
    begin
                ap_block_state9_pp0_stage0_iter4 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_predicate_op82_read_state9 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln108_reg_405, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln108_reg_405 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln108_reg_405_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln108_reg_405_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_cond15_phi_fu_180_p4_assign_proc : process(icmp_ln108_reg_405_pp0_iter4_reg, and_ln115_reg_419_pp0_iter4_reg, tmp_2_reg_428_pp0_iter4_reg, gmem_addr_1_read_reg_449)
    begin
        if (((tmp_2_reg_428_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln108_reg_405_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter4_reg))) then 
            ap_phi_mux_cond15_phi_fu_180_p4 <= gmem_addr_1_read_reg_449;
        else 
            ap_phi_mux_cond15_phi_fu_180_p4 <= ap_const_lv32_0;
        end if; 
    end process;


    ap_predicate_op63_readreq_state2_assign_proc : process(icmp_ln108_reg_405, and_ln115_reg_419, tmp_2_reg_428)
    begin
                ap_predicate_op63_readreq_state2 <= ((tmp_2_reg_428 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419) and (icmp_ln108_reg_405 = ap_const_lv1_0));
    end process;


    ap_predicate_op71_readreq_state3_assign_proc : process(icmp_ln108_reg_405, and_ln115_reg_419, tmp_2_reg_428)
    begin
                ap_predicate_op71_readreq_state3 <= ((tmp_2_reg_428 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419) and (icmp_ln108_reg_405 = ap_const_lv1_0));
    end process;


    ap_predicate_op82_read_state9_assign_proc : process(icmp_ln108_reg_405_pp0_iter3_reg, and_ln115_reg_419_pp0_iter3_reg, tmp_2_reg_428_pp0_iter3_reg)
    begin
                ap_predicate_op82_read_state9 <= ((tmp_2_reg_428_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln108_reg_405_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter3_reg));
    end process;


    ap_predicate_op85_read_state10_assign_proc : process(icmp_ln108_reg_405_pp0_iter4_reg, and_ln115_reg_419_pp0_iter4_reg, tmp_2_reg_428_pp0_iter4_reg)
    begin
                ap_predicate_op85_read_state10 <= ((tmp_2_reg_428_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln108_reg_405_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter4_reg));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_90, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_90;
        end if; 
    end process;

    b_vec_address0 <= j_cast6_reg_409_pp0_iter4_reg(2 - 1 downto 0);
    b_vec_address1 <= j_cast6_fu_220_p1(2 - 1 downto 0);

    b_vec_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_vec_ce0 <= ap_const_logic_1;
        else 
            b_vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_vec_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_vec_ce1 <= ap_const_logic_1;
        else 
            b_vec_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_vec_d0 <= ap_phi_mux_cond15_phi_fu_180_p4;
    b_vec_d1 <= ap_const_lv32_0;

    b_vec_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, and_ln115_reg_419_pp0_iter4_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter4_reg))) then 
            b_vec_we0 <= ap_const_logic_1;
        else 
            b_vec_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_vec_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln108_fu_200_p2, and_ln115_fu_304_p2)
    begin
        if (((icmp_ln108_fu_200_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln115_fu_304_p2))) then 
            b_vec_we1 <= ap_const_logic_1;
        else 
            b_vec_we1 <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmem_ARREADY, icmp_ln108_reg_405, and_ln115_reg_419, tmp_2_reg_428, ap_predicate_op63_readreq_state2, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_2_reg_428 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln115_reg_419) and (icmp_ln108_reg_405 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op63_readreq_state2 = ap_const_boolean_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, ap_predicate_op85_read_state10, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln108_reg_405_pp0_iter3_reg, and_ln115_reg_419_pp0_iter3_reg, tmp_2_reg_428_pp0_iter3_reg)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op85_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_2_reg_428_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln108_reg_405_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln115_reg_419_pp0_iter3_reg)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln108_fu_200_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv3_4) else "0";
    icmp_ln115_1_fu_298_p2 <= "1" when (signed(tmp_1_fu_288_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln115_fu_282_p2 <= "0" when (tmp_fu_272_p4 = ap_const_lv2_1) else "1";
    j_cast1_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),5));
    j_cast3_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),7));
    j_cast6_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op63_readreq_state2, ap_predicate_op71_readreq_state3, ap_block_pp0_stage0_11001, gmem_addr_reg_432, gmem_addr_1_reg_438, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op71_readreq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_438;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op63_readreq_state2 = ap_const_boolean_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_432;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op63_readreq_state2, ap_predicate_op71_readreq_state3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op71_readreq_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op63_readreq_state2 = ap_const_boolean_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_predicate_op85_read_state10, ap_predicate_op82_read_state9, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op85_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op82_read_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
        sext_ln111_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln111_fu_242_p2),6));

        sext_ln116_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_334_p4),64));

        sext_ln117_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_373_p4),64));

    shl_ln116_fu_318_p2 <= std_logic_vector(shift_left(unsigned(add_ln111_fu_252_p2),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    shl_ln117_fu_359_p2 <= std_logic_vector(shift_left(unsigned(add_ln112_reg_414),to_integer(unsigned('0' & ap_const_lv7_2(7-1 downto 0)))));
    shl_ln1_fu_258_p3 <= (sub_ln111_fu_242_p2 & ap_const_lv2_0);
    shl_ln_fu_230_p3 <= (trunc_ln111_fu_226_p1 & ap_const_lv2_0);
    sub_ln111_fu_242_p2 <= std_logic_vector(unsigned(zext_ln106_cast_fu_188_p1) - unsigned(j_cast1_fu_212_p1));
    tmp_1_fu_288_p4 <= add_ln112_fu_266_p2(6 downto 4);
    tmp_2_fu_310_p3 <= sub_ln111_fu_242_p2(4 downto 4);
    tmp_fu_272_p4 <= add_ln111_fu_252_p2(5 downto 4);
    trunc_ln111_fu_226_p1 <= ap_sig_allocacmp_j_1(2 - 1 downto 0);
    trunc_ln2_fu_334_p4 <= add_ln116_fu_328_p2(63 downto 2);
    trunc_ln3_fu_373_p4 <= add_ln117_fu_368_p2(63 downto 2);
    zext_ln106_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln106),5));
    zext_ln111_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_230_p3),6));
    zext_ln116_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln116_fu_318_p2),64));
    zext_ln117_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln117_fu_359_p2),64));
end behav;
