-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array_systolic_array_Pipeline_VITIS_LOOP_126_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pe_array_pe_val_3_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_3_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_3_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_3_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_2_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_2_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_2_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_2_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_1_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_1_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_1_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_1_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_0_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_0_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_0_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_val_0_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_2_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_2_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_2_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_2_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_1_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_1_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_1_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_1_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_0_3_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_0_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_0_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_b_pass_0_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_3_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_3_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_3_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_2_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_2_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_2_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_1_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_1_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_1_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_0_2_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_0_1_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    pe_array_pe_a_pass_0_0_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_12_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_8_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_4_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_5_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_13_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_6_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_7_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_8_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_9_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_10_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_11_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_12_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_4_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_13_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_9_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_5_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_15_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_14_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_14_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_10_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_6_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_15_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_11_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_7_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M2_3_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_3_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    M1_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_3_3_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_3_3_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_3_2_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_3_2_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_3_1_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_3_1_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_3_0_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_3_0_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_2_3_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_2_3_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_2_2_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_2_2_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_2_1_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_2_1_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_2_0_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_2_0_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_1_3_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_1_3_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_1_2_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_1_2_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_1_1_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_1_1_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_1_0_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_1_0_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_0_3_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_0_3_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_0_2_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_0_2_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_0_1_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_0_1_read_assign_out_ap_vld : OUT STD_LOGIC;
    this_pe_val_0_0_read_assign_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    this_pe_val_0_0_read_assign_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of systolic_array_systolic_array_Pipeline_VITIS_LOOP_126_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln126_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal b_vec_0_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_2991 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln126_reg_3000 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_3000_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_3000_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_reg_3000_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_vec_0_fu_1278_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln138_fu_1316_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln137_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_reg_3020 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_1_reg_3025 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_2_reg_3032 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_3_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_3_reg_3039 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_4_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_4_reg_3046 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_9_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_9_reg_3053 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_reg_3060 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_1_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_1_reg_3065 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_2_fu_1440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_2_reg_3070 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_vec_1_fu_1470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_1_reg_3075 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln137_1_fu_1554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_1_reg_3081 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_3_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_3_reg_3086 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_4_fu_1578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_4_reg_3091 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_5_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_5_reg_3096 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_vec_2_fu_1620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_2_reg_3101 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln137_2_fu_1704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_2_reg_3107 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_6_fu_1722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_6_reg_3112 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_7_fu_1728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_7_reg_3117 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_8_fu_1740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln138_8_reg_3122 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_vec_3_fu_1770_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_vec_3_reg_3127 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_1_0_fu_1944_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_1_0_reg_3238 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_2_0_fu_2034_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_2_0_reg_3243 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_3_0_fu_2098_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_3_0_reg_3248 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_reg_3268 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_1_reg_3273 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_2_reg_3278 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_3_reg_3283 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_5_reg_3288 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_6_reg_3293 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_7_reg_3298 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_9_reg_3303 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_10_reg_3308 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_11_reg_3313 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_13_reg_3318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_14_reg_3323 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_15_reg_3328 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_4_reg_3333 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_8_reg_3338 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_12_reg_3343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_opa_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_opa_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_b_vec_0_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_278 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln126_fu_1236_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal pe_array_pe_a_pass_0_1_fu_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_a_pass_0_2_read_assign_fu_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_1_1_fu_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_a_pass_1_2_read_assign_fu_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_2_1_fu_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_a_pass_2_2_read_assign_fu_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_3_1_fu_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_a_pass_3_2_read_assign_fu_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_1_0_fu_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_1_1_fu_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_1_2_fu_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_1_3_fu_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_b_pass_2_0_read_assign_fu_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_b_pass_2_1_read_assign_fu_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_b_pass_2_2_read_assign_fu_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_b_pass_2_3_read_assign_fu_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_0_0_read_assign_fu_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_0_0_fu_2360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_0_1_read_assign_fu_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_0_1_fu_2365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_0_2_read_assign_fu_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_0_2_fu_2370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_0_3_read_assign_fu_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_0_3_fu_2375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_1_0_read_assign_fu_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_1_0_fu_2499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_1_1_read_assign_fu_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_1_1_fu_2380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_1_2_read_assign_fu_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_1_2_fu_2385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_1_3_read_assign_fu_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_1_3_fu_2390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_2_0_read_assign_fu_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_2_0_fu_2504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_2_1_read_assign_fu_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_2_1_fu_2395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_2_2_read_assign_fu_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_2_2_fu_2400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_2_3_read_assign_fu_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_2_3_fu_2405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_3_0_read_assign_fu_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_3_0_fu_2509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_3_1_read_assign_fu_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_3_1_fu_2410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_3_2_read_assign_fu_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_3_2_fu_2415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal this_pe_val_3_3_read_assign_fu_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_val_3_3_fu_2420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_0_2_fu_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_1_2_fu_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_2_2_fu_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_a_pass_3_2_fu_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_2_0_fu_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_2_1_fu_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_2_2_fu_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal pe_array_pe_b_pass_2_3_fu_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_1250_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1262_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln133_fu_1246_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln136_fu_1258_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln133_1_fu_1320_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln133_fu_1328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln133_fu_1340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_1346_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln136_1_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln137_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln133_1_fu_1334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln138_fu_1404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln138_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_1_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_2_fu_1434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_1_fu_1446_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_3_fu_1454_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_4_fu_1462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln132_cast_fu_1242_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln132_fu_1478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln133_1_fu_1490_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln132_1_fu_1484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_1504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_1_fu_1498_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_1518_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_1534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_2_fu_1528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_3_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_3_fu_1560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_4_fu_1572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_5_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_12_fu_1596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_9_fu_1604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_10_fu_1612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_2_fu_1628_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln133_2_fu_1640_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln132_3_fu_1634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_1654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln133_2_fu_1648_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1668_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_1684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_3_fu_1678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln137_1_fu_1692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln137_4_fu_1698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln136_1_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln138_fu_1710_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln138_6_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_7_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln137_20_fu_1746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_15_fu_1754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_16_fu_1762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_fu_1846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_1_fu_1851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_2_fu_1857_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln137_5_fu_1869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M1_15_3_fu_1863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln137_6_fu_1881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M1_15_4_fu_1874_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln137_7_fu_1893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M1_15_5_fu_1886_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln137_8_fu_1905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M1_15_6_fu_1898_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_7_fu_1910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_24_fu_1917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln137_fu_1923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_fu_1930_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_1_fu_1937_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_9_fu_1951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_10_fu_1956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_11_fu_1962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_12_fu_1968_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_13_fu_1974_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_14_fu_1980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_15_fu_1987_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln137_10_fu_2001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M1_15_16_fu_1994_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_25_fu_2006_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln137_11_fu_2013_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_6_fu_2020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_7_fu_2027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_18_fu_2041_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_19_fu_2046_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_20_fu_2052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_21_fu_2058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_22_fu_2064_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal M1_15_26_fu_2070_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln137_19_fu_2077_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_12_fu_2084_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln138_13_fu_2091_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_538 : BOOLEAN;
    signal ap_condition_545 : BOOLEAN;
    signal ap_condition_550 : BOOLEAN;
    signal ap_condition_555 : BOOLEAN;
    signal ap_condition_535 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component systolic_array_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_mul_32s_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component systolic_array_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_32_1_1_U222 : component systolic_array_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => M1_0_1_reload,
        din1 => M1_1_1_reload,
        din2 => M1_2_1_reload,
        din3 => M1_3_1_reload,
        din4 => M1_4_1_reload,
        din5 => M1_5_1_reload,
        din6 => M1_6_1_reload,
        din7 => M1_7_1_reload,
        din8 => M1_8_1_reload,
        din9 => M1_9_1_reload,
        din10 => M1_10_1_reload,
        din11 => M1_10_1_reload,
        din12 => M1_10_1_reload,
        din13 => M1_10_1_reload,
        din14 => M1_10_1_reload,
        din15 => M1_10_1_reload,
        din16 => ap_sig_allocacmp_i_1,
        dout => a_vec_0_fu_1278_p18);

    mul_32s_32s_32_3_1_U223 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter1_b_vec_0_reg_1004,
        din1 => ap_phi_reg_pp0_iter1_opa_reg_986,
        ce => ap_const_logic_1,
        dout => grp_fu_2105_p2);

    mul_32s_32s_32_3_1_U224 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_a_pass_0_1_fu_282,
        din1 => b_vec_1_reg_3075,
        ce => ap_const_logic_1,
        dout => grp_fu_2111_p2);

    mul_32s_32s_32_3_1_U225 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_a_pass_0_2_fu_410,
        din1 => b_vec_2_reg_3101,
        ce => ap_const_logic_1,
        dout => grp_fu_2116_p2);

    mul_32s_32s_32_3_1_U226 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => this_pe_a_pass_0_2_read_assign_fu_286,
        din1 => b_vec_3_reg_3127,
        ce => ap_const_logic_1,
        dout => grp_fu_2121_p2);

    mul_32s_32s_32_3_1_U227 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_1_1_fu_318,
        din1 => pe_array_pe_a_pass_1_1_fu_290,
        ce => ap_const_logic_1,
        dout => grp_fu_2126_p2);

    mul_32s_32s_32_3_1_U228 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_1_2_fu_322,
        din1 => pe_array_pe_a_pass_1_2_fu_414,
        ce => ap_const_logic_1,
        dout => grp_fu_2132_p2);

    mul_32s_32s_32_3_1_U229 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_1_3_fu_326,
        din1 => this_pe_a_pass_1_2_read_assign_fu_294,
        ce => ap_const_logic_1,
        dout => grp_fu_2138_p2);

    mul_32s_32s_32_3_1_U230 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_2_1_fu_430,
        din1 => pe_array_pe_a_pass_2_1_fu_298,
        ce => ap_const_logic_1,
        dout => grp_fu_2144_p2);

    mul_32s_32s_32_3_1_U231 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_2_2_fu_434,
        din1 => pe_array_pe_a_pass_2_2_fu_418,
        ce => ap_const_logic_1,
        dout => grp_fu_2150_p2);

    mul_32s_32s_32_3_1_U232 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_2_3_fu_438,
        din1 => this_pe_a_pass_2_2_read_assign_fu_302,
        ce => ap_const_logic_1,
        dout => grp_fu_2156_p2);

    mul_32s_32s_32_3_1_U233 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => this_pe_b_pass_2_1_read_assign_fu_334,
        din1 => pe_array_pe_a_pass_3_1_fu_306,
        ce => ap_const_logic_1,
        dout => grp_fu_2162_p2);

    mul_32s_32s_32_3_1_U234 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => this_pe_b_pass_2_2_read_assign_fu_338,
        din1 => pe_array_pe_a_pass_3_2_fu_422,
        ce => ap_const_logic_1,
        dout => grp_fu_2168_p2);

    mul_32s_32s_32_3_1_U235 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => this_pe_b_pass_2_3_read_assign_fu_342,
        din1 => this_pe_a_pass_3_2_read_assign_fu_310,
        ce => ap_const_logic_1,
        dout => grp_fu_2174_p2);

    mul_32s_32s_32_3_1_U236 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_1_0_fu_314,
        din1 => pe_array_pe_a_pass_1_0_reg_3238,
        ce => ap_const_logic_1,
        dout => grp_fu_2291_p2);

    mul_32s_32s_32_3_1_U237 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => pe_array_pe_b_pass_2_0_fu_426,
        din1 => pe_array_pe_a_pass_2_0_reg_3243,
        ce => ap_const_logic_1,
        dout => grp_fu_2296_p2);

    mul_32s_32s_32_3_1_U238 : component systolic_array_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => this_pe_b_pass_2_0_read_assign_fu_330,
        din1 => pe_array_pe_a_pass_3_0_reg_3248,
        ce => ap_const_logic_1,
        dout => grp_fu_2301_p2);

    flow_control_loop_pipe_sequential_init_U : component systolic_array_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_535)) then
                if (((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_555)) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= M2_4_1_reload;
                elsif ((ap_const_boolean_1 = ap_condition_550)) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= M2_0_1_reload;
                elsif ((ap_const_boolean_1 = ap_condition_545)) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= M2_8_1_reload;
                elsif ((ap_const_boolean_1 = ap_condition_538)) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= M2_12_1_reload;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_b_vec_0_reg_1004 <= ap_phi_reg_pp0_iter0_b_vec_0_reg_1004;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_opa_reg_986_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_opa_reg_986 <= ap_const_lv32_0;
            elsif ((((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_1) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_0) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_2) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_3) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                ap_phi_reg_pp0_iter1_opa_reg_986 <= a_vec_0_fu_1278_p18;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_opa_reg_986 <= ap_phi_reg_pp0_iter0_opa_reg_986;
            end if; 
        end if;
    end process;

    i_fu_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_278 <= add_ln126_fu_1236_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_278 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_0_1_fu_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_0_1_fu_282 <= pe_array_pe_a_pass_0_0_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_0_1_fu_282 <= ap_phi_reg_pp0_iter1_opa_reg_986;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_0_2_fu_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_0_2_fu_410 <= pe_array_pe_a_pass_0_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_0_2_fu_410 <= pe_array_pe_a_pass_0_1_fu_282;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_1_1_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_1_1_fu_290 <= pe_array_pe_a_pass_1_0_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_1_1_fu_290 <= pe_array_pe_a_pass_1_0_fu_1944_p3;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_1_2_fu_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_1_2_fu_414 <= pe_array_pe_a_pass_1_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_1_2_fu_414 <= pe_array_pe_a_pass_1_1_fu_290;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_2_1_fu_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_2_1_fu_298 <= pe_array_pe_a_pass_2_0_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_2_1_fu_298 <= pe_array_pe_a_pass_2_0_fu_2034_p3;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_2_2_fu_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_2_2_fu_418 <= pe_array_pe_a_pass_2_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_2_2_fu_418 <= pe_array_pe_a_pass_2_1_fu_298;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_3_1_fu_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_3_1_fu_306 <= pe_array_pe_a_pass_3_0_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_3_1_fu_306 <= pe_array_pe_a_pass_3_0_fu_2098_p3;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_a_pass_3_2_fu_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_a_pass_3_2_fu_422 <= pe_array_pe_a_pass_3_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_a_pass_3_2_fu_422 <= pe_array_pe_a_pass_3_1_fu_306;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_1_0_fu_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_array_pe_b_pass_1_0_fu_314 <= pe_array_pe_b_pass_0_0_3_reload;
                elsif (((icmp_ln126_reg_3000_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_1_0_fu_314 <= b_vec_0_reg_1004;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_1_1_fu_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_1_1_fu_318 <= pe_array_pe_b_pass_0_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_1_1_fu_318 <= b_vec_1_reg_3075;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_1_2_fu_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_1_2_fu_322 <= pe_array_pe_b_pass_0_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_1_2_fu_322 <= b_vec_2_reg_3101;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_1_3_fu_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_1_3_fu_326 <= pe_array_pe_b_pass_0_3_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_1_3_fu_326 <= b_vec_3_reg_3127;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_2_0_fu_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    pe_array_pe_b_pass_2_0_fu_426 <= pe_array_pe_b_pass_1_0_3_reload;
                elsif (((icmp_ln126_reg_3000_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_2_0_fu_426 <= pe_array_pe_b_pass_1_0_fu_314;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_2_1_fu_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_2_1_fu_430 <= pe_array_pe_b_pass_1_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_2_1_fu_430 <= pe_array_pe_b_pass_1_1_fu_318;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_2_2_fu_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_2_2_fu_434 <= pe_array_pe_b_pass_1_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_2_2_fu_434 <= pe_array_pe_b_pass_1_2_fu_322;
                end if;
            end if; 
        end if;
    end process;

    pe_array_pe_b_pass_2_3_fu_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    pe_array_pe_b_pass_2_3_fu_438 <= pe_array_pe_b_pass_1_3_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    pe_array_pe_b_pass_2_3_fu_438 <= pe_array_pe_b_pass_1_3_fu_326;
                end if;
            end if; 
        end if;
    end process;

    this_pe_a_pass_0_2_read_assign_fu_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_a_pass_0_2_read_assign_fu_286 <= pe_array_pe_a_pass_0_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_a_pass_0_2_read_assign_fu_286 <= pe_array_pe_a_pass_0_2_fu_410;
                end if;
            end if; 
        end if;
    end process;

    this_pe_a_pass_1_2_read_assign_fu_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_a_pass_1_2_read_assign_fu_294 <= pe_array_pe_a_pass_1_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_a_pass_1_2_read_assign_fu_294 <= pe_array_pe_a_pass_1_2_fu_414;
                end if;
            end if; 
        end if;
    end process;

    this_pe_a_pass_2_2_read_assign_fu_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_a_pass_2_2_read_assign_fu_302 <= pe_array_pe_a_pass_2_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_a_pass_2_2_read_assign_fu_302 <= pe_array_pe_a_pass_2_2_fu_418;
                end if;
            end if; 
        end if;
    end process;

    this_pe_a_pass_3_2_read_assign_fu_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_a_pass_3_2_read_assign_fu_310 <= pe_array_pe_a_pass_3_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_a_pass_3_2_read_assign_fu_310 <= pe_array_pe_a_pass_3_2_fu_422;
                end if;
            end if; 
        end if;
    end process;

    this_pe_b_pass_2_0_read_assign_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_b_pass_2_0_read_assign_fu_330 <= pe_array_pe_b_pass_2_0_3_reload;
                elsif (((icmp_ln126_reg_3000_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    this_pe_b_pass_2_0_read_assign_fu_330 <= pe_array_pe_b_pass_2_0_fu_426;
                end if;
            end if; 
        end if;
    end process;

    this_pe_b_pass_2_1_read_assign_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_b_pass_2_1_read_assign_fu_334 <= pe_array_pe_b_pass_2_1_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_b_pass_2_1_read_assign_fu_334 <= pe_array_pe_b_pass_2_1_fu_430;
                end if;
            end if; 
        end if;
    end process;

    this_pe_b_pass_2_2_read_assign_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_b_pass_2_2_read_assign_fu_338 <= pe_array_pe_b_pass_2_2_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_b_pass_2_2_read_assign_fu_338 <= pe_array_pe_b_pass_2_2_fu_434;
                end if;
            end if; 
        end if;
    end process;

    this_pe_b_pass_2_3_read_assign_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    this_pe_b_pass_2_3_read_assign_fu_342 <= pe_array_pe_b_pass_2_3_3_reload;
                elsif (((icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    this_pe_b_pass_2_3_read_assign_fu_342 <= pe_array_pe_b_pass_2_3_fu_438;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_0_0_read_assign_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_0_0_read_assign_fu_346 <= pe_array_pe_val_0_0_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_0_0_read_assign_fu_346 <= pe_array_pe_val_0_0_fu_2360_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_0_1_read_assign_fu_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_0_1_read_assign_fu_350 <= pe_array_pe_val_0_1_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_0_1_read_assign_fu_350 <= pe_array_pe_val_0_1_fu_2365_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_0_2_read_assign_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_0_2_read_assign_fu_354 <= pe_array_pe_val_0_2_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_0_2_read_assign_fu_354 <= pe_array_pe_val_0_2_fu_2370_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_0_3_read_assign_fu_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_0_3_read_assign_fu_358 <= pe_array_pe_val_0_3_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_0_3_read_assign_fu_358 <= pe_array_pe_val_0_3_fu_2375_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_1_0_read_assign_fu_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_1_0_read_assign_fu_362 <= pe_array_pe_val_1_0_3_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    this_pe_val_1_0_read_assign_fu_362 <= pe_array_pe_val_1_0_fu_2499_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_1_1_read_assign_fu_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_1_1_read_assign_fu_366 <= pe_array_pe_val_1_1_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_1_1_read_assign_fu_366 <= pe_array_pe_val_1_1_fu_2380_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_1_2_read_assign_fu_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_1_2_read_assign_fu_370 <= pe_array_pe_val_1_2_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_1_2_read_assign_fu_370 <= pe_array_pe_val_1_2_fu_2385_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_1_3_read_assign_fu_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_1_3_read_assign_fu_374 <= pe_array_pe_val_1_3_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_1_3_read_assign_fu_374 <= pe_array_pe_val_1_3_fu_2390_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_2_0_read_assign_fu_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_2_0_read_assign_fu_378 <= pe_array_pe_val_2_0_3_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    this_pe_val_2_0_read_assign_fu_378 <= pe_array_pe_val_2_0_fu_2504_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_2_1_read_assign_fu_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_2_1_read_assign_fu_382 <= pe_array_pe_val_2_1_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_2_1_read_assign_fu_382 <= pe_array_pe_val_2_1_fu_2395_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_2_2_read_assign_fu_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_2_2_read_assign_fu_386 <= pe_array_pe_val_2_2_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_2_2_read_assign_fu_386 <= pe_array_pe_val_2_2_fu_2400_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_2_3_read_assign_fu_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_2_3_read_assign_fu_390 <= pe_array_pe_val_2_3_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_2_3_read_assign_fu_390 <= pe_array_pe_val_2_3_fu_2405_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_3_0_read_assign_fu_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_3_0_read_assign_fu_394 <= pe_array_pe_val_3_0_3_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    this_pe_val_3_0_read_assign_fu_394 <= pe_array_pe_val_3_0_fu_2509_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_3_1_read_assign_fu_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_3_1_read_assign_fu_398 <= pe_array_pe_val_3_1_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_3_1_read_assign_fu_398 <= pe_array_pe_val_3_1_fu_2410_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_3_2_read_assign_fu_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_3_2_read_assign_fu_402 <= pe_array_pe_val_3_2_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_3_2_read_assign_fu_402 <= pe_array_pe_val_3_2_fu_2415_p2;
                end if;
            end if; 
        end if;
    end process;

    this_pe_val_3_3_read_assign_fu_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    this_pe_val_3_3_read_assign_fu_406 <= pe_array_pe_val_3_3_3_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    this_pe_val_3_3_read_assign_fu_406 <= pe_array_pe_val_3_3_fu_2420_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln137_1_reg_3081 <= and_ln137_1_fu_1554_p2;
                and_ln137_2_reg_3107 <= and_ln137_2_fu_1704_p2;
                and_ln137_reg_3020 <= and_ln137_fu_1368_p2;
                and_ln138_1_reg_3065 <= and_ln138_1_fu_1428_p2;
                and_ln138_2_reg_3070 <= and_ln138_2_fu_1440_p2;
                and_ln138_3_reg_3086 <= and_ln138_3_fu_1566_p2;
                and_ln138_4_reg_3091 <= and_ln138_4_fu_1578_p2;
                and_ln138_5_reg_3096 <= and_ln138_5_fu_1590_p2;
                and_ln138_6_reg_3112 <= and_ln138_6_fu_1722_p2;
                and_ln138_7_reg_3117 <= and_ln138_7_fu_1728_p2;
                and_ln138_8_reg_3122 <= and_ln138_8_fu_1740_p2;
                and_ln138_reg_3060 <= and_ln138_fu_1416_p2;
                b_vec_1_reg_3075 <= b_vec_1_fu_1470_p3;
                b_vec_2_reg_3101 <= b_vec_2_fu_1620_p3;
                b_vec_3_reg_3127 <= b_vec_3_fu_1770_p3;
                icmp_ln137_1_reg_3025 <= icmp_ln137_1_fu_1374_p2;
                icmp_ln137_2_reg_3032 <= icmp_ln137_2_fu_1380_p2;
                icmp_ln137_3_reg_3039 <= icmp_ln137_3_fu_1386_p2;
                icmp_ln137_4_reg_3046 <= icmp_ln137_4_fu_1392_p2;
                icmp_ln137_9_reg_3053 <= icmp_ln137_9_fu_1398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_2991 <= ap_sig_allocacmp_i_1;
                icmp_ln126_reg_3000 <= icmp_ln126_fu_1230_p2;
                icmp_ln126_reg_3000_pp0_iter1_reg <= icmp_ln126_reg_3000;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln126_reg_3000_pp0_iter2_reg <= icmp_ln126_reg_3000_pp0_iter1_reg;
                icmp_ln126_reg_3000_pp0_iter3_reg <= icmp_ln126_reg_3000_pp0_iter2_reg;
                mul_ln21_10_reg_3308 <= grp_fu_2150_p2;
                mul_ln21_11_reg_3313 <= grp_fu_2156_p2;
                mul_ln21_12_reg_3343 <= grp_fu_2301_p2;
                mul_ln21_13_reg_3318 <= grp_fu_2162_p2;
                mul_ln21_14_reg_3323 <= grp_fu_2168_p2;
                mul_ln21_15_reg_3328 <= grp_fu_2174_p2;
                mul_ln21_1_reg_3273 <= grp_fu_2111_p2;
                mul_ln21_2_reg_3278 <= grp_fu_2116_p2;
                mul_ln21_3_reg_3283 <= grp_fu_2121_p2;
                mul_ln21_4_reg_3333 <= grp_fu_2291_p2;
                mul_ln21_5_reg_3288 <= grp_fu_2126_p2;
                mul_ln21_6_reg_3293 <= grp_fu_2132_p2;
                mul_ln21_7_reg_3298 <= grp_fu_2138_p2;
                mul_ln21_8_reg_3338 <= grp_fu_2296_p2;
                mul_ln21_9_reg_3303 <= grp_fu_2144_p2;
                mul_ln21_reg_3268 <= grp_fu_2105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_vec_0_reg_1004 <= ap_phi_reg_pp0_iter1_b_vec_0_reg_1004;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pe_array_pe_a_pass_1_0_reg_3238 <= pe_array_pe_a_pass_1_0_fu_1944_p3;
                pe_array_pe_a_pass_2_0_reg_3243 <= pe_array_pe_a_pass_2_0_fu_2034_p3;
                pe_array_pe_a_pass_3_0_reg_3248 <= pe_array_pe_a_pass_3_0_fu_2098_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    M1_15_10_fu_1956_p3 <= 
        M1_8_1_reload when (icmp_ln137_1_reg_3025(0) = '1') else 
        M1_15_9_fu_1951_p3;
    M1_15_11_fu_1962_p3 <= 
        M1_9_1_reload when (icmp_ln137_2_reg_3032(0) = '1') else 
        M1_15_10_fu_1956_p3;
    M1_15_12_fu_1968_p3 <= 
        M1_10_1_reload when (icmp_ln137_3_reg_3039(0) = '1') else 
        M1_15_11_fu_1962_p3;
    M1_15_13_fu_1974_p3 <= 
        M1_11_1_reload when (icmp_ln137_4_reg_3046(0) = '1') else 
        M1_15_12_fu_1968_p3;
    M1_15_14_fu_1980_p3 <= 
        M1_12_1_reload when (icmp_ln137_5_fu_1869_p2(0) = '1') else 
        M1_15_13_fu_1974_p3;
    M1_15_15_fu_1987_p3 <= 
        M1_13_1_reload when (icmp_ln137_6_fu_1881_p2(0) = '1') else 
        M1_15_14_fu_1980_p3;
    M1_15_16_fu_1994_p3 <= 
        M1_14_1_reload when (icmp_ln137_7_fu_1893_p2(0) = '1') else 
        M1_15_15_fu_1987_p3;
    M1_15_18_fu_2041_p3 <= 
        M1_10_1_reload when (icmp_ln137_9_reg_3053(0) = '1') else 
        M1_15_1_reload;
    M1_15_19_fu_2046_p3 <= 
        M1_11_1_reload when (icmp_ln137_1_reg_3025(0) = '1') else 
        M1_15_18_fu_2041_p3;
    M1_15_1_fu_1851_p3 <= 
        M1_6_1_reload when (icmp_ln137_2_reg_3032(0) = '1') else 
        M1_15_fu_1846_p3;
    M1_15_20_fu_2052_p3 <= 
        M1_12_1_reload when (icmp_ln137_2_reg_3032(0) = '1') else 
        M1_15_19_fu_2046_p3;
    M1_15_21_fu_2058_p3 <= 
        M1_13_1_reload when (icmp_ln137_3_reg_3039(0) = '1') else 
        M1_15_20_fu_2052_p3;
    M1_15_22_fu_2064_p3 <= 
        M1_14_1_reload when (icmp_ln137_4_reg_3046(0) = '1') else 
        M1_15_21_fu_2058_p3;
    M1_15_24_fu_1917_p3 <= 
        M1_4_1_reload when (icmp_ln137_9_reg_3053(0) = '1') else 
        M1_15_7_fu_1910_p3;
    M1_15_25_fu_2006_p3 <= 
        M1_6_1_reload when (icmp_ln137_10_fu_2001_p2(0) = '1') else 
        M1_15_16_fu_1994_p3;
    M1_15_26_fu_2070_p3 <= 
        M1_9_1_reload when (icmp_ln137_10_fu_2001_p2(0) = '1') else 
        M1_15_22_fu_2064_p3;
    M1_15_2_fu_1857_p3 <= 
        M1_7_1_reload when (icmp_ln137_3_reg_3039(0) = '1') else 
        M1_15_1_fu_1851_p3;
    M1_15_3_fu_1863_p3 <= 
        M1_8_1_reload when (icmp_ln137_4_reg_3046(0) = '1') else 
        M1_15_2_fu_1857_p3;
    M1_15_4_fu_1874_p3 <= 
        M1_9_1_reload when (icmp_ln137_5_fu_1869_p2(0) = '1') else 
        M1_15_3_fu_1863_p3;
    M1_15_5_fu_1886_p3 <= 
        M1_10_1_reload when (icmp_ln137_6_fu_1881_p2(0) = '1') else 
        M1_15_4_fu_1874_p3;
    M1_15_6_fu_1898_p3 <= 
        M1_11_1_reload when (icmp_ln137_7_fu_1893_p2(0) = '1') else 
        M1_15_5_fu_1886_p3;
    M1_15_7_fu_1910_p3 <= 
        M1_12_1_reload when (icmp_ln137_8_fu_1905_p2(0) = '1') else 
        M1_15_6_fu_1898_p3;
    M1_15_9_fu_1951_p3 <= 
        M1_7_1_reload when (icmp_ln137_9_reg_3053(0) = '1') else 
        M1_15_1_reload;
    M1_15_fu_1846_p3 <= 
        M1_5_1_reload when (icmp_ln137_1_reg_3025(0) = '1') else 
        M1_13_1_reload;
    add_ln126_fu_1236_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln132_1_fu_1484_p2 <= std_logic_vector(unsigned(trunc_ln132_cast_fu_1242_p1) + unsigned(ap_const_lv5_6));
    add_ln132_2_fu_1628_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_D));
    add_ln132_3_fu_1634_p2 <= std_logic_vector(unsigned(trunc_ln132_cast_fu_1242_p1) + unsigned(ap_const_lv5_9));
    add_ln132_fu_1478_p2 <= std_logic_vector(unsigned(trunc_ln132_cast_fu_1242_p1) + unsigned(ap_const_lv5_1E));
    add_ln133_1_fu_1334_p2 <= std_logic_vector(unsigned(trunc_ln133_1_fu_1320_p3) + unsigned(ap_const_lv4_C));
    add_ln133_fu_1328_p2 <= std_logic_vector(unsigned(zext_ln136_fu_1258_p1) + unsigned(ap_const_lv7_7C));
    add_ln138_fu_1710_p2 <= std_logic_vector(unsigned(trunc_ln133_fu_1246_p1) + unsigned(ap_const_lv2_1));
    and_ln137_1_fu_1554_p2 <= (xor_ln136_fu_1512_p2 and and_ln137_3_fu_1548_p2);
    and_ln137_2_fu_1704_p2 <= (xor_ln136_1_fu_1662_p2 and and_ln137_4_fu_1698_p2);
    and_ln137_3_fu_1548_p2 <= (xor_ln137_fu_1542_p2 and icmp_ln136_2_fu_1528_p2);
    and_ln137_4_fu_1698_p2 <= (xor_ln137_1_fu_1692_p2 and icmp_ln136_3_fu_1678_p2);
    and_ln137_fu_1368_p2 <= (icmp_ln137_fu_1362_p2 and icmp_ln136_1_fu_1356_p2);
    and_ln138_1_fu_1428_p2 <= (icmp_ln138_1_fu_1422_p2 and and_ln137_fu_1368_p2);
    and_ln138_2_fu_1440_p2 <= (icmp_ln138_2_fu_1434_p2 and and_ln137_fu_1368_p2);
    and_ln138_3_fu_1566_p2 <= (icmp_ln138_3_fu_1560_p2 and and_ln137_1_fu_1554_p2);
    and_ln138_4_fu_1578_p2 <= (icmp_ln138_4_fu_1572_p2 and and_ln137_1_fu_1554_p2);
    and_ln138_5_fu_1590_p2 <= (icmp_ln138_5_fu_1584_p2 and and_ln137_1_fu_1554_p2);
    and_ln138_6_fu_1722_p2 <= (icmp_ln138_6_fu_1716_p2 and and_ln137_2_fu_1704_p2);
    and_ln138_7_fu_1728_p2 <= (icmp_ln138_3_fu_1560_p2 and and_ln137_2_fu_1704_p2);
    and_ln138_8_fu_1740_p2 <= (icmp_ln138_7_fu_1734_p2 and and_ln137_2_fu_1704_p2);
    and_ln138_fu_1416_p2 <= (icmp_ln138_fu_1410_p2 and and_ln137_fu_1368_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_535_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_535 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_538_assign_proc : process(icmp_ln126_fu_1230_p2, icmp_ln136_fu_1272_p2, trunc_ln138_fu_1316_p1)
    begin
                ap_condition_538 <= ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_3) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1));
    end process;


    ap_condition_545_assign_proc : process(icmp_ln126_fu_1230_p2, icmp_ln136_fu_1272_p2, trunc_ln138_fu_1316_p1)
    begin
                ap_condition_545 <= ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_2) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1));
    end process;


    ap_condition_550_assign_proc : process(icmp_ln126_fu_1230_p2, icmp_ln136_fu_1272_p2, trunc_ln138_fu_1316_p1)
    begin
                ap_condition_550 <= ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_0) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1));
    end process;


    ap_condition_555_assign_proc : process(icmp_ln126_fu_1230_p2, icmp_ln136_fu_1272_p2, trunc_ln138_fu_1316_p1)
    begin
                ap_condition_555 <= ((icmp_ln126_fu_1230_p2 = ap_const_lv1_0) and (trunc_ln138_fu_1316_p1 = ap_const_lv2_1) and (icmp_ln136_fu_1272_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln126_fu_1230_p2)
    begin
        if (((icmp_ln126_fu_1230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln126_reg_3000_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln126_reg_3000_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_b_vec_0_reg_1004 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_opa_reg_986 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_278, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_278;
        end if; 
    end process;

    b_vec_1_fu_1470_p3 <= 
        M2_1_1_reload when (and_ln138_2_fu_1440_p2(0) = '1') else 
        select_ln138_4_fu_1462_p3;
    b_vec_2_fu_1620_p3 <= 
        M2_2_1_reload when (and_ln138_5_fu_1590_p2(0) = '1') else 
        select_ln138_10_fu_1612_p3;
    b_vec_3_fu_1770_p3 <= 
        M2_3_1_reload when (and_ln138_8_fu_1740_p2(0) = '1') else 
        select_ln138_16_fu_1762_p3;
    icmp_ln126_fu_1230_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_B) else "0";
    icmp_ln136_1_fu_1356_p2 <= "1" when (signed(tmp_1_fu_1346_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln136_2_fu_1528_p2 <= "1" when (signed(tmp_3_fu_1518_p4) < signed(ap_const_lv3_1)) else "0";
    icmp_ln136_3_fu_1678_p2 <= "0" when (tmp_6_fu_1668_p4 = ap_const_lv2_1) else "1";
    icmp_ln136_fu_1272_p2 <= "1" when (tmp_fu_1262_p4 = ap_const_lv2_0) else "0";
    icmp_ln137_10_fu_2001_p2 <= "1" when (i_1_reg_2991 = ap_const_lv4_0) else "0";
    icmp_ln137_1_fu_1374_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_2) else "0";
    icmp_ln137_2_fu_1380_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_3) else "0";
    icmp_ln137_3_fu_1386_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_4) else "0";
    icmp_ln137_4_fu_1392_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_5) else "0";
    icmp_ln137_5_fu_1869_p2 <= "1" when (i_1_reg_2991 = ap_const_lv4_6) else "0";
    icmp_ln137_6_fu_1881_p2 <= "1" when (i_1_reg_2991 = ap_const_lv4_7) else "0";
    icmp_ln137_7_fu_1893_p2 <= "1" when (i_1_reg_2991 = ap_const_lv4_8) else "0";
    icmp_ln137_8_fu_1905_p2 <= "1" when (i_1_reg_2991 = ap_const_lv4_9) else "0";
    icmp_ln137_9_fu_1398_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_1) else "0";
    icmp_ln137_fu_1362_p2 <= "0" when (ap_sig_allocacmp_i_1 = ap_const_lv4_0) else "1";
    icmp_ln138_1_fu_1422_p2 <= "1" when (or_ln138_fu_1404_p2 = ap_const_lv4_5) else "0";
    icmp_ln138_2_fu_1434_p2 <= "1" when (or_ln138_fu_1404_p2 = ap_const_lv4_1) else "0";
    icmp_ln138_3_fu_1560_p2 <= "1" when (trunc_ln133_fu_1246_p1 = ap_const_lv2_0) else "0";
    icmp_ln138_4_fu_1572_p2 <= "1" when (trunc_ln133_fu_1246_p1 = ap_const_lv2_3) else "0";
    icmp_ln138_5_fu_1584_p2 <= "1" when (trunc_ln133_fu_1246_p1 = ap_const_lv2_2) else "0";
    icmp_ln138_6_fu_1716_p2 <= "1" when (add_ln138_fu_1710_p2 = ap_const_lv2_2) else "0";
    icmp_ln138_7_fu_1734_p2 <= "1" when (add_ln138_fu_1710_p2 = ap_const_lv2_0) else "0";
    icmp_ln138_fu_1410_p2 <= "1" when (or_ln138_fu_1404_p2 = ap_const_lv4_9) else "0";
    or_ln133_1_fu_1498_p2 <= (shl_ln133_1_fu_1490_p3 or ap_const_lv7_2);
    or_ln133_2_fu_1648_p2 <= (shl_ln133_2_fu_1640_p3 or ap_const_lv6_3);
    or_ln133_fu_1340_p2 <= (ap_const_lv7_1 or add_ln133_fu_1328_p2);
    or_ln138_fu_1404_p2 <= (ap_const_lv4_1 or add_ln133_1_fu_1334_p2);
    pe_array_pe_a_pass_1_0_fu_1944_p3 <= 
        M1_15_24_fu_1917_p3 when (and_ln138_2_reg_3070(0) = '1') else 
        select_ln138_1_fu_1937_p3;
    pe_array_pe_a_pass_2_0_fu_2034_p3 <= 
        M1_15_25_fu_2006_p3 when (and_ln138_5_reg_3096(0) = '1') else 
        select_ln138_7_fu_2027_p3;
    pe_array_pe_a_pass_3_0_fu_2098_p3 <= 
        M1_15_26_fu_2070_p3 when (and_ln138_8_reg_3122(0) = '1') else 
        select_ln138_13_fu_2091_p3;
    pe_array_pe_val_0_0_fu_2360_p2 <= std_logic_vector(unsigned(mul_ln21_reg_3268) + unsigned(this_pe_val_0_0_read_assign_fu_346));
    pe_array_pe_val_0_1_fu_2365_p2 <= std_logic_vector(unsigned(mul_ln21_1_reg_3273) + unsigned(this_pe_val_0_1_read_assign_fu_350));
    pe_array_pe_val_0_2_fu_2370_p2 <= std_logic_vector(unsigned(mul_ln21_2_reg_3278) + unsigned(this_pe_val_0_2_read_assign_fu_354));
    pe_array_pe_val_0_3_fu_2375_p2 <= std_logic_vector(unsigned(mul_ln21_3_reg_3283) + unsigned(this_pe_val_0_3_read_assign_fu_358));
    pe_array_pe_val_1_0_fu_2499_p2 <= std_logic_vector(unsigned(mul_ln21_4_reg_3333) + unsigned(this_pe_val_1_0_read_assign_fu_362));
    pe_array_pe_val_1_1_fu_2380_p2 <= std_logic_vector(unsigned(mul_ln21_5_reg_3288) + unsigned(this_pe_val_1_1_read_assign_fu_366));
    pe_array_pe_val_1_2_fu_2385_p2 <= std_logic_vector(unsigned(mul_ln21_6_reg_3293) + unsigned(this_pe_val_1_2_read_assign_fu_370));
    pe_array_pe_val_1_3_fu_2390_p2 <= std_logic_vector(unsigned(mul_ln21_7_reg_3298) + unsigned(this_pe_val_1_3_read_assign_fu_374));
    pe_array_pe_val_2_0_fu_2504_p2 <= std_logic_vector(unsigned(mul_ln21_8_reg_3338) + unsigned(this_pe_val_2_0_read_assign_fu_378));
    pe_array_pe_val_2_1_fu_2395_p2 <= std_logic_vector(unsigned(mul_ln21_9_reg_3303) + unsigned(this_pe_val_2_1_read_assign_fu_382));
    pe_array_pe_val_2_2_fu_2400_p2 <= std_logic_vector(unsigned(mul_ln21_10_reg_3308) + unsigned(this_pe_val_2_2_read_assign_fu_386));
    pe_array_pe_val_2_3_fu_2405_p2 <= std_logic_vector(unsigned(mul_ln21_11_reg_3313) + unsigned(this_pe_val_2_3_read_assign_fu_390));
    pe_array_pe_val_3_0_fu_2509_p2 <= std_logic_vector(unsigned(mul_ln21_12_reg_3343) + unsigned(this_pe_val_3_0_read_assign_fu_394));
    pe_array_pe_val_3_1_fu_2410_p2 <= std_logic_vector(unsigned(mul_ln21_13_reg_3318) + unsigned(this_pe_val_3_1_read_assign_fu_398));
    pe_array_pe_val_3_2_fu_2415_p2 <= std_logic_vector(unsigned(mul_ln21_14_reg_3323) + unsigned(this_pe_val_3_2_read_assign_fu_402));
    pe_array_pe_val_3_3_fu_2420_p2 <= std_logic_vector(unsigned(mul_ln21_15_reg_3328) + unsigned(this_pe_val_3_3_read_assign_fu_406));
    select_ln137_11_fu_2013_p3 <= 
        M1_15_25_fu_2006_p3 when (and_ln137_1_reg_3081(0) = '1') else 
        ap_const_lv32_0;
    select_ln137_12_fu_1596_p3 <= 
        M2_14_1_reload when (and_ln137_1_fu_1554_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln137_19_fu_2077_p3 <= 
        M1_15_26_fu_2070_p3 when (and_ln137_2_reg_3107(0) = '1') else 
        ap_const_lv32_0;
    select_ln137_1_fu_1446_p3 <= 
        M2_13_1_reload when (and_ln137_fu_1368_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln137_20_fu_1746_p3 <= 
        M2_15_1_reload when (and_ln137_2_fu_1704_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln137_fu_1923_p3 <= 
        M1_15_24_fu_1917_p3 when (and_ln137_reg_3020(0) = '1') else 
        ap_const_lv32_0;
    select_ln138_10_fu_1612_p3 <= 
        M2_6_1_reload when (and_ln138_4_fu_1578_p2(0) = '1') else 
        select_ln138_9_fu_1604_p3;
    select_ln138_12_fu_2084_p3 <= 
        M1_15_26_fu_2070_p3 when (and_ln138_6_reg_3112(0) = '1') else 
        select_ln137_19_fu_2077_p3;
    select_ln138_13_fu_2091_p3 <= 
        M1_15_26_fu_2070_p3 when (and_ln138_7_reg_3117(0) = '1') else 
        select_ln138_12_fu_2084_p3;
    select_ln138_15_fu_1754_p3 <= 
        M2_11_1_reload when (and_ln138_6_fu_1722_p2(0) = '1') else 
        select_ln137_20_fu_1746_p3;
    select_ln138_16_fu_1762_p3 <= 
        M2_7_1_reload when (and_ln138_7_fu_1728_p2(0) = '1') else 
        select_ln138_15_fu_1754_p3;
    select_ln138_1_fu_1937_p3 <= 
        M1_15_24_fu_1917_p3 when (and_ln138_1_reg_3065(0) = '1') else 
        select_ln138_fu_1930_p3;
    select_ln138_3_fu_1454_p3 <= 
        M2_9_1_reload when (and_ln138_fu_1416_p2(0) = '1') else 
        select_ln137_1_fu_1446_p3;
    select_ln138_4_fu_1462_p3 <= 
        M2_5_1_reload when (and_ln138_1_fu_1428_p2(0) = '1') else 
        select_ln138_3_fu_1454_p3;
    select_ln138_6_fu_2020_p3 <= 
        M1_15_25_fu_2006_p3 when (and_ln138_3_reg_3086(0) = '1') else 
        select_ln137_11_fu_2013_p3;
    select_ln138_7_fu_2027_p3 <= 
        M1_15_25_fu_2006_p3 when (and_ln138_4_reg_3091(0) = '1') else 
        select_ln138_6_fu_2020_p3;
    select_ln138_9_fu_1604_p3 <= 
        M2_10_1_reload when (and_ln138_3_fu_1566_p2(0) = '1') else 
        select_ln137_12_fu_1596_p3;
    select_ln138_fu_1930_p3 <= 
        M1_15_24_fu_1917_p3 when (and_ln138_reg_3060(0) = '1') else 
        select_ln137_fu_1923_p3;
    shl_ln133_1_fu_1490_p3 <= (add_ln132_fu_1478_p2 & ap_const_lv2_0);
    shl_ln133_2_fu_1640_p3 <= (add_ln132_2_fu_1628_p2 & ap_const_lv2_0);
    shl_ln_fu_1250_p3 <= (ap_sig_allocacmp_i_1 & ap_const_lv2_0);
    this_pe_val_0_0_read_assign_out <= this_pe_val_0_0_read_assign_fu_346;

    this_pe_val_0_0_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_0_0_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_0_0_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_0_1_read_assign_out <= this_pe_val_0_1_read_assign_fu_350;

    this_pe_val_0_1_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_0_1_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_0_1_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_0_2_read_assign_out <= this_pe_val_0_2_read_assign_fu_354;

    this_pe_val_0_2_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_0_2_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_0_2_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_0_3_read_assign_out <= this_pe_val_0_3_read_assign_fu_358;

    this_pe_val_0_3_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_0_3_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_0_3_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_1_0_read_assign_out <= this_pe_val_1_0_read_assign_fu_362;

    this_pe_val_1_0_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_1_0_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_1_0_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_1_1_read_assign_out <= this_pe_val_1_1_read_assign_fu_366;

    this_pe_val_1_1_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_1_1_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_1_1_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_1_2_read_assign_out <= this_pe_val_1_2_read_assign_fu_370;

    this_pe_val_1_2_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_1_2_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_1_2_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_1_3_read_assign_out <= this_pe_val_1_3_read_assign_fu_374;

    this_pe_val_1_3_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_1_3_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_1_3_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_2_0_read_assign_out <= this_pe_val_2_0_read_assign_fu_378;

    this_pe_val_2_0_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_2_0_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_2_0_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_2_1_read_assign_out <= this_pe_val_2_1_read_assign_fu_382;

    this_pe_val_2_1_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_2_1_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_2_1_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_2_2_read_assign_out <= this_pe_val_2_2_read_assign_fu_386;

    this_pe_val_2_2_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_2_2_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_2_2_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_2_3_read_assign_out <= this_pe_val_2_3_read_assign_fu_390;

    this_pe_val_2_3_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_2_3_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_2_3_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_3_0_read_assign_out <= this_pe_val_3_0_read_assign_fu_394;

    this_pe_val_3_0_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_3_0_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_3_0_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_3_1_read_assign_out <= this_pe_val_3_1_read_assign_fu_398;

    this_pe_val_3_1_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_3_1_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_3_1_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_3_2_read_assign_out <= this_pe_val_3_2_read_assign_fu_402;

    this_pe_val_3_2_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_3_2_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_3_2_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_pe_val_3_3_read_assign_out <= this_pe_val_3_3_read_assign_fu_406;

    this_pe_val_3_3_read_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln126_reg_3000_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln126_reg_3000_pp0_iter3_reg = ap_const_lv1_1))) then 
            this_pe_val_3_3_read_assign_out_ap_vld <= ap_const_logic_1;
        else 
            this_pe_val_3_3_read_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_1346_p4 <= or_ln133_fu_1340_p2(6 downto 4);
    tmp_2_fu_1504_p3 <= add_ln132_1_fu_1484_p2(4 downto 4);
    tmp_3_fu_1518_p4 <= or_ln133_1_fu_1498_p2(6 downto 4);
    tmp_4_fu_1534_p3 <= add_ln132_fu_1478_p2(4 downto 4);
    tmp_5_fu_1654_p3 <= add_ln132_3_fu_1634_p2(4 downto 4);
    tmp_6_fu_1668_p4 <= or_ln133_2_fu_1648_p2(5 downto 4);
    tmp_7_fu_1684_p3 <= add_ln132_2_fu_1628_p2(3 downto 3);
    tmp_fu_1262_p4 <= ap_sig_allocacmp_i_1(3 downto 2);
    trunc_ln132_cast_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),5));
    trunc_ln133_1_fu_1320_p3 <= (trunc_ln133_fu_1246_p1 & ap_const_lv2_0);
    trunc_ln133_fu_1246_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    trunc_ln138_fu_1316_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    xor_ln136_1_fu_1662_p2 <= (tmp_5_fu_1654_p3 xor ap_const_lv1_1);
    xor_ln136_fu_1512_p2 <= (tmp_2_fu_1504_p3 xor ap_const_lv1_1);
    xor_ln137_1_fu_1692_p2 <= (tmp_7_fu_1684_p3 xor ap_const_lv1_1);
    xor_ln137_fu_1542_p2 <= (tmp_4_fu_1534_p3 xor ap_const_lv1_1);
    zext_ln136_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1250_p3),7));
end behav;
