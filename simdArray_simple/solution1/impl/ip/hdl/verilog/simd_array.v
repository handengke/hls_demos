// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="simd_array_simd_array,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.190000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3970,HLS_SYN_LUT=3755,HLS_VERSION=2021_1}" *)

module simd_array (
        ap_clk,
        ap_rst_n,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state36 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM1_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM1_USER_VALUE = 0;
parameter    C_M_AXI_GMEM1_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM1_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM1_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_AWADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_AWID;
output  [7:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [C_M_AXI_GMEM1_AWUSER_WIDTH - 1:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_WDATA;
output  [C_M_AXI_GMEM1_WSTRB_WIDTH - 1:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_WID;
output  [C_M_AXI_GMEM1_WUSER_WIDTH - 1:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [C_M_AXI_GMEM1_ADDR_WIDTH - 1:0] m_axi_gmem1_ARADDR;
output  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_ARID;
output  [7:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [C_M_AXI_GMEM1_ARUSER_WIDTH - 1:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [C_M_AXI_GMEM1_DATA_WIDTH - 1:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_RID;
input  [C_M_AXI_GMEM1_RUSER_WIDTH - 1:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [C_M_AXI_GMEM1_ID_WIDTH - 1:0] m_axi_gmem1_BID;
input  [C_M_AXI_GMEM1_BUSER_WIDTH - 1:0] m_axi_gmem1_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] din_a;
wire   [63:0] din_b;
wire   [63:0] out_r;
wire   [31:0] size;
wire   [31:0] opcode;
reg    gmem0_blk_n_AR;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [31:0] opcode_read_reg_920;
reg    gmem0_blk_n_R;
reg    ap_enable_reg_pp0_iter10;
reg    gmem0_blk_n_AW;
reg    ap_enable_reg_pp0_iter26;
reg    gmem0_blk_n_W;
reg    ap_enable_reg_pp0_iter27;
reg    gmem0_blk_n_B;
reg    ap_enable_reg_pp0_iter32;
reg    gmem1_blk_n_AR;
reg    gmem1_blk_n_R;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] reg_338;
reg    ap_enable_reg_pp0_iter20;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    gmem0_AWVALID;
wire    gmem0_AWREADY;
reg   [63:0] gmem0_AWADDR;
reg    gmem0_WVALID;
wire    gmem0_WREADY;
reg   [31:0] gmem0_WDATA;
reg    gmem0_ARVALID;
wire    gmem0_ARREADY;
reg   [63:0] gmem0_ARADDR;
wire    gmem0_RVALID;
reg    gmem0_RREADY;
wire   [31:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
reg    gmem0_BREADY;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
wire    gmem1_AWREADY;
wire    gmem1_WREADY;
reg    gmem1_ARVALID;
wire    gmem1_ARREADY;
reg   [63:0] gmem1_ARADDR;
wire    gmem1_RVALID;
reg    gmem1_RREADY;
wire   [31:0] gmem1_RDATA;
wire    gmem1_RLAST;
wire   [0:0] gmem1_RID;
wire   [0:0] gmem1_RUSER;
wire   [1:0] gmem1_RRESP;
wire    gmem1_BVALID;
wire   [1:0] gmem1_BRESP;
wire   [0:0] gmem1_BID;
wire   [0:0] gmem1_BUSER;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_predicate_op164_readreq_state6;
reg    ap_predicate_op165_readreq_state6;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
reg    ap_predicate_op220_read_state13;
reg    ap_predicate_op221_read_state13;
reg    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
wire    ap_block_state29_pp0_stage0_iter26;
reg    ap_predicate_op274_writereq_state29;
reg    ap_block_state29_io;
wire    ap_block_state30_pp0_stage0_iter27;
reg    ap_predicate_op282_write_state30;
reg    ap_block_state30_io;
wire    ap_block_state31_pp0_stage0_iter28;
wire    ap_block_state32_pp0_stage0_iter29;
wire    ap_block_state33_pp0_stage0_iter30;
wire    ap_block_state34_pp0_stage0_iter31;
reg    ap_predicate_op305_writeresp_state35;
reg    ap_block_state35_pp0_stage0_iter32;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] reg_338_pp0_iter21_reg;
reg   [31:0] reg_338_pp0_iter22_reg;
reg   [31:0] reg_338_pp0_iter23_reg;
reg   [31:0] reg_338_pp0_iter24_reg;
reg   [31:0] reg_338_pp0_iter25_reg;
reg   [31:0] reg_338_pp0_iter26_reg;
reg   [63:0] out_read_reg_924;
reg   [63:0] din_b_read_reg_929;
reg   [63:0] din_a_read_reg_934;
reg   [26:0] trunc_ln_reg_939;
wire   [32:0] tmp_fu_382_p3;
reg   [32:0] tmp_reg_944;
wire    ap_CS_fsm_state2;
wire   [5:0] select_ln23_fu_416_p3;
reg   [5:0] select_ln23_reg_952;
wire    ap_CS_fsm_pp0_stage0;
wire   [0:0] icmp_ln23_fu_393_p2;
reg   [5:0] select_ln23_reg_952_pp0_iter1_reg;
wire   [26:0] trunc_ln23_fu_438_p1;
reg   [26:0] trunc_ln23_reg_960;
wire   [63:0] add_ln23_2_fu_474_p2;
reg   [63:0] add_ln23_2_reg_965;
wire   [63:0] add_ln23_3_fu_479_p2;
reg   [63:0] add_ln23_3_reg_973;
wire   [63:0] add_ln23_4_fu_484_p2;
reg   [63:0] add_ln23_4_reg_981;
reg   [63:0] gmem0_addr_6_reg_989;
reg   [63:0] gmem1_addr_3_reg_995;
reg   [63:0] gmem0_addr_7_reg_1001;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter3_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter4_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter5_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter6_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter7_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter8_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter9_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter10_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter11_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter12_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter13_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter14_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter15_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter16_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter17_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter18_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter19_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter20_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter21_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter22_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter23_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter24_reg;
reg   [63:0] gmem0_addr_7_reg_1001_pp0_iter25_reg;
reg   [63:0] gmem0_addr_4_reg_1007;
reg   [63:0] gmem1_addr_2_reg_1013;
reg   [63:0] gmem0_addr_5_reg_1019;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter3_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter4_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter5_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter6_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter7_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter8_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter9_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter10_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter11_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter12_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter13_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter14_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter15_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter16_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter17_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter18_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter19_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter20_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter21_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter22_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter23_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter24_reg;
reg   [63:0] gmem0_addr_5_reg_1019_pp0_iter25_reg;
reg   [63:0] gmem0_addr_2_reg_1025;
reg   [63:0] gmem1_addr_1_reg_1031;
reg   [63:0] gmem0_addr_3_reg_1037;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter3_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter4_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter5_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter6_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter7_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter8_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter9_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter10_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter11_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter12_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter13_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter14_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter15_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter16_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter17_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter18_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter19_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter20_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter21_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter22_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter23_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter24_reg;
reg   [63:0] gmem0_addr_3_reg_1037_pp0_iter25_reg;
reg   [63:0] gmem0_addr_reg_1043;
reg   [63:0] gmem1_addr_reg_1049;
reg   [63:0] gmem0_addr_1_reg_1055;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter3_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter4_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter5_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter6_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter7_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter8_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter9_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter10_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter11_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter12_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter13_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter14_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter15_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter16_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter17_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter18_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter19_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter20_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter21_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter22_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter23_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter24_reg;
reg   [63:0] gmem0_addr_1_reg_1055_pp0_iter25_reg;
reg   [31:0] gmem0_addr_6_read_reg_1061;
reg   [31:0] gmem1_addr_3_read_reg_1066;
reg   [31:0] gmem0_addr_4_read_reg_1071;
reg   [31:0] gmem1_addr_2_read_reg_1076;
reg   [31:0] gmem0_addr_2_read_reg_1081;
reg   [31:0] gmem1_addr_1_read_reg_1086;
reg   [31:0] gmem0_addr_read_reg_1091;
reg   [31:0] gmem1_addr_read_reg_1096;
wire   [31:0] bitcast_ln28_fu_865_p1;
wire   [31:0] bitcast_ln28_1_fu_869_p1;
wire   [31:0] bitcast_ln31_fu_873_p1;
wire   [31:0] bitcast_ln31_1_fu_877_p1;
wire   [31:0] grp_fu_330_p2;
reg   [31:0] mul_reg_1141;
reg   [31:0] mul_reg_1141_pp0_iter16_reg;
reg   [31:0] mul_reg_1141_pp0_iter17_reg;
reg   [31:0] mul_reg_1141_pp0_iter18_reg;
reg   [31:0] mul_reg_1141_pp0_iter19_reg;
reg   [31:0] mul_reg_1141_pp0_iter20_reg;
reg   [31:0] mul_reg_1141_pp0_iter21_reg;
reg   [31:0] mul_reg_1141_pp0_iter22_reg;
reg   [31:0] mul_reg_1141_pp0_iter23_reg;
reg   [31:0] mul_reg_1141_pp0_iter24_reg;
reg   [31:0] mul_reg_1141_pp0_iter25_reg;
reg   [31:0] mul_reg_1141_pp0_iter26_reg;
wire   [31:0] grp_fu_334_p2;
reg   [31:0] div_reg_1146;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
wire  signed [63:0] sext_ln30_fu_519_p1;
wire  signed [63:0] sext_ln30_1_fu_544_p1;
wire  signed [63:0] sext_ln30_2_fu_569_p1;
wire  signed [63:0] sext_ln29_fu_609_p1;
wire  signed [63:0] sext_ln29_1_fu_634_p1;
wire  signed [63:0] sext_ln29_2_fu_659_p1;
wire  signed [63:0] sext_ln28_fu_699_p1;
wire  signed [63:0] sext_ln28_1_fu_724_p1;
wire  signed [63:0] sext_ln28_2_fu_749_p1;
wire  signed [63:0] sext_ln31_fu_789_p1;
wire  signed [63:0] sext_ln31_1_fu_814_p1;
wire  signed [63:0] sext_ln31_2_fu_839_p1;
wire   [31:0] bitcast_ln30_2_fu_881_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln29_2_fu_885_p1;
wire   [31:0] bitcast_ln28_2_fu_889_p1;
wire   [31:0] bitcast_ln31_2_fu_894_p1;
reg   [5:0] k_fu_124;
wire   [5:0] add_ln25_fu_442_p2;
reg   [27:0] i_fu_128;
wire   [27:0] select_ln23_1_fu_430_p3;
reg   [32:0] indvar_flatten_fu_132;
wire   [32:0] add_ln23_1_fu_398_p2;
reg   [31:0] grp_fu_326_p0;
reg   [31:0] grp_fu_326_p1;
wire   [31:0] grp_fu_330_p0;
wire   [31:0] grp_fu_330_p1;
wire   [31:0] grp_fu_334_p0;
wire   [31:0] grp_fu_334_p1;
wire   [31:0] add_ln20_fu_342_p2;
wire   [27:0] zext_ln23_fu_373_p1;
wire   [27:0] add_ln23_fu_376_p2;
wire   [0:0] icmp_ln25_fu_410_p2;
wire   [27:0] add_ln23_5_fu_424_p2;
wire   [33:0] add_ln31_mid2_v_v_fu_463_p3;
wire   [63:0] zext_ln23_1_fu_470_p1;
wire   [4:0] trunc_ln30_fu_489_p1;
wire   [6:0] shl_ln2_fu_492_p3;
wire   [63:0] zext_ln30_fu_500_p1;
wire   [63:0] add_ln30_fu_504_p2;
wire   [61:0] trunc_ln4_fu_509_p4;
wire   [63:0] add_ln30_1_fu_529_p2;
wire   [61:0] trunc_ln30_1_fu_534_p4;
wire   [63:0] add_ln30_2_fu_554_p2;
wire   [61:0] trunc_ln30_2_fu_559_p4;
wire   [4:0] trunc_ln29_fu_579_p1;
wire   [6:0] shl_ln1_fu_582_p3;
wire   [63:0] zext_ln29_fu_590_p1;
wire   [63:0] add_ln29_fu_594_p2;
wire   [61:0] trunc_ln3_fu_599_p4;
wire   [63:0] add_ln29_1_fu_619_p2;
wire   [61:0] trunc_ln29_1_fu_624_p4;
wire   [63:0] add_ln29_2_fu_644_p2;
wire   [61:0] trunc_ln29_2_fu_649_p4;
wire   [4:0] trunc_ln28_fu_669_p1;
wire   [6:0] shl_ln_fu_672_p3;
wire   [63:0] zext_ln28_fu_680_p1;
wire   [63:0] add_ln28_fu_684_p2;
wire   [61:0] trunc_ln2_fu_689_p4;
wire   [63:0] add_ln28_1_fu_709_p2;
wire   [61:0] trunc_ln28_1_fu_714_p4;
wire   [63:0] add_ln28_2_fu_734_p2;
wire   [61:0] trunc_ln28_2_fu_739_p4;
wire   [4:0] trunc_ln31_fu_759_p1;
wire   [6:0] shl_ln31_1_fu_762_p3;
wire   [63:0] zext_ln31_fu_770_p1;
wire   [63:0] add_ln31_fu_774_p2;
wire   [61:0] trunc_ln1_fu_779_p4;
wire   [63:0] add_ln31_1_fu_799_p2;
wire   [61:0] trunc_ln31_1_fu_804_p4;
wire   [63:0] add_ln31_2_fu_824_p2;
wire   [61:0] trunc_ln31_2_fu_829_p4;
reg    grp_fu_326_ce;
reg    grp_fu_330_ce;
reg    grp_fu_334_ce;
wire    ap_CS_fsm_state36;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state36_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_196;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
end

simd_array_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .din_a(din_a),
    .din_b(din_b),
    .out_r(out_r),
    .size(size),
    .opcode(opcode),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

simd_array_gmem0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem0_ARVALID),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(gmem0_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(gmem0_RREADY),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(gmem0_AWVALID),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(gmem0_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem0_WVALID),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(gmem0_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(gmem0_BREADY),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

simd_array_gmem1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM1_CACHE_VALUE ))
gmem1_m_axi_U(
    .AWVALID(m_axi_gmem1_AWVALID),
    .AWREADY(m_axi_gmem1_AWREADY),
    .AWADDR(m_axi_gmem1_AWADDR),
    .AWID(m_axi_gmem1_AWID),
    .AWLEN(m_axi_gmem1_AWLEN),
    .AWSIZE(m_axi_gmem1_AWSIZE),
    .AWBURST(m_axi_gmem1_AWBURST),
    .AWLOCK(m_axi_gmem1_AWLOCK),
    .AWCACHE(m_axi_gmem1_AWCACHE),
    .AWPROT(m_axi_gmem1_AWPROT),
    .AWQOS(m_axi_gmem1_AWQOS),
    .AWREGION(m_axi_gmem1_AWREGION),
    .AWUSER(m_axi_gmem1_AWUSER),
    .WVALID(m_axi_gmem1_WVALID),
    .WREADY(m_axi_gmem1_WREADY),
    .WDATA(m_axi_gmem1_WDATA),
    .WSTRB(m_axi_gmem1_WSTRB),
    .WLAST(m_axi_gmem1_WLAST),
    .WID(m_axi_gmem1_WID),
    .WUSER(m_axi_gmem1_WUSER),
    .ARVALID(m_axi_gmem1_ARVALID),
    .ARREADY(m_axi_gmem1_ARREADY),
    .ARADDR(m_axi_gmem1_ARADDR),
    .ARID(m_axi_gmem1_ARID),
    .ARLEN(m_axi_gmem1_ARLEN),
    .ARSIZE(m_axi_gmem1_ARSIZE),
    .ARBURST(m_axi_gmem1_ARBURST),
    .ARLOCK(m_axi_gmem1_ARLOCK),
    .ARCACHE(m_axi_gmem1_ARCACHE),
    .ARPROT(m_axi_gmem1_ARPROT),
    .ARQOS(m_axi_gmem1_ARQOS),
    .ARREGION(m_axi_gmem1_ARREGION),
    .ARUSER(m_axi_gmem1_ARUSER),
    .RVALID(m_axi_gmem1_RVALID),
    .RREADY(m_axi_gmem1_RREADY),
    .RDATA(m_axi_gmem1_RDATA),
    .RLAST(m_axi_gmem1_RLAST),
    .RID(m_axi_gmem1_RID),
    .RUSER(m_axi_gmem1_RUSER),
    .RRESP(m_axi_gmem1_RRESP),
    .BVALID(m_axi_gmem1_BVALID),
    .BREADY(m_axi_gmem1_BREADY),
    .BRESP(m_axi_gmem1_BRESP),
    .BID(m_axi_gmem1_BID),
    .BUSER(m_axi_gmem1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem1_ARVALID),
    .I_ARREADY(gmem1_ARREADY),
    .I_ARADDR(gmem1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem1_RVALID),
    .I_RREADY(gmem1_RREADY),
    .I_RDATA(gmem1_RDATA),
    .I_RID(gmem1_RID),
    .I_RUSER(gmem1_RUSER),
    .I_RRESP(gmem1_RRESP),
    .I_RLAST(gmem1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem1_BRESP),
    .I_BID(gmem1_BID),
    .I_BUSER(gmem1_BUSER)
);

simd_array_fadd_32ns_32ns_32_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_10_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_326_p0),
    .din1(grp_fu_326_p1),
    .ce(grp_fu_326_ce),
    .dout(grp_fu_326_p2)
);

simd_array_fmul_32ns_32ns_32_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_5_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_330_p0),
    .din1(grp_fu_330_p1),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p2)
);

simd_array_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .ce(grp_fu_334_ce),
    .dout(grp_fu_334_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter32 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_128 <= 28'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_128 <= select_ln23_1_fu_430_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_132 <= 33'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_132 <= add_ln23_1_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_fu_124 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_fu_124 <= add_ln25_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln23_2_reg_965 <= add_ln23_2_fu_474_p2;
        add_ln23_3_reg_973 <= add_ln23_3_fu_479_p2;
        add_ln23_4_reg_981 <= add_ln23_4_fu_484_p2;
        select_ln23_reg_952_pp0_iter1_reg <= select_ln23_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        din_a_read_reg_934 <= din_a;
        din_b_read_reg_929 <= din_b;
        opcode_read_reg_920 <= opcode;
        out_read_reg_924 <= out_r;
        trunc_ln_reg_939 <= {{add_ln20_fu_342_p2[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        div_reg_1146 <= grp_fu_334_p2;
        gmem0_addr_6_read_reg_1061 <= gmem0_RDATA;
        gmem0_addr_6_reg_989 <= sext_ln30_fu_519_p1;
        gmem0_addr_7_reg_1001 <= sext_ln30_2_fu_569_p1;
        gmem1_addr_3_read_reg_1066 <= gmem1_RDATA;
        gmem1_addr_3_reg_995 <= sext_ln30_1_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_1_reg_1055 <= sext_ln31_2_fu_839_p1;
        gmem0_addr_reg_1043 <= sext_ln31_fu_789_p1;
        gmem1_addr_reg_1049 <= sext_ln31_1_fu_814_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        gmem0_addr_1_reg_1055_pp0_iter10_reg <= gmem0_addr_1_reg_1055_pp0_iter9_reg;
        gmem0_addr_1_reg_1055_pp0_iter11_reg <= gmem0_addr_1_reg_1055_pp0_iter10_reg;
        gmem0_addr_1_reg_1055_pp0_iter12_reg <= gmem0_addr_1_reg_1055_pp0_iter11_reg;
        gmem0_addr_1_reg_1055_pp0_iter13_reg <= gmem0_addr_1_reg_1055_pp0_iter12_reg;
        gmem0_addr_1_reg_1055_pp0_iter14_reg <= gmem0_addr_1_reg_1055_pp0_iter13_reg;
        gmem0_addr_1_reg_1055_pp0_iter15_reg <= gmem0_addr_1_reg_1055_pp0_iter14_reg;
        gmem0_addr_1_reg_1055_pp0_iter16_reg <= gmem0_addr_1_reg_1055_pp0_iter15_reg;
        gmem0_addr_1_reg_1055_pp0_iter17_reg <= gmem0_addr_1_reg_1055_pp0_iter16_reg;
        gmem0_addr_1_reg_1055_pp0_iter18_reg <= gmem0_addr_1_reg_1055_pp0_iter17_reg;
        gmem0_addr_1_reg_1055_pp0_iter19_reg <= gmem0_addr_1_reg_1055_pp0_iter18_reg;
        gmem0_addr_1_reg_1055_pp0_iter20_reg <= gmem0_addr_1_reg_1055_pp0_iter19_reg;
        gmem0_addr_1_reg_1055_pp0_iter21_reg <= gmem0_addr_1_reg_1055_pp0_iter20_reg;
        gmem0_addr_1_reg_1055_pp0_iter22_reg <= gmem0_addr_1_reg_1055_pp0_iter21_reg;
        gmem0_addr_1_reg_1055_pp0_iter23_reg <= gmem0_addr_1_reg_1055_pp0_iter22_reg;
        gmem0_addr_1_reg_1055_pp0_iter24_reg <= gmem0_addr_1_reg_1055_pp0_iter23_reg;
        gmem0_addr_1_reg_1055_pp0_iter25_reg <= gmem0_addr_1_reg_1055_pp0_iter24_reg;
        gmem0_addr_1_reg_1055_pp0_iter3_reg <= gmem0_addr_1_reg_1055;
        gmem0_addr_1_reg_1055_pp0_iter4_reg <= gmem0_addr_1_reg_1055_pp0_iter3_reg;
        gmem0_addr_1_reg_1055_pp0_iter5_reg <= gmem0_addr_1_reg_1055_pp0_iter4_reg;
        gmem0_addr_1_reg_1055_pp0_iter6_reg <= gmem0_addr_1_reg_1055_pp0_iter5_reg;
        gmem0_addr_1_reg_1055_pp0_iter7_reg <= gmem0_addr_1_reg_1055_pp0_iter6_reg;
        gmem0_addr_1_reg_1055_pp0_iter8_reg <= gmem0_addr_1_reg_1055_pp0_iter7_reg;
        gmem0_addr_1_reg_1055_pp0_iter9_reg <= gmem0_addr_1_reg_1055_pp0_iter8_reg;
        gmem0_addr_3_reg_1037_pp0_iter10_reg <= gmem0_addr_3_reg_1037_pp0_iter9_reg;
        gmem0_addr_3_reg_1037_pp0_iter11_reg <= gmem0_addr_3_reg_1037_pp0_iter10_reg;
        gmem0_addr_3_reg_1037_pp0_iter12_reg <= gmem0_addr_3_reg_1037_pp0_iter11_reg;
        gmem0_addr_3_reg_1037_pp0_iter13_reg <= gmem0_addr_3_reg_1037_pp0_iter12_reg;
        gmem0_addr_3_reg_1037_pp0_iter14_reg <= gmem0_addr_3_reg_1037_pp0_iter13_reg;
        gmem0_addr_3_reg_1037_pp0_iter15_reg <= gmem0_addr_3_reg_1037_pp0_iter14_reg;
        gmem0_addr_3_reg_1037_pp0_iter16_reg <= gmem0_addr_3_reg_1037_pp0_iter15_reg;
        gmem0_addr_3_reg_1037_pp0_iter17_reg <= gmem0_addr_3_reg_1037_pp0_iter16_reg;
        gmem0_addr_3_reg_1037_pp0_iter18_reg <= gmem0_addr_3_reg_1037_pp0_iter17_reg;
        gmem0_addr_3_reg_1037_pp0_iter19_reg <= gmem0_addr_3_reg_1037_pp0_iter18_reg;
        gmem0_addr_3_reg_1037_pp0_iter20_reg <= gmem0_addr_3_reg_1037_pp0_iter19_reg;
        gmem0_addr_3_reg_1037_pp0_iter21_reg <= gmem0_addr_3_reg_1037_pp0_iter20_reg;
        gmem0_addr_3_reg_1037_pp0_iter22_reg <= gmem0_addr_3_reg_1037_pp0_iter21_reg;
        gmem0_addr_3_reg_1037_pp0_iter23_reg <= gmem0_addr_3_reg_1037_pp0_iter22_reg;
        gmem0_addr_3_reg_1037_pp0_iter24_reg <= gmem0_addr_3_reg_1037_pp0_iter23_reg;
        gmem0_addr_3_reg_1037_pp0_iter25_reg <= gmem0_addr_3_reg_1037_pp0_iter24_reg;
        gmem0_addr_3_reg_1037_pp0_iter3_reg <= gmem0_addr_3_reg_1037;
        gmem0_addr_3_reg_1037_pp0_iter4_reg <= gmem0_addr_3_reg_1037_pp0_iter3_reg;
        gmem0_addr_3_reg_1037_pp0_iter5_reg <= gmem0_addr_3_reg_1037_pp0_iter4_reg;
        gmem0_addr_3_reg_1037_pp0_iter6_reg <= gmem0_addr_3_reg_1037_pp0_iter5_reg;
        gmem0_addr_3_reg_1037_pp0_iter7_reg <= gmem0_addr_3_reg_1037_pp0_iter6_reg;
        gmem0_addr_3_reg_1037_pp0_iter8_reg <= gmem0_addr_3_reg_1037_pp0_iter7_reg;
        gmem0_addr_3_reg_1037_pp0_iter9_reg <= gmem0_addr_3_reg_1037_pp0_iter8_reg;
        gmem0_addr_5_reg_1019_pp0_iter10_reg <= gmem0_addr_5_reg_1019_pp0_iter9_reg;
        gmem0_addr_5_reg_1019_pp0_iter11_reg <= gmem0_addr_5_reg_1019_pp0_iter10_reg;
        gmem0_addr_5_reg_1019_pp0_iter12_reg <= gmem0_addr_5_reg_1019_pp0_iter11_reg;
        gmem0_addr_5_reg_1019_pp0_iter13_reg <= gmem0_addr_5_reg_1019_pp0_iter12_reg;
        gmem0_addr_5_reg_1019_pp0_iter14_reg <= gmem0_addr_5_reg_1019_pp0_iter13_reg;
        gmem0_addr_5_reg_1019_pp0_iter15_reg <= gmem0_addr_5_reg_1019_pp0_iter14_reg;
        gmem0_addr_5_reg_1019_pp0_iter16_reg <= gmem0_addr_5_reg_1019_pp0_iter15_reg;
        gmem0_addr_5_reg_1019_pp0_iter17_reg <= gmem0_addr_5_reg_1019_pp0_iter16_reg;
        gmem0_addr_5_reg_1019_pp0_iter18_reg <= gmem0_addr_5_reg_1019_pp0_iter17_reg;
        gmem0_addr_5_reg_1019_pp0_iter19_reg <= gmem0_addr_5_reg_1019_pp0_iter18_reg;
        gmem0_addr_5_reg_1019_pp0_iter20_reg <= gmem0_addr_5_reg_1019_pp0_iter19_reg;
        gmem0_addr_5_reg_1019_pp0_iter21_reg <= gmem0_addr_5_reg_1019_pp0_iter20_reg;
        gmem0_addr_5_reg_1019_pp0_iter22_reg <= gmem0_addr_5_reg_1019_pp0_iter21_reg;
        gmem0_addr_5_reg_1019_pp0_iter23_reg <= gmem0_addr_5_reg_1019_pp0_iter22_reg;
        gmem0_addr_5_reg_1019_pp0_iter24_reg <= gmem0_addr_5_reg_1019_pp0_iter23_reg;
        gmem0_addr_5_reg_1019_pp0_iter25_reg <= gmem0_addr_5_reg_1019_pp0_iter24_reg;
        gmem0_addr_5_reg_1019_pp0_iter3_reg <= gmem0_addr_5_reg_1019;
        gmem0_addr_5_reg_1019_pp0_iter4_reg <= gmem0_addr_5_reg_1019_pp0_iter3_reg;
        gmem0_addr_5_reg_1019_pp0_iter5_reg <= gmem0_addr_5_reg_1019_pp0_iter4_reg;
        gmem0_addr_5_reg_1019_pp0_iter6_reg <= gmem0_addr_5_reg_1019_pp0_iter5_reg;
        gmem0_addr_5_reg_1019_pp0_iter7_reg <= gmem0_addr_5_reg_1019_pp0_iter6_reg;
        gmem0_addr_5_reg_1019_pp0_iter8_reg <= gmem0_addr_5_reg_1019_pp0_iter7_reg;
        gmem0_addr_5_reg_1019_pp0_iter9_reg <= gmem0_addr_5_reg_1019_pp0_iter8_reg;
        gmem0_addr_7_reg_1001_pp0_iter10_reg <= gmem0_addr_7_reg_1001_pp0_iter9_reg;
        gmem0_addr_7_reg_1001_pp0_iter11_reg <= gmem0_addr_7_reg_1001_pp0_iter10_reg;
        gmem0_addr_7_reg_1001_pp0_iter12_reg <= gmem0_addr_7_reg_1001_pp0_iter11_reg;
        gmem0_addr_7_reg_1001_pp0_iter13_reg <= gmem0_addr_7_reg_1001_pp0_iter12_reg;
        gmem0_addr_7_reg_1001_pp0_iter14_reg <= gmem0_addr_7_reg_1001_pp0_iter13_reg;
        gmem0_addr_7_reg_1001_pp0_iter15_reg <= gmem0_addr_7_reg_1001_pp0_iter14_reg;
        gmem0_addr_7_reg_1001_pp0_iter16_reg <= gmem0_addr_7_reg_1001_pp0_iter15_reg;
        gmem0_addr_7_reg_1001_pp0_iter17_reg <= gmem0_addr_7_reg_1001_pp0_iter16_reg;
        gmem0_addr_7_reg_1001_pp0_iter18_reg <= gmem0_addr_7_reg_1001_pp0_iter17_reg;
        gmem0_addr_7_reg_1001_pp0_iter19_reg <= gmem0_addr_7_reg_1001_pp0_iter18_reg;
        gmem0_addr_7_reg_1001_pp0_iter20_reg <= gmem0_addr_7_reg_1001_pp0_iter19_reg;
        gmem0_addr_7_reg_1001_pp0_iter21_reg <= gmem0_addr_7_reg_1001_pp0_iter20_reg;
        gmem0_addr_7_reg_1001_pp0_iter22_reg <= gmem0_addr_7_reg_1001_pp0_iter21_reg;
        gmem0_addr_7_reg_1001_pp0_iter23_reg <= gmem0_addr_7_reg_1001_pp0_iter22_reg;
        gmem0_addr_7_reg_1001_pp0_iter24_reg <= gmem0_addr_7_reg_1001_pp0_iter23_reg;
        gmem0_addr_7_reg_1001_pp0_iter25_reg <= gmem0_addr_7_reg_1001_pp0_iter24_reg;
        gmem0_addr_7_reg_1001_pp0_iter3_reg <= gmem0_addr_7_reg_1001;
        gmem0_addr_7_reg_1001_pp0_iter4_reg <= gmem0_addr_7_reg_1001_pp0_iter3_reg;
        gmem0_addr_7_reg_1001_pp0_iter5_reg <= gmem0_addr_7_reg_1001_pp0_iter4_reg;
        gmem0_addr_7_reg_1001_pp0_iter6_reg <= gmem0_addr_7_reg_1001_pp0_iter5_reg;
        gmem0_addr_7_reg_1001_pp0_iter7_reg <= gmem0_addr_7_reg_1001_pp0_iter6_reg;
        gmem0_addr_7_reg_1001_pp0_iter8_reg <= gmem0_addr_7_reg_1001_pp0_iter7_reg;
        gmem0_addr_7_reg_1001_pp0_iter9_reg <= gmem0_addr_7_reg_1001_pp0_iter8_reg;
        mul_reg_1141_pp0_iter16_reg <= mul_reg_1141;
        mul_reg_1141_pp0_iter17_reg <= mul_reg_1141_pp0_iter16_reg;
        mul_reg_1141_pp0_iter18_reg <= mul_reg_1141_pp0_iter17_reg;
        mul_reg_1141_pp0_iter19_reg <= mul_reg_1141_pp0_iter18_reg;
        mul_reg_1141_pp0_iter20_reg <= mul_reg_1141_pp0_iter19_reg;
        mul_reg_1141_pp0_iter21_reg <= mul_reg_1141_pp0_iter20_reg;
        mul_reg_1141_pp0_iter22_reg <= mul_reg_1141_pp0_iter21_reg;
        mul_reg_1141_pp0_iter23_reg <= mul_reg_1141_pp0_iter22_reg;
        mul_reg_1141_pp0_iter24_reg <= mul_reg_1141_pp0_iter23_reg;
        mul_reg_1141_pp0_iter25_reg <= mul_reg_1141_pp0_iter24_reg;
        mul_reg_1141_pp0_iter26_reg <= mul_reg_1141_pp0_iter25_reg;
        reg_338_pp0_iter21_reg <= reg_338;
        reg_338_pp0_iter22_reg <= reg_338_pp0_iter21_reg;
        reg_338_pp0_iter23_reg <= reg_338_pp0_iter22_reg;
        reg_338_pp0_iter24_reg <= reg_338_pp0_iter23_reg;
        reg_338_pp0_iter25_reg <= reg_338_pp0_iter24_reg;
        reg_338_pp0_iter26_reg <= reg_338_pp0_iter25_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_2_read_reg_1081 <= gmem0_RDATA;
        gmem0_addr_2_reg_1025 <= sext_ln28_fu_699_p1;
        gmem0_addr_3_reg_1037 <= sext_ln28_2_fu_749_p1;
        gmem1_addr_1_read_reg_1086 <= gmem1_RDATA;
        gmem1_addr_1_reg_1031 <= sext_ln28_1_fu_724_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_4_read_reg_1071 <= gmem0_RDATA;
        gmem0_addr_4_reg_1007 <= sext_ln29_fu_609_p1;
        gmem0_addr_5_reg_1019 <= sext_ln29_2_fu_659_p1;
        gmem1_addr_2_read_reg_1076 <= gmem1_RDATA;
        gmem1_addr_2_reg_1013 <= sext_ln29_1_fu_634_p1;
        mul_reg_1141 <= grp_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op220_read_state13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_read_reg_1091 <= gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op221_read_state13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_read_reg_1096 <= gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter20 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_338 <= grp_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln23_reg_952 <= select_ln23_fu_416_p3;
        trunc_ln23_reg_960 <= trunc_ln23_fu_438_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_944[32 : 5] <= tmp_fu_382_p3[32 : 5];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln23_fu_393_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((ap_predicate_op164_readreq_state6 == 1'b1)) begin
            gmem0_ARADDR = gmem0_addr_reg_1043;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            gmem0_ARADDR = gmem0_addr_2_reg_1025;
        end else if ((opcode_read_reg_920 == 32'd2)) begin
            gmem0_ARADDR = gmem0_addr_4_reg_1007;
        end else if ((opcode_read_reg_920 == 32'd3)) begin
            gmem0_ARADDR = gmem0_addr_6_reg_989;
        end else begin
            gmem0_ARADDR = 'bx;
        end
    end else begin
        gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op164_readreq_state6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gmem0_ARVALID = 1'b1;
    end else begin
        gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_predicate_op274_writereq_state29 == 1'b1)) begin
            gmem0_AWADDR = gmem0_addr_1_reg_1055_pp0_iter25_reg;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            gmem0_AWADDR = gmem0_addr_3_reg_1037_pp0_iter25_reg;
        end else if ((opcode_read_reg_920 == 32'd2)) begin
            gmem0_AWADDR = gmem0_addr_5_reg_1019_pp0_iter25_reg;
        end else if ((opcode_read_reg_920 == 32'd3)) begin
            gmem0_AWADDR = gmem0_addr_7_reg_1001_pp0_iter25_reg;
        end else begin
            gmem0_AWADDR = 'bx;
        end
    end else begin
        gmem0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op274_writereq_state29 == 1'b1) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem0_AWVALID = 1'b1;
    end else begin
        gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op305_writeresp_state35 == 1'b1) & (ap_enable_reg_pp0_iter32 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem0_BREADY = 1'b1;
    end else begin
        gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op220_read_state13 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem0_RREADY = 1'b1;
    end else begin
        gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op282_write_state30 == 1'b1)) begin
            gmem0_WDATA = bitcast_ln31_2_fu_894_p1;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            gmem0_WDATA = bitcast_ln28_2_fu_889_p1;
        end else if ((opcode_read_reg_920 == 32'd2)) begin
            gmem0_WDATA = bitcast_ln29_2_fu_885_p1;
        end else if ((opcode_read_reg_920 == 32'd3)) begin
            gmem0_WDATA = bitcast_ln30_2_fu_881_p1;
        end else begin
            gmem0_WDATA = 'bx;
        end
    end else begin
        gmem0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op282_write_state30 == 1'b1) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem0_WVALID = 1'b1;
    end else begin
        gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter26 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter32 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter27 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((ap_predicate_op165_readreq_state6 == 1'b1)) begin
            gmem1_ARADDR = gmem1_addr_reg_1049;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            gmem1_ARADDR = gmem1_addr_1_reg_1031;
        end else if ((opcode_read_reg_920 == 32'd2)) begin
            gmem1_ARADDR = gmem1_addr_2_reg_1013;
        end else if ((opcode_read_reg_920 == 32'd3)) begin
            gmem1_ARADDR = gmem1_addr_3_reg_995;
        end else begin
            gmem1_ARADDR = 'bx;
        end
    end else begin
        gmem1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op165_readreq_state6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gmem1_ARVALID = 1'b1;
    end else begin
        gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op221_read_state13 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem1_RREADY = 1'b1;
    end else begin
        gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd3) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd2) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (opcode_read_reg_920 == 32'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_326_ce = 1'b1;
    end else begin
        grp_fu_326_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((1'b1 == ap_condition_196)) begin
            grp_fu_326_p0 = bitcast_ln31_fu_873_p1;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            grp_fu_326_p0 = bitcast_ln28_fu_865_p1;
        end else begin
            grp_fu_326_p0 = 'bx;
        end
    end else begin
        grp_fu_326_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((1'b1 == ap_condition_196)) begin
            grp_fu_326_p1 = bitcast_ln31_1_fu_877_p1;
        end else if ((opcode_read_reg_920 == 32'd1)) begin
            grp_fu_326_p1 = bitcast_ln28_1_fu_869_p1;
        end else begin
            grp_fu_326_p1 = 'bx;
        end
    end else begin
        grp_fu_326_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_334_ce = 1'b1;
    end else begin
        grp_fu_334_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln23_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_342_p2 = ($signed(size) + $signed(32'd4294967295));

assign add_ln23_1_fu_398_p2 = (indvar_flatten_fu_132 + 33'd1);

assign add_ln23_2_fu_474_p2 = (zext_ln23_1_fu_470_p1 + din_a_read_reg_934);

assign add_ln23_3_fu_479_p2 = (zext_ln23_1_fu_470_p1 + din_b_read_reg_929);

assign add_ln23_4_fu_484_p2 = (zext_ln23_1_fu_470_p1 + out_read_reg_924);

assign add_ln23_5_fu_424_p2 = (i_fu_128 + 28'd1);

assign add_ln23_fu_376_p2 = (zext_ln23_fu_373_p1 + 28'd1);

assign add_ln25_fu_442_p2 = (select_ln23_fu_416_p3 + 6'd1);

assign add_ln28_1_fu_709_p2 = (zext_ln28_fu_680_p1 + add_ln23_3_reg_973);

assign add_ln28_2_fu_734_p2 = (zext_ln28_fu_680_p1 + add_ln23_4_reg_981);

assign add_ln28_fu_684_p2 = (zext_ln28_fu_680_p1 + add_ln23_2_reg_965);

assign add_ln29_1_fu_619_p2 = (zext_ln29_fu_590_p1 + add_ln23_3_reg_973);

assign add_ln29_2_fu_644_p2 = (zext_ln29_fu_590_p1 + add_ln23_4_reg_981);

assign add_ln29_fu_594_p2 = (zext_ln29_fu_590_p1 + add_ln23_2_reg_965);

assign add_ln30_1_fu_529_p2 = (zext_ln30_fu_500_p1 + add_ln23_3_reg_973);

assign add_ln30_2_fu_554_p2 = (zext_ln30_fu_500_p1 + add_ln23_4_reg_981);

assign add_ln30_fu_504_p2 = (zext_ln30_fu_500_p1 + add_ln23_2_reg_965);

assign add_ln31_1_fu_799_p2 = (zext_ln31_fu_770_p1 + add_ln23_3_reg_973);

assign add_ln31_2_fu_824_p2 = (zext_ln31_fu_770_p1 + add_ln23_4_reg_981);

assign add_ln31_fu_774_p2 = (zext_ln31_fu_770_p1 + add_ln23_2_reg_965);

assign add_ln31_mid2_v_v_fu_463_p3 = {{trunc_ln23_reg_960}, {7'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter32 == 1'b1) & (((ap_predicate_op305_writeresp_state35 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op221_read_state13 == 1'b1) & (gmem1_RVALID == 1'b0)) | ((ap_predicate_op220_read_state13 == 1'b1) & (gmem0_RVALID == 1'b0)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state30_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (((ap_predicate_op305_writeresp_state35 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op221_read_state13 == 1'b1) & (gmem1_RVALID == 1'b0)) | ((ap_predicate_op220_read_state13 == 1'b1) & (gmem0_RVALID == 1'b0)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state30_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter32 == 1'b1) & (((ap_predicate_op305_writeresp_state35 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((ap_predicate_op221_read_state13 == 1'b1) & (gmem1_RVALID == 1'b0)) | ((ap_predicate_op220_read_state13 == 1'b1) & (gmem0_RVALID == 1'b0)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)))));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter10 = (((ap_predicate_op221_read_state13 == 1'b1) & (gmem1_RVALID == 1'b0)) | ((ap_predicate_op220_read_state13 == 1'b1) & (gmem0_RVALID == 1'b0)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem1_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_RVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)));
end

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = (((ap_predicate_op274_writereq_state29 == 1'b1) & (gmem0_AWREADY == 1'b0)) | ((gmem0_AWREADY == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_AWREADY == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_AWREADY == 1'b0) & (opcode_read_reg_920 == 32'd1)));
end

assign ap_block_state29_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = (((ap_predicate_op282_write_state30 == 1'b1) & (gmem0_WREADY == 1'b0)) | ((gmem0_WREADY == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_WREADY == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_WREADY == 1'b0) & (opcode_read_reg_920 == 32'd1)));
end

assign ap_block_state30_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_pp0_stage0_iter32 = (((ap_predicate_op305_writeresp_state35 == 1'b1) & (gmem0_BVALID == 1'b0)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_BVALID == 1'b0) & (opcode_read_reg_920 == 32'd1)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((ap_predicate_op165_readreq_state6 == 1'b1) & (gmem1_ARREADY == 1'b0)) | ((ap_predicate_op164_readreq_state6 == 1'b1) & (gmem0_ARREADY == 1'b0)) | ((gmem1_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem1_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem1_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd1)) | ((gmem0_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd3)) | ((gmem0_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd2)) | ((gmem0_ARREADY == 1'b0) & (opcode_read_reg_920 == 32'd1)));
end

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_196 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op164_readreq_state6 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op165_readreq_state6 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op220_read_state13 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op221_read_state13 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op274_writereq_state29 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op282_write_state30 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_predicate_op305_writeresp_state35 = (~(opcode_read_reg_920 == 32'd0) & ~(opcode_read_reg_920 == 32'd3) & ~(opcode_read_reg_920 == 32'd2) & ~(opcode_read_reg_920 == 32'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln28_1_fu_869_p1 = gmem1_addr_1_read_reg_1086;

assign bitcast_ln28_2_fu_889_p1 = reg_338_pp0_iter26_reg;

assign bitcast_ln28_fu_865_p1 = gmem0_addr_2_read_reg_1081;

assign bitcast_ln29_2_fu_885_p1 = mul_reg_1141_pp0_iter26_reg;

assign bitcast_ln30_2_fu_881_p1 = div_reg_1146;

assign bitcast_ln31_1_fu_877_p1 = gmem1_addr_read_reg_1096;

assign bitcast_ln31_2_fu_894_p1 = reg_338_pp0_iter26_reg;

assign bitcast_ln31_fu_873_p1 = gmem0_addr_read_reg_1091;

assign grp_fu_330_p0 = gmem0_addr_4_read_reg_1071;

assign grp_fu_330_p1 = gmem1_addr_2_read_reg_1076;

assign grp_fu_334_p0 = gmem0_addr_6_read_reg_1061;

assign grp_fu_334_p1 = gmem1_addr_3_read_reg_1066;

assign icmp_ln23_fu_393_p2 = ((indvar_flatten_fu_132 == tmp_reg_944) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_410_p2 = ((k_fu_124 == 6'd32) ? 1'b1 : 1'b0);

assign select_ln23_1_fu_430_p3 = ((icmp_ln25_fu_410_p2[0:0] == 1'b1) ? add_ln23_5_fu_424_p2 : i_fu_128);

assign select_ln23_fu_416_p3 = ((icmp_ln25_fu_410_p2[0:0] == 1'b1) ? 6'd0 : k_fu_124);

assign sext_ln28_1_fu_724_p1 = $signed(trunc_ln28_1_fu_714_p4);

assign sext_ln28_2_fu_749_p1 = $signed(trunc_ln28_2_fu_739_p4);

assign sext_ln28_fu_699_p1 = $signed(trunc_ln2_fu_689_p4);

assign sext_ln29_1_fu_634_p1 = $signed(trunc_ln29_1_fu_624_p4);

assign sext_ln29_2_fu_659_p1 = $signed(trunc_ln29_2_fu_649_p4);

assign sext_ln29_fu_609_p1 = $signed(trunc_ln3_fu_599_p4);

assign sext_ln30_1_fu_544_p1 = $signed(trunc_ln30_1_fu_534_p4);

assign sext_ln30_2_fu_569_p1 = $signed(trunc_ln30_2_fu_559_p4);

assign sext_ln30_fu_519_p1 = $signed(trunc_ln4_fu_509_p4);

assign sext_ln31_1_fu_814_p1 = $signed(trunc_ln31_1_fu_804_p4);

assign sext_ln31_2_fu_839_p1 = $signed(trunc_ln31_2_fu_829_p4);

assign sext_ln31_fu_789_p1 = $signed(trunc_ln1_fu_779_p4);

assign shl_ln1_fu_582_p3 = {{trunc_ln29_fu_579_p1}, {2'd0}};

assign shl_ln2_fu_492_p3 = {{trunc_ln30_fu_489_p1}, {2'd0}};

assign shl_ln31_1_fu_762_p3 = {{trunc_ln31_fu_759_p1}, {2'd0}};

assign shl_ln_fu_672_p3 = {{trunc_ln28_fu_669_p1}, {2'd0}};

assign tmp_fu_382_p3 = {{add_ln23_fu_376_p2}, {5'd0}};

assign trunc_ln1_fu_779_p4 = {{add_ln31_fu_774_p2[63:2]}};

assign trunc_ln23_fu_438_p1 = select_ln23_1_fu_430_p3[26:0];

assign trunc_ln28_1_fu_714_p4 = {{add_ln28_1_fu_709_p2[63:2]}};

assign trunc_ln28_2_fu_739_p4 = {{add_ln28_2_fu_734_p2[63:2]}};

assign trunc_ln28_fu_669_p1 = select_ln23_reg_952_pp0_iter1_reg[4:0];

assign trunc_ln29_1_fu_624_p4 = {{add_ln29_1_fu_619_p2[63:2]}};

assign trunc_ln29_2_fu_649_p4 = {{add_ln29_2_fu_644_p2[63:2]}};

assign trunc_ln29_fu_579_p1 = select_ln23_reg_952_pp0_iter1_reg[4:0];

assign trunc_ln2_fu_689_p4 = {{add_ln28_fu_684_p2[63:2]}};

assign trunc_ln30_1_fu_534_p4 = {{add_ln30_1_fu_529_p2[63:2]}};

assign trunc_ln30_2_fu_559_p4 = {{add_ln30_2_fu_554_p2[63:2]}};

assign trunc_ln30_fu_489_p1 = select_ln23_reg_952_pp0_iter1_reg[4:0];

assign trunc_ln31_1_fu_804_p4 = {{add_ln31_1_fu_799_p2[63:2]}};

assign trunc_ln31_2_fu_829_p4 = {{add_ln31_2_fu_824_p2[63:2]}};

assign trunc_ln31_fu_759_p1 = select_ln23_reg_952_pp0_iter1_reg[4:0];

assign trunc_ln3_fu_599_p4 = {{add_ln29_fu_594_p2[63:2]}};

assign trunc_ln4_fu_509_p4 = {{add_ln30_fu_504_p2[63:2]}};

assign zext_ln23_1_fu_470_p1 = add_ln31_mid2_v_v_fu_463_p3;

assign zext_ln23_fu_373_p1 = trunc_ln_reg_939;

assign zext_ln28_fu_680_p1 = shl_ln_fu_672_p3;

assign zext_ln29_fu_590_p1 = shl_ln1_fu_582_p3;

assign zext_ln30_fu_500_p1 = shl_ln2_fu_492_p3;

assign zext_ln31_fu_770_p1 = shl_ln31_1_fu_762_p3;

always @ (posedge ap_clk) begin
    tmp_reg_944[4:0] <= 5'b00000;
end

endmodule //simd_array
