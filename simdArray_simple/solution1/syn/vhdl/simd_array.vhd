-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simd_array is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of simd_array is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simd_array_simd_array,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.190000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3970,HLS_SYN_LUT=3755,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal din_a : STD_LOGIC_VECTOR (63 downto 0);
    signal din_b : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal opcode : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal opcode_read_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op164_readreq_state6 : BOOLEAN;
    signal ap_predicate_op165_readreq_state6 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_predicate_op220_read_state13 : BOOLEAN;
    signal ap_predicate_op221_read_state13 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_predicate_op274_writereq_state29 : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter27 : BOOLEAN;
    signal ap_predicate_op282_write_state30 : BOOLEAN;
    signal ap_block_state30_io : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter31 : BOOLEAN;
    signal ap_predicate_op305_writeresp_state35 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_338_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_338_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal out_read_reg_924 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_b_read_reg_929 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_a_read_reg_934 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_reg_939 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_382_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_reg_944 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln23_fu_416_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln23_reg_952 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal icmp_ln23_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_reg_952_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln23_fu_438_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln23_reg_960 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln23_2_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_2_reg_965 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_3_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_3_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_4_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_4_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_6_reg_989 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_addr_3_reg_995 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_7_reg_1001_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_4_reg_1007 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_addr_2_reg_1013 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_5_reg_1019_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_2_reg_1025 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_addr_1_reg_1031 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_reg_1037_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_reg_1043 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_addr_reg_1049 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_reg_1055_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_6_read_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_3_read_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_4_read_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_2_read_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_2_read_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_1_read_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_read_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_addr_read_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_1_fu_877_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal sext_ln30_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_1_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_2_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln29_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln29_1_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln29_2_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_1_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_2_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_1_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_2_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln30_2_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln29_2_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln31_2_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_124 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_128 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln23_1_fu_430_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal indvar_flatten_fu_132 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln23_1_fu_398_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_326_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_fu_373_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln23_fu_376_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln25_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_5_fu_424_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln31_mid2_v_v_fu_463_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln23_1_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_fu_489_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_492_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_509_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln30_1_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_1_fu_534_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln30_2_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln30_2_fu_559_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln29_fu_579_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_582_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln29_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln29_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_599_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln29_1_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_1_fu_624_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln29_2_fu_644_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln29_2_fu_649_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln28_fu_669_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_672_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_fu_684_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_689_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln28_1_fu_709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_1_fu_714_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln28_2_fu_734_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_2_fu_739_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln31_fu_759_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln31_1_fu_762_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_774_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_779_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln31_1_fu_799_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_1_fu_804_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln31_2_fu_824_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_2_fu_829_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_326_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_334_ce : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_196 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component simd_array_fadd_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simd_array_fmul_32ns_32ns_32_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simd_array_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component simd_array_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        din_a : OUT STD_LOGIC_VECTOR (63 downto 0);
        din_b : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        opcode : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component simd_array_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component simd_array_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component simd_array_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        din_a => din_a,
        din_b => din_b,
        out_r => out_r,
        size => size,
        opcode => opcode,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component simd_array_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => gmem0_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => gmem0_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => gmem0_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component simd_array_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => gmem1_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    fadd_32ns_32ns_32_10_full_dsp_1_U1 : component simd_array_fadd_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_326_p0,
        din1 => grp_fu_326_p1,
        ce => grp_fu_326_ce,
        dout => grp_fu_326_p2);

    fmul_32ns_32ns_32_5_max_dsp_1_U2 : component simd_array_fmul_32ns_32ns_32_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U3 : component simd_array_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_334_p0,
        din1 => grp_fu_334_p1,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_128 <= ap_const_lv28_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_128 <= select_ln23_1_fu_430_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_132 <= ap_const_lv33_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_fu_132 <= add_ln23_1_fu_398_p2;
            end if; 
        end if;
    end process;

    k_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_fu_124 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_fu_124 <= add_ln25_fu_442_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_2_reg_965 <= add_ln23_2_fu_474_p2;
                add_ln23_3_reg_973 <= add_ln23_3_fu_479_p2;
                add_ln23_4_reg_981 <= add_ln23_4_fu_484_p2;
                select_ln23_reg_952_pp0_iter1_reg <= select_ln23_reg_952;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                din_a_read_reg_934 <= din_a;
                din_b_read_reg_929 <= din_b;
                opcode_read_reg_920 <= opcode;
                out_read_reg_924 <= out_r;
                trunc_ln_reg_939 <= add_ln20_fu_342_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                div_reg_1146 <= grp_fu_334_p2;
                gmem0_addr_6_read_reg_1061 <= gmem0_RDATA;
                gmem0_addr_6_reg_989 <= sext_ln30_fu_519_p1;
                gmem0_addr_7_reg_1001 <= sext_ln30_2_fu_569_p1;
                gmem1_addr_3_read_reg_1066 <= gmem1_RDATA;
                gmem1_addr_3_reg_995 <= sext_ln30_1_fu_544_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_1_reg_1055 <= sext_ln31_2_fu_839_p1;
                gmem0_addr_reg_1043 <= sext_ln31_fu_789_p1;
                gmem1_addr_reg_1049 <= sext_ln31_1_fu_814_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                gmem0_addr_1_reg_1055_pp0_iter10_reg <= gmem0_addr_1_reg_1055_pp0_iter9_reg;
                gmem0_addr_1_reg_1055_pp0_iter11_reg <= gmem0_addr_1_reg_1055_pp0_iter10_reg;
                gmem0_addr_1_reg_1055_pp0_iter12_reg <= gmem0_addr_1_reg_1055_pp0_iter11_reg;
                gmem0_addr_1_reg_1055_pp0_iter13_reg <= gmem0_addr_1_reg_1055_pp0_iter12_reg;
                gmem0_addr_1_reg_1055_pp0_iter14_reg <= gmem0_addr_1_reg_1055_pp0_iter13_reg;
                gmem0_addr_1_reg_1055_pp0_iter15_reg <= gmem0_addr_1_reg_1055_pp0_iter14_reg;
                gmem0_addr_1_reg_1055_pp0_iter16_reg <= gmem0_addr_1_reg_1055_pp0_iter15_reg;
                gmem0_addr_1_reg_1055_pp0_iter17_reg <= gmem0_addr_1_reg_1055_pp0_iter16_reg;
                gmem0_addr_1_reg_1055_pp0_iter18_reg <= gmem0_addr_1_reg_1055_pp0_iter17_reg;
                gmem0_addr_1_reg_1055_pp0_iter19_reg <= gmem0_addr_1_reg_1055_pp0_iter18_reg;
                gmem0_addr_1_reg_1055_pp0_iter20_reg <= gmem0_addr_1_reg_1055_pp0_iter19_reg;
                gmem0_addr_1_reg_1055_pp0_iter21_reg <= gmem0_addr_1_reg_1055_pp0_iter20_reg;
                gmem0_addr_1_reg_1055_pp0_iter22_reg <= gmem0_addr_1_reg_1055_pp0_iter21_reg;
                gmem0_addr_1_reg_1055_pp0_iter23_reg <= gmem0_addr_1_reg_1055_pp0_iter22_reg;
                gmem0_addr_1_reg_1055_pp0_iter24_reg <= gmem0_addr_1_reg_1055_pp0_iter23_reg;
                gmem0_addr_1_reg_1055_pp0_iter25_reg <= gmem0_addr_1_reg_1055_pp0_iter24_reg;
                gmem0_addr_1_reg_1055_pp0_iter3_reg <= gmem0_addr_1_reg_1055;
                gmem0_addr_1_reg_1055_pp0_iter4_reg <= gmem0_addr_1_reg_1055_pp0_iter3_reg;
                gmem0_addr_1_reg_1055_pp0_iter5_reg <= gmem0_addr_1_reg_1055_pp0_iter4_reg;
                gmem0_addr_1_reg_1055_pp0_iter6_reg <= gmem0_addr_1_reg_1055_pp0_iter5_reg;
                gmem0_addr_1_reg_1055_pp0_iter7_reg <= gmem0_addr_1_reg_1055_pp0_iter6_reg;
                gmem0_addr_1_reg_1055_pp0_iter8_reg <= gmem0_addr_1_reg_1055_pp0_iter7_reg;
                gmem0_addr_1_reg_1055_pp0_iter9_reg <= gmem0_addr_1_reg_1055_pp0_iter8_reg;
                gmem0_addr_3_reg_1037_pp0_iter10_reg <= gmem0_addr_3_reg_1037_pp0_iter9_reg;
                gmem0_addr_3_reg_1037_pp0_iter11_reg <= gmem0_addr_3_reg_1037_pp0_iter10_reg;
                gmem0_addr_3_reg_1037_pp0_iter12_reg <= gmem0_addr_3_reg_1037_pp0_iter11_reg;
                gmem0_addr_3_reg_1037_pp0_iter13_reg <= gmem0_addr_3_reg_1037_pp0_iter12_reg;
                gmem0_addr_3_reg_1037_pp0_iter14_reg <= gmem0_addr_3_reg_1037_pp0_iter13_reg;
                gmem0_addr_3_reg_1037_pp0_iter15_reg <= gmem0_addr_3_reg_1037_pp0_iter14_reg;
                gmem0_addr_3_reg_1037_pp0_iter16_reg <= gmem0_addr_3_reg_1037_pp0_iter15_reg;
                gmem0_addr_3_reg_1037_pp0_iter17_reg <= gmem0_addr_3_reg_1037_pp0_iter16_reg;
                gmem0_addr_3_reg_1037_pp0_iter18_reg <= gmem0_addr_3_reg_1037_pp0_iter17_reg;
                gmem0_addr_3_reg_1037_pp0_iter19_reg <= gmem0_addr_3_reg_1037_pp0_iter18_reg;
                gmem0_addr_3_reg_1037_pp0_iter20_reg <= gmem0_addr_3_reg_1037_pp0_iter19_reg;
                gmem0_addr_3_reg_1037_pp0_iter21_reg <= gmem0_addr_3_reg_1037_pp0_iter20_reg;
                gmem0_addr_3_reg_1037_pp0_iter22_reg <= gmem0_addr_3_reg_1037_pp0_iter21_reg;
                gmem0_addr_3_reg_1037_pp0_iter23_reg <= gmem0_addr_3_reg_1037_pp0_iter22_reg;
                gmem0_addr_3_reg_1037_pp0_iter24_reg <= gmem0_addr_3_reg_1037_pp0_iter23_reg;
                gmem0_addr_3_reg_1037_pp0_iter25_reg <= gmem0_addr_3_reg_1037_pp0_iter24_reg;
                gmem0_addr_3_reg_1037_pp0_iter3_reg <= gmem0_addr_3_reg_1037;
                gmem0_addr_3_reg_1037_pp0_iter4_reg <= gmem0_addr_3_reg_1037_pp0_iter3_reg;
                gmem0_addr_3_reg_1037_pp0_iter5_reg <= gmem0_addr_3_reg_1037_pp0_iter4_reg;
                gmem0_addr_3_reg_1037_pp0_iter6_reg <= gmem0_addr_3_reg_1037_pp0_iter5_reg;
                gmem0_addr_3_reg_1037_pp0_iter7_reg <= gmem0_addr_3_reg_1037_pp0_iter6_reg;
                gmem0_addr_3_reg_1037_pp0_iter8_reg <= gmem0_addr_3_reg_1037_pp0_iter7_reg;
                gmem0_addr_3_reg_1037_pp0_iter9_reg <= gmem0_addr_3_reg_1037_pp0_iter8_reg;
                gmem0_addr_5_reg_1019_pp0_iter10_reg <= gmem0_addr_5_reg_1019_pp0_iter9_reg;
                gmem0_addr_5_reg_1019_pp0_iter11_reg <= gmem0_addr_5_reg_1019_pp0_iter10_reg;
                gmem0_addr_5_reg_1019_pp0_iter12_reg <= gmem0_addr_5_reg_1019_pp0_iter11_reg;
                gmem0_addr_5_reg_1019_pp0_iter13_reg <= gmem0_addr_5_reg_1019_pp0_iter12_reg;
                gmem0_addr_5_reg_1019_pp0_iter14_reg <= gmem0_addr_5_reg_1019_pp0_iter13_reg;
                gmem0_addr_5_reg_1019_pp0_iter15_reg <= gmem0_addr_5_reg_1019_pp0_iter14_reg;
                gmem0_addr_5_reg_1019_pp0_iter16_reg <= gmem0_addr_5_reg_1019_pp0_iter15_reg;
                gmem0_addr_5_reg_1019_pp0_iter17_reg <= gmem0_addr_5_reg_1019_pp0_iter16_reg;
                gmem0_addr_5_reg_1019_pp0_iter18_reg <= gmem0_addr_5_reg_1019_pp0_iter17_reg;
                gmem0_addr_5_reg_1019_pp0_iter19_reg <= gmem0_addr_5_reg_1019_pp0_iter18_reg;
                gmem0_addr_5_reg_1019_pp0_iter20_reg <= gmem0_addr_5_reg_1019_pp0_iter19_reg;
                gmem0_addr_5_reg_1019_pp0_iter21_reg <= gmem0_addr_5_reg_1019_pp0_iter20_reg;
                gmem0_addr_5_reg_1019_pp0_iter22_reg <= gmem0_addr_5_reg_1019_pp0_iter21_reg;
                gmem0_addr_5_reg_1019_pp0_iter23_reg <= gmem0_addr_5_reg_1019_pp0_iter22_reg;
                gmem0_addr_5_reg_1019_pp0_iter24_reg <= gmem0_addr_5_reg_1019_pp0_iter23_reg;
                gmem0_addr_5_reg_1019_pp0_iter25_reg <= gmem0_addr_5_reg_1019_pp0_iter24_reg;
                gmem0_addr_5_reg_1019_pp0_iter3_reg <= gmem0_addr_5_reg_1019;
                gmem0_addr_5_reg_1019_pp0_iter4_reg <= gmem0_addr_5_reg_1019_pp0_iter3_reg;
                gmem0_addr_5_reg_1019_pp0_iter5_reg <= gmem0_addr_5_reg_1019_pp0_iter4_reg;
                gmem0_addr_5_reg_1019_pp0_iter6_reg <= gmem0_addr_5_reg_1019_pp0_iter5_reg;
                gmem0_addr_5_reg_1019_pp0_iter7_reg <= gmem0_addr_5_reg_1019_pp0_iter6_reg;
                gmem0_addr_5_reg_1019_pp0_iter8_reg <= gmem0_addr_5_reg_1019_pp0_iter7_reg;
                gmem0_addr_5_reg_1019_pp0_iter9_reg <= gmem0_addr_5_reg_1019_pp0_iter8_reg;
                gmem0_addr_7_reg_1001_pp0_iter10_reg <= gmem0_addr_7_reg_1001_pp0_iter9_reg;
                gmem0_addr_7_reg_1001_pp0_iter11_reg <= gmem0_addr_7_reg_1001_pp0_iter10_reg;
                gmem0_addr_7_reg_1001_pp0_iter12_reg <= gmem0_addr_7_reg_1001_pp0_iter11_reg;
                gmem0_addr_7_reg_1001_pp0_iter13_reg <= gmem0_addr_7_reg_1001_pp0_iter12_reg;
                gmem0_addr_7_reg_1001_pp0_iter14_reg <= gmem0_addr_7_reg_1001_pp0_iter13_reg;
                gmem0_addr_7_reg_1001_pp0_iter15_reg <= gmem0_addr_7_reg_1001_pp0_iter14_reg;
                gmem0_addr_7_reg_1001_pp0_iter16_reg <= gmem0_addr_7_reg_1001_pp0_iter15_reg;
                gmem0_addr_7_reg_1001_pp0_iter17_reg <= gmem0_addr_7_reg_1001_pp0_iter16_reg;
                gmem0_addr_7_reg_1001_pp0_iter18_reg <= gmem0_addr_7_reg_1001_pp0_iter17_reg;
                gmem0_addr_7_reg_1001_pp0_iter19_reg <= gmem0_addr_7_reg_1001_pp0_iter18_reg;
                gmem0_addr_7_reg_1001_pp0_iter20_reg <= gmem0_addr_7_reg_1001_pp0_iter19_reg;
                gmem0_addr_7_reg_1001_pp0_iter21_reg <= gmem0_addr_7_reg_1001_pp0_iter20_reg;
                gmem0_addr_7_reg_1001_pp0_iter22_reg <= gmem0_addr_7_reg_1001_pp0_iter21_reg;
                gmem0_addr_7_reg_1001_pp0_iter23_reg <= gmem0_addr_7_reg_1001_pp0_iter22_reg;
                gmem0_addr_7_reg_1001_pp0_iter24_reg <= gmem0_addr_7_reg_1001_pp0_iter23_reg;
                gmem0_addr_7_reg_1001_pp0_iter25_reg <= gmem0_addr_7_reg_1001_pp0_iter24_reg;
                gmem0_addr_7_reg_1001_pp0_iter3_reg <= gmem0_addr_7_reg_1001;
                gmem0_addr_7_reg_1001_pp0_iter4_reg <= gmem0_addr_7_reg_1001_pp0_iter3_reg;
                gmem0_addr_7_reg_1001_pp0_iter5_reg <= gmem0_addr_7_reg_1001_pp0_iter4_reg;
                gmem0_addr_7_reg_1001_pp0_iter6_reg <= gmem0_addr_7_reg_1001_pp0_iter5_reg;
                gmem0_addr_7_reg_1001_pp0_iter7_reg <= gmem0_addr_7_reg_1001_pp0_iter6_reg;
                gmem0_addr_7_reg_1001_pp0_iter8_reg <= gmem0_addr_7_reg_1001_pp0_iter7_reg;
                gmem0_addr_7_reg_1001_pp0_iter9_reg <= gmem0_addr_7_reg_1001_pp0_iter8_reg;
                mul_reg_1141_pp0_iter16_reg <= mul_reg_1141;
                mul_reg_1141_pp0_iter17_reg <= mul_reg_1141_pp0_iter16_reg;
                mul_reg_1141_pp0_iter18_reg <= mul_reg_1141_pp0_iter17_reg;
                mul_reg_1141_pp0_iter19_reg <= mul_reg_1141_pp0_iter18_reg;
                mul_reg_1141_pp0_iter20_reg <= mul_reg_1141_pp0_iter19_reg;
                mul_reg_1141_pp0_iter21_reg <= mul_reg_1141_pp0_iter20_reg;
                mul_reg_1141_pp0_iter22_reg <= mul_reg_1141_pp0_iter21_reg;
                mul_reg_1141_pp0_iter23_reg <= mul_reg_1141_pp0_iter22_reg;
                mul_reg_1141_pp0_iter24_reg <= mul_reg_1141_pp0_iter23_reg;
                mul_reg_1141_pp0_iter25_reg <= mul_reg_1141_pp0_iter24_reg;
                mul_reg_1141_pp0_iter26_reg <= mul_reg_1141_pp0_iter25_reg;
                reg_338_pp0_iter21_reg <= reg_338;
                reg_338_pp0_iter22_reg <= reg_338_pp0_iter21_reg;
                reg_338_pp0_iter23_reg <= reg_338_pp0_iter22_reg;
                reg_338_pp0_iter24_reg <= reg_338_pp0_iter23_reg;
                reg_338_pp0_iter25_reg <= reg_338_pp0_iter24_reg;
                reg_338_pp0_iter26_reg <= reg_338_pp0_iter25_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_2_read_reg_1081 <= gmem0_RDATA;
                gmem0_addr_2_reg_1025 <= sext_ln28_fu_699_p1;
                gmem0_addr_3_reg_1037 <= sext_ln28_2_fu_749_p1;
                gmem1_addr_1_read_reg_1086 <= gmem1_RDATA;
                gmem1_addr_1_reg_1031 <= sext_ln28_1_fu_724_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_4_read_reg_1071 <= gmem0_RDATA;
                gmem0_addr_4_reg_1007 <= sext_ln29_fu_609_p1;
                gmem0_addr_5_reg_1019 <= sext_ln29_2_fu_659_p1;
                gmem1_addr_2_read_reg_1076 <= gmem1_RDATA;
                gmem1_addr_2_reg_1013 <= sext_ln29_1_fu_634_p1;
                mul_reg_1141 <= grp_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_read_reg_1091 <= gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem1_addr_read_reg_1096 <= gmem1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_338 <= grp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln23_reg_952 <= select_ln23_fu_416_p3;
                trunc_ln23_reg_960 <= trunc_ln23_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_reg_944(32 downto 5) <= tmp_fu_382_p3(32 downto 5);
            end if;
        end if;
    end process;
    tmp_reg_944(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter32, icmp_ln23_fu_393_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter31)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln23_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln20_fu_342_p2 <= std_logic_vector(unsigned(size) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln23_1_fu_398_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_132) + unsigned(ap_const_lv33_1));
    add_ln23_2_fu_474_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_470_p1) + unsigned(din_a_read_reg_934));
    add_ln23_3_fu_479_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_470_p1) + unsigned(din_b_read_reg_929));
    add_ln23_4_fu_484_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_470_p1) + unsigned(out_read_reg_924));
    add_ln23_5_fu_424_p2 <= std_logic_vector(unsigned(i_fu_128) + unsigned(ap_const_lv28_1));
    add_ln23_fu_376_p2 <= std_logic_vector(unsigned(zext_ln23_fu_373_p1) + unsigned(ap_const_lv28_1));
    add_ln25_fu_442_p2 <= std_logic_vector(unsigned(select_ln23_fu_416_p3) + unsigned(ap_const_lv6_1));
    add_ln28_1_fu_709_p2 <= std_logic_vector(unsigned(zext_ln28_fu_680_p1) + unsigned(add_ln23_3_reg_973));
    add_ln28_2_fu_734_p2 <= std_logic_vector(unsigned(zext_ln28_fu_680_p1) + unsigned(add_ln23_4_reg_981));
    add_ln28_fu_684_p2 <= std_logic_vector(unsigned(zext_ln28_fu_680_p1) + unsigned(add_ln23_2_reg_965));
    add_ln29_1_fu_619_p2 <= std_logic_vector(unsigned(zext_ln29_fu_590_p1) + unsigned(add_ln23_3_reg_973));
    add_ln29_2_fu_644_p2 <= std_logic_vector(unsigned(zext_ln29_fu_590_p1) + unsigned(add_ln23_4_reg_981));
    add_ln29_fu_594_p2 <= std_logic_vector(unsigned(zext_ln29_fu_590_p1) + unsigned(add_ln23_2_reg_965));
    add_ln30_1_fu_529_p2 <= std_logic_vector(unsigned(zext_ln30_fu_500_p1) + unsigned(add_ln23_3_reg_973));
    add_ln30_2_fu_554_p2 <= std_logic_vector(unsigned(zext_ln30_fu_500_p1) + unsigned(add_ln23_4_reg_981));
    add_ln30_fu_504_p2 <= std_logic_vector(unsigned(zext_ln30_fu_500_p1) + unsigned(add_ln23_2_reg_965));
    add_ln31_1_fu_799_p2 <= std_logic_vector(unsigned(zext_ln31_fu_770_p1) + unsigned(add_ln23_3_reg_973));
    add_ln31_2_fu_824_p2 <= std_logic_vector(unsigned(zext_ln31_fu_770_p1) + unsigned(add_ln23_4_reg_981));
    add_ln31_fu_774_p2 <= std_logic_vector(unsigned(zext_ln31_fu_770_p1) + unsigned(add_ln23_2_reg_965));
    add_ln31_mid2_v_v_fu_463_p3 <= (trunc_ln23_reg_960 & ap_const_lv7_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state36 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter32, gmem0_RVALID, gmem0_BVALID, gmem1_RVALID, ap_predicate_op220_read_state13, ap_predicate_op221_read_state13, ap_predicate_op305_writeresp_state35)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (((ap_predicate_op305_writeresp_state35 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (gmem0_RVALID = ap_const_logic_0)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter32, gmem0_RVALID, gmem0_BVALID, gmem1_RVALID, ap_block_state6_io, ap_predicate_op220_read_state13, ap_predicate_op221_read_state13, ap_block_state29_io, ap_block_state30_io, ap_predicate_op305_writeresp_state35)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state30_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (((ap_predicate_op305_writeresp_state35 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (gmem0_RVALID = ap_const_logic_0)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter32, gmem0_RVALID, gmem0_BVALID, gmem1_RVALID, ap_block_state6_io, ap_predicate_op220_read_state13, ap_predicate_op221_read_state13, ap_block_state29_io, ap_block_state30_io, ap_predicate_op305_writeresp_state35)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state30_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (((ap_predicate_op305_writeresp_state35 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (gmem0_RVALID = ap_const_logic_0)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)))));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter10_assign_proc : process(opcode_read_reg_920, gmem0_RVALID, gmem1_RVALID, ap_predicate_op220_read_state13, ap_predicate_op221_read_state13)
    begin
                ap_block_state13_pp0_stage0_iter10 <= (((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (gmem1_RVALID = ap_const_logic_0)) or ((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (gmem0_RVALID = ap_const_logic_0)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem1_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_RVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)));
    end process;

        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(opcode_read_reg_920, gmem0_AWREADY, ap_predicate_op274_writereq_state29)
    begin
                ap_block_state29_io <= (((ap_predicate_op274_writereq_state29 = ap_const_boolean_1) and (gmem0_AWREADY = ap_const_logic_0)) or ((gmem0_AWREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_AWREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_AWREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)));
    end process;

        ap_block_state29_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_io_assign_proc : process(opcode_read_reg_920, gmem0_WREADY, ap_predicate_op282_write_state30)
    begin
                ap_block_state30_io <= (((ap_predicate_op282_write_state30 = ap_const_boolean_1) and (gmem0_WREADY = ap_const_logic_0)) or ((gmem0_WREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_WREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_WREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)));
    end process;

        ap_block_state30_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_pp0_stage0_iter32_assign_proc : process(opcode_read_reg_920, gmem0_BVALID, ap_predicate_op305_writeresp_state35)
    begin
                ap_block_state35_pp0_stage0_iter32 <= (((ap_predicate_op305_writeresp_state35 = ap_const_boolean_1) and (gmem0_BVALID = ap_const_logic_0)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_BVALID = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(opcode_read_reg_920, gmem0_ARREADY, gmem1_ARREADY, ap_predicate_op164_readreq_state6, ap_predicate_op165_readreq_state6)
    begin
                ap_block_state6_io <= (((ap_predicate_op165_readreq_state6 = ap_const_boolean_1) and (gmem1_ARREADY = ap_const_logic_0)) or ((ap_predicate_op164_readreq_state6 = ap_const_boolean_1) and (gmem0_ARREADY = ap_const_logic_0)) or ((gmem1_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem1_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem1_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)) or ((gmem0_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_3)) or ((gmem0_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_2)) or ((gmem0_ARREADY = ap_const_logic_0) and (opcode_read_reg_920 = ap_const_lv32_1)));
    end process;

        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_196_assign_proc : process(opcode_read_reg_920)
    begin
                ap_condition_196 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln23_fu_393_p2)
    begin
        if ((icmp_ln23_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op164_readreq_state6_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op164_readreq_state6 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op165_readreq_state6_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op165_readreq_state6 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op220_read_state13_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op220_read_state13 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op221_read_state13_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op221_read_state13 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op274_writereq_state29_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op274_writereq_state29 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op282_write_state30_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op282_write_state30 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_predicate_op305_writeresp_state35_assign_proc : process(opcode_read_reg_920)
    begin
                ap_predicate_op305_writeresp_state35 <= (not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln28_1_fu_869_p1 <= gmem1_addr_1_read_reg_1086;
    bitcast_ln28_2_fu_889_p1 <= reg_338_pp0_iter26_reg;
    bitcast_ln28_fu_865_p1 <= gmem0_addr_2_read_reg_1081;
    bitcast_ln29_2_fu_885_p1 <= mul_reg_1141_pp0_iter26_reg;
    bitcast_ln30_2_fu_881_p1 <= div_reg_1146;
    bitcast_ln31_1_fu_877_p1 <= gmem1_addr_read_reg_1096;
    bitcast_ln31_2_fu_894_p1 <= reg_338_pp0_iter26_reg;
    bitcast_ln31_fu_873_p1 <= gmem0_addr_read_reg_1091;

    gmem0_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_predicate_op164_readreq_state6, ap_block_pp0_stage0_11001, gmem0_addr_6_reg_989, gmem0_addr_4_reg_1007, gmem0_addr_2_reg_1025, gmem0_addr_reg_1043)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((ap_predicate_op164_readreq_state6 = ap_const_boolean_1)) then 
                gmem0_ARADDR <= gmem0_addr_reg_1043;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                gmem0_ARADDR <= gmem0_addr_2_reg_1025;
            elsif ((opcode_read_reg_920 = ap_const_lv32_2)) then 
                gmem0_ARADDR <= gmem0_addr_4_reg_1007;
            elsif ((opcode_read_reg_920 = ap_const_lv32_3)) then 
                gmem0_ARADDR <= gmem0_addr_6_reg_989;
            else 
                gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_predicate_op164_readreq_state6, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op164_readreq_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gmem0_ARVALID <= ap_const_logic_1;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_AWADDR_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter26, ap_predicate_op274_writereq_state29, ap_block_pp0_stage0_11001, gmem0_addr_7_reg_1001_pp0_iter25_reg, gmem0_addr_5_reg_1019_pp0_iter25_reg, gmem0_addr_3_reg_1037_pp0_iter25_reg, gmem0_addr_1_reg_1055_pp0_iter25_reg)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
            if ((ap_predicate_op274_writereq_state29 = ap_const_boolean_1)) then 
                gmem0_AWADDR <= gmem0_addr_1_reg_1055_pp0_iter25_reg;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                gmem0_AWADDR <= gmem0_addr_3_reg_1037_pp0_iter25_reg;
            elsif ((opcode_read_reg_920 = ap_const_lv32_2)) then 
                gmem0_AWADDR <= gmem0_addr_5_reg_1019_pp0_iter25_reg;
            elsif ((opcode_read_reg_920 = ap_const_lv32_3)) then 
                gmem0_AWADDR <= gmem0_addr_7_reg_1001_pp0_iter25_reg;
            else 
                gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_AWVALID_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter26, ap_predicate_op274_writereq_state29, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op274_writereq_state29 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem0_AWVALID <= ap_const_logic_1;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter32, ap_predicate_op305_writeresp_state35, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op305_writeresp_state35 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem0_BREADY <= ap_const_logic_1;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter10, ap_predicate_op220_read_state13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op220_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem0_RREADY <= ap_const_logic_1;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WDATA_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter27, ap_predicate_op282_write_state30, bitcast_ln30_2_fu_881_p1, ap_block_pp0_stage0_01001, bitcast_ln29_2_fu_885_p1, bitcast_ln28_2_fu_889_p1, bitcast_ln31_2_fu_894_p1)
    begin
        if (((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((ap_predicate_op282_write_state30 = ap_const_boolean_1)) then 
                gmem0_WDATA <= bitcast_ln31_2_fu_894_p1;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                gmem0_WDATA <= bitcast_ln28_2_fu_889_p1;
            elsif ((opcode_read_reg_920 = ap_const_lv32_2)) then 
                gmem0_WDATA <= bitcast_ln29_2_fu_885_p1;
            elsif ((opcode_read_reg_920 = ap_const_lv32_3)) then 
                gmem0_WDATA <= bitcast_ln30_2_fu_881_p1;
            else 
                gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter27, ap_predicate_op282_write_state30, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op282_write_state30 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem0_WVALID <= ap_const_logic_1;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, opcode_read_reg_920)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(m_axi_gmem0_AWREADY, ap_block_pp0_stage0, opcode_read_reg_920, ap_enable_reg_pp0_iter26)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(m_axi_gmem0_BVALID, ap_block_pp0_stage0, opcode_read_reg_920, ap_enable_reg_pp0_iter32)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter32 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(m_axi_gmem0_RVALID, ap_block_pp0_stage0, opcode_read_reg_920, ap_enable_reg_pp0_iter10)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(m_axi_gmem0_WREADY, ap_block_pp0_stage0, opcode_read_reg_920, ap_enable_reg_pp0_iter27)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_predicate_op165_readreq_state6, ap_block_pp0_stage0_11001, gmem1_addr_3_reg_995, gmem1_addr_2_reg_1013, gmem1_addr_1_reg_1031, gmem1_addr_reg_1049)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((ap_predicate_op165_readreq_state6 = ap_const_boolean_1)) then 
                gmem1_ARADDR <= gmem1_addr_reg_1049;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                gmem1_ARADDR <= gmem1_addr_1_reg_1031;
            elsif ((opcode_read_reg_920 = ap_const_lv32_2)) then 
                gmem1_ARADDR <= gmem1_addr_2_reg_1013;
            elsif ((opcode_read_reg_920 = ap_const_lv32_3)) then 
                gmem1_ARADDR <= gmem1_addr_3_reg_995;
            else 
                gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, opcode_read_reg_920, ap_predicate_op165_readreq_state6, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op165_readreq_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gmem1_ARVALID <= ap_const_logic_1;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(opcode_read_reg_920, ap_enable_reg_pp0_iter10, ap_predicate_op221_read_state13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op221_read_state13 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem1_RREADY <= ap_const_logic_1;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AR_assign_proc : process(m_axi_gmem1_ARREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, opcode_read_reg_920)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(m_axi_gmem1_RVALID, ap_block_pp0_stage0, opcode_read_reg_920, ap_enable_reg_pp0_iter10)
    begin
        if (((not((opcode_read_reg_920 = ap_const_lv32_0)) and not((opcode_read_reg_920 = ap_const_lv32_3)) and not((opcode_read_reg_920 = ap_const_lv32_2)) and not((opcode_read_reg_920 = ap_const_lv32_1)) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_3) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (opcode_read_reg_920 = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_326_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_326_ce <= ap_const_logic_1;
        else 
            grp_fu_326_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_326_p0_assign_proc : process(ap_block_pp0_stage0, opcode_read_reg_920, bitcast_ln28_fu_865_p1, bitcast_ln31_fu_873_p1, ap_enable_reg_pp0_iter11, ap_condition_196)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_const_boolean_1 = ap_condition_196)) then 
                grp_fu_326_p0 <= bitcast_ln31_fu_873_p1;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                grp_fu_326_p0 <= bitcast_ln28_fu_865_p1;
            else 
                grp_fu_326_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_326_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_326_p1_assign_proc : process(ap_block_pp0_stage0, opcode_read_reg_920, bitcast_ln28_1_fu_869_p1, bitcast_ln31_1_fu_877_p1, ap_enable_reg_pp0_iter11, ap_condition_196)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_const_boolean_1 = ap_condition_196)) then 
                grp_fu_326_p1 <= bitcast_ln31_1_fu_877_p1;
            elsif ((opcode_read_reg_920 = ap_const_lv32_1)) then 
                grp_fu_326_p1 <= bitcast_ln28_1_fu_869_p1;
            else 
                grp_fu_326_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_326_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= gmem0_addr_4_read_reg_1071;
    grp_fu_330_p1 <= gmem1_addr_2_read_reg_1076;

    grp_fu_334_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_334_ce <= ap_const_logic_1;
        else 
            grp_fu_334_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_334_p0 <= gmem0_addr_6_read_reg_1061;
    grp_fu_334_p1 <= gmem1_addr_3_read_reg_1066;
    icmp_ln23_fu_393_p2 <= "1" when (indvar_flatten_fu_132 = tmp_reg_944) else "0";
    icmp_ln25_fu_410_p2 <= "1" when (k_fu_124 = ap_const_lv6_20) else "0";
    select_ln23_1_fu_430_p3 <= 
        add_ln23_5_fu_424_p2 when (icmp_ln25_fu_410_p2(0) = '1') else 
        i_fu_128;
    select_ln23_fu_416_p3 <= 
        ap_const_lv6_0 when (icmp_ln25_fu_410_p2(0) = '1') else 
        k_fu_124;
        sext_ln28_1_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln28_1_fu_714_p4),64));

        sext_ln28_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln28_2_fu_739_p4),64));

        sext_ln28_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_689_p4),64));

        sext_ln29_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln29_1_fu_624_p4),64));

        sext_ln29_2_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln29_2_fu_649_p4),64));

        sext_ln29_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_599_p4),64));

        sext_ln30_1_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_1_fu_534_p4),64));

        sext_ln30_2_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln30_2_fu_559_p4),64));

        sext_ln30_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_509_p4),64));

        sext_ln31_1_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_1_fu_804_p4),64));

        sext_ln31_2_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_2_fu_829_p4),64));

        sext_ln31_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_779_p4),64));

    shl_ln1_fu_582_p3 <= (trunc_ln29_fu_579_p1 & ap_const_lv2_0);
    shl_ln2_fu_492_p3 <= (trunc_ln30_fu_489_p1 & ap_const_lv2_0);
    shl_ln31_1_fu_762_p3 <= (trunc_ln31_fu_759_p1 & ap_const_lv2_0);
    shl_ln_fu_672_p3 <= (trunc_ln28_fu_669_p1 & ap_const_lv2_0);
    tmp_fu_382_p3 <= (add_ln23_fu_376_p2 & ap_const_lv5_0);
    trunc_ln1_fu_779_p4 <= add_ln31_fu_774_p2(63 downto 2);
    trunc_ln23_fu_438_p1 <= select_ln23_1_fu_430_p3(27 - 1 downto 0);
    trunc_ln28_1_fu_714_p4 <= add_ln28_1_fu_709_p2(63 downto 2);
    trunc_ln28_2_fu_739_p4 <= add_ln28_2_fu_734_p2(63 downto 2);
    trunc_ln28_fu_669_p1 <= select_ln23_reg_952_pp0_iter1_reg(5 - 1 downto 0);
    trunc_ln29_1_fu_624_p4 <= add_ln29_1_fu_619_p2(63 downto 2);
    trunc_ln29_2_fu_649_p4 <= add_ln29_2_fu_644_p2(63 downto 2);
    trunc_ln29_fu_579_p1 <= select_ln23_reg_952_pp0_iter1_reg(5 - 1 downto 0);
    trunc_ln2_fu_689_p4 <= add_ln28_fu_684_p2(63 downto 2);
    trunc_ln30_1_fu_534_p4 <= add_ln30_1_fu_529_p2(63 downto 2);
    trunc_ln30_2_fu_559_p4 <= add_ln30_2_fu_554_p2(63 downto 2);
    trunc_ln30_fu_489_p1 <= select_ln23_reg_952_pp0_iter1_reg(5 - 1 downto 0);
    trunc_ln31_1_fu_804_p4 <= add_ln31_1_fu_799_p2(63 downto 2);
    trunc_ln31_2_fu_829_p4 <= add_ln31_2_fu_824_p2(63 downto 2);
    trunc_ln31_fu_759_p1 <= select_ln23_reg_952_pp0_iter1_reg(5 - 1 downto 0);
    trunc_ln3_fu_599_p4 <= add_ln29_fu_594_p2(63 downto 2);
    trunc_ln4_fu_509_p4 <= add_ln30_fu_504_p2(63 downto 2);
    zext_ln23_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_mid2_v_v_fu_463_p3),64));
    zext_ln23_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_939),28));
    zext_ln28_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_672_p3),64));
    zext_ln29_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_582_p3),64));
    zext_ln30_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_492_p3),64));
    zext_ln31_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_1_fu_762_p3),64));
end behav;
